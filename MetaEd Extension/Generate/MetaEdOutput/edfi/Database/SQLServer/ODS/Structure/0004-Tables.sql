-- Table [edfi].[AcademicHonorCategoryType] --
CREATE TABLE [edfi].[AcademicHonorCategoryType] (
    [AcademicHonorCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AcademicHonorCategoryType_PK] PRIMARY KEY CLUSTERED (
        [AcademicHonorCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AcademicHonorCategoryType] ADD CONSTRAINT [AcademicHonorCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AcademicHonorCategoryType] ADD CONSTRAINT [AcademicHonorCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AcademicHonorCategoryType] ADD CONSTRAINT [AcademicHonorCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AcademicSubjectDescriptor] --
CREATE TABLE [edfi].[AcademicSubjectDescriptor] (
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AcademicSubjectTypeId] [INT] NOT NULL,
    CONSTRAINT [AcademicSubjectDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AcademicSubjectDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AcademicSubjectType] --
CREATE TABLE [edfi].[AcademicSubjectType] (
    [AcademicSubjectTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AcademicSubjectType_PK] PRIMARY KEY CLUSTERED (
        [AcademicSubjectTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AcademicSubjectType] ADD CONSTRAINT [AcademicSubjectType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AcademicSubjectType] ADD CONSTRAINT [AcademicSubjectType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AcademicSubjectType] ADD CONSTRAINT [AcademicSubjectType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AcademicWeek] --
CREATE TABLE [edfi].[AcademicWeek] (
    [WeekIdentifier] [NVARCHAR](80) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NOT NULL,
    [TotalInstructionalDays] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AcademicWeek_PK] PRIMARY KEY CLUSTERED (
        [WeekIdentifier] ASC,
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AcademicWeek] ADD CONSTRAINT [AcademicWeek_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AcademicWeek] ADD CONSTRAINT [AcademicWeek_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AcademicWeek] ADD CONSTRAINT [AcademicWeek_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AccommodationDescriptor] --
CREATE TABLE [edfi].[AccommodationDescriptor] (
    [AccommodationDescriptorId] [INT] NOT NULL,
    [AccommodationTypeId] [INT] NULL,
    CONSTRAINT [AccommodationDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AccommodationDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AccommodationType] --
CREATE TABLE [edfi].[AccommodationType] (
    [AccommodationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AccommodationType_PK] PRIMARY KEY CLUSTERED (
        [AccommodationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AccommodationType] ADD CONSTRAINT [AccommodationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AccommodationType] ADD CONSTRAINT [AccommodationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AccommodationType] ADD CONSTRAINT [AccommodationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Account] --
CREATE TABLE [edfi].[Account] (
    [EducationOrganizationId] [INT] NOT NULL,
    [AccountNumber] [NVARCHAR](50) NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Account_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [AccountNumber] ASC,
        [FiscalYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Account] ADD CONSTRAINT [Account_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Account] ADD CONSTRAINT [Account_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Account] ADD CONSTRAINT [Account_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AccountabilityRating] --
CREATE TABLE [edfi].[AccountabilityRating] (
    [RatingTitle] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [Rating] [NVARCHAR](35) NOT NULL,
    [RatingDate] [DATE] NULL,
    [RatingOrganization] [NVARCHAR](35) NULL,
    [RatingProgram] [NVARCHAR](30) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AccountabilityRating_PK] PRIMARY KEY CLUSTERED (
        [RatingTitle] ASC,
        [EducationOrganizationId] ASC,
        [SchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AccountabilityRating] ADD CONSTRAINT [AccountabilityRating_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AccountabilityRating] ADD CONSTRAINT [AccountabilityRating_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AccountabilityRating] ADD CONSTRAINT [AccountabilityRating_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AccountCode] --
CREATE TABLE [edfi].[AccountCode] (
    [EducationOrganizationId] [INT] NOT NULL,
    [AccountNumber] [NVARCHAR](50) NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [AccountCodeDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AccountCode_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [AccountNumber] ASC,
        [FiscalYear] ASC,
        [AccountCodeDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AccountCode] ADD CONSTRAINT [AccountCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AccountCodeDescriptor] --
CREATE TABLE [edfi].[AccountCodeDescriptor] (
    [AccountCodeDescriptorId] [INT] NOT NULL,
    [AccountCodeCategory] [NVARCHAR](20) NOT NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    CONSTRAINT [AccountCodeDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AccountCodeDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AchievementCategoryDescriptor] --
CREATE TABLE [edfi].[AchievementCategoryDescriptor] (
    [AchievementCategoryDescriptorId] [INT] NOT NULL,
    [AchievementCategoryTypeId] [INT] NULL,
    CONSTRAINT [AchievementCategoryDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AchievementCategoryDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AchievementCategoryType] --
CREATE TABLE [edfi].[AchievementCategoryType] (
    [AchievementCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AchievementCategoryType_PK] PRIMARY KEY CLUSTERED (
        [AchievementCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AchievementCategoryType] ADD CONSTRAINT [AchievementCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AchievementCategoryType] ADD CONSTRAINT [AchievementCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AchievementCategoryType] ADD CONSTRAINT [AchievementCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Actual] --
CREATE TABLE [edfi].[Actual] (
    [EducationOrganizationId] [INT] NOT NULL,
    [AccountNumber] [NVARCHAR](50) NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [AsOfDate] [DATE] NOT NULL,
    [AmountToDate] [MONEY] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Actual_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [AccountNumber] ASC,
        [FiscalYear] ASC,
        [AsOfDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Actual] ADD CONSTRAINT [Actual_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Actual] ADD CONSTRAINT [Actual_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Actual] ADD CONSTRAINT [Actual_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AdditionalCreditType] --
CREATE TABLE [edfi].[AdditionalCreditType] (
    [AdditionalCreditTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AdditionalCreditType_PK] PRIMARY KEY CLUSTERED (
        [AdditionalCreditTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AdditionalCreditType] ADD CONSTRAINT [AdditionalCreditType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AdditionalCreditType] ADD CONSTRAINT [AdditionalCreditType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AdditionalCreditType] ADD CONSTRAINT [AdditionalCreditType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AddressType] --
CREATE TABLE [edfi].[AddressType] (
    [AddressTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AddressType_PK] PRIMARY KEY CLUSTERED (
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AddressType] ADD CONSTRAINT [AddressType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AddressType] ADD CONSTRAINT [AddressType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AddressType] ADD CONSTRAINT [AddressType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AdministrationEnvironmentType] --
CREATE TABLE [edfi].[AdministrationEnvironmentType] (
    [AdministrationEnvironmentTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AdministrationEnvironmentType_PK] PRIMARY KEY CLUSTERED (
        [AdministrationEnvironmentTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AdministrationEnvironmentType] ADD CONSTRAINT [AdministrationEnvironmentType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AdministrationEnvironmentType] ADD CONSTRAINT [AdministrationEnvironmentType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AdministrationEnvironmentType] ADD CONSTRAINT [AdministrationEnvironmentType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AdministrativeFundingControlDescriptor] --
CREATE TABLE [edfi].[AdministrativeFundingControlDescriptor] (
    [AdministrativeFundingControlDescriptorId] [INT] NOT NULL,
    [AdministrativeFundingControlTypeId] [INT] NULL,
    CONSTRAINT [AdministrativeFundingControlDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AdministrativeFundingControlDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AdministrativeFundingControlType] --
CREATE TABLE [edfi].[AdministrativeFundingControlType] (
    [AdministrativeFundingControlTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AdministrativeFundingControlType_PK] PRIMARY KEY CLUSTERED (
        [AdministrativeFundingControlTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AdministrativeFundingControlType] ADD CONSTRAINT [AdministrativeFundingControlType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AdministrativeFundingControlType] ADD CONSTRAINT [AdministrativeFundingControlType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AdministrativeFundingControlType] ADD CONSTRAINT [AdministrativeFundingControlType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Assessment] --
CREATE TABLE [edfi].[Assessment] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [AssessmentCategoryDescriptorId] [INT] NULL,
    [LowestAssessedGradeLevelDescriptorId] [INT] NULL,
    [AssessmentForm] [NVARCHAR](60) NULL,
    [RevisionDate] [DATE] NULL,
    [MaxRawScore] [INT] NULL,
    [Nomenclature] [NVARCHAR](35) NULL,
    [AssessmentPeriodDescriptorId] [INT] NULL,
    [AssessmentFamilyTitle] [NVARCHAR](60) NULL,
    [Namespace] [NVARCHAR](255) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Assessment_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [Version] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [Assessment_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [Assessment_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Assessment] ADD CONSTRAINT [Assessment_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentCategoryDescriptor] --
CREATE TABLE [edfi].[AssessmentCategoryDescriptor] (
    [AssessmentCategoryDescriptorId] [INT] NOT NULL,
    [AssessmentCategoryTypeId] [INT] NULL,
    CONSTRAINT [AssessmentCategoryDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AssessmentCategoryDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AssessmentCategoryType] --
CREATE TABLE [edfi].[AssessmentCategoryType] (
    [AssessmentCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AssessmentCategoryType_PK] PRIMARY KEY CLUSTERED (
        [AssessmentCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentCategoryType] ADD CONSTRAINT [AssessmentCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AssessmentCategoryType] ADD CONSTRAINT [AssessmentCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AssessmentCategoryType] ADD CONSTRAINT [AssessmentCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentContentStandard] --
CREATE TABLE [edfi].[AssessmentContentStandard] (
    [AssessmentVersion] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Title] [NVARCHAR](75) NOT NULL,
    [URI] [NVARCHAR](255) NULL,
    [PublicationDate] [DATE] NULL,
    [PublicationYear] [SMALLINT] NULL,
    [PublicationStatusTypeId] [INT] NULL,
    [MandatingEducationOrganizationId] [INT] NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [Version] [NVARCHAR](50) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentContentStandard_PK] PRIMARY KEY CLUSTERED (
        [AssessmentVersion] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentContentStandard] ADD CONSTRAINT [AssessmentContentStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentContentStandardAuthor] --
CREATE TABLE [edfi].[AssessmentContentStandardAuthor] (
    [AssessmentVersion] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Author] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentContentStandardAuthor_PK] PRIMARY KEY CLUSTERED (
        [AssessmentVersion] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Author] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentContentStandardAuthor] ADD CONSTRAINT [AssessmentContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentFamily] --
CREATE TABLE [edfi].[AssessmentFamily] (
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL,
    [AssessmentCategoryDescriptorId] [INT] NULL,
    [AcademicSubjectDescriptorId] [INT] NULL,
    [AssessedGradeLevelDescriptorId] [INT] NULL,
    [LowestAssessedGradeLevelDescriptorId] [INT] NULL,
    [Version] [INT] NULL,
    [RevisionDate] [DATE] NULL,
    [Nomenclature] [NVARCHAR](35) NULL,
    [ParentAssessmentFamilyTitle] [NVARCHAR](60) NULL,
    [Namespace] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AssessmentFamily_PK] PRIMARY KEY CLUSTERED (
        [AssessmentFamilyTitle] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [AssessmentFamily_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [AssessmentFamily_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AssessmentFamily] ADD CONSTRAINT [AssessmentFamily_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentFamilyAssessmentPeriod] --
CREATE TABLE [edfi].[AssessmentFamilyAssessmentPeriod] (
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL,
    [AssessmentPeriodDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentFamilyAssessmentPeriod_PK] PRIMARY KEY CLUSTERED (
        [AssessmentFamilyTitle] ASC,
        [AssessmentPeriodDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentFamilyAssessmentPeriod] ADD CONSTRAINT [AssessmentFamilyAssessmentPeriod_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentFamilyContentStandard] --
CREATE TABLE [edfi].[AssessmentFamilyContentStandard] (
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL,
    [Title] [NVARCHAR](75) NOT NULL,
    [Version] [NVARCHAR](50) NULL,
    [URI] [NVARCHAR](255) NULL,
    [PublicationDate] [DATE] NULL,
    [PublicationYear] [SMALLINT] NULL,
    [PublicationStatusTypeId] [INT] NULL,
    [MandatingEducationOrganizationId] [INT] NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentFamilyContentStandard_PK] PRIMARY KEY CLUSTERED (
        [AssessmentFamilyTitle] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentFamilyContentStandard] ADD CONSTRAINT [AssessmentFamilyContentStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentFamilyContentStandardAuthor] --
CREATE TABLE [edfi].[AssessmentFamilyContentStandardAuthor] (
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL,
    [Author] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentFamilyContentStandardAuthor_PK] PRIMARY KEY CLUSTERED (
        [AssessmentFamilyTitle] ASC,
        [Author] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentFamilyContentStandardAuthor] ADD CONSTRAINT [AssessmentFamilyContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentFamilyIdentificationCode] --
CREATE TABLE [edfi].[AssessmentFamilyIdentificationCode] (
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL,
    [AssessmentIdentificationSystemDescriptorId] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentFamilyIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [AssessmentFamilyTitle] ASC,
        [AssessmentIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentFamilyIdentificationCode] ADD CONSTRAINT [AssessmentFamilyIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentFamilyLanguage] --
CREATE TABLE [edfi].[AssessmentFamilyLanguage] (
    [AssessmentFamilyTitle] [NVARCHAR](60) NOT NULL,
    [LanguageDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentFamilyLanguage_PK] PRIMARY KEY CLUSTERED (
        [AssessmentFamilyTitle] ASC,
        [LanguageDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentFamilyLanguage] ADD CONSTRAINT [AssessmentFamilyLanguage_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentIdentificationCode] --
CREATE TABLE [edfi].[AssessmentIdentificationCode] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [AssessmentIdentificationSystemDescriptorId] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [AssessmentIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentIdentificationCode] ADD CONSTRAINT [AssessmentIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentIdentificationSystemDescriptor] --
CREATE TABLE [edfi].[AssessmentIdentificationSystemDescriptor] (
    [AssessmentIdentificationSystemDescriptorId] [INT] NOT NULL,
    [AssessmentIdentificationSystemTypeId] [INT] NOT NULL,
    CONSTRAINT [AssessmentIdentificationSystemDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AssessmentIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AssessmentIdentificationSystemType] --
CREATE TABLE [edfi].[AssessmentIdentificationSystemType] (
    [AssessmentIdentificationSystemTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AssessmentIdentificationSystemType_PK] PRIMARY KEY CLUSTERED (
        [AssessmentIdentificationSystemTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentIdentificationSystemType] ADD CONSTRAINT [AssessmentIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AssessmentIdentificationSystemType] ADD CONSTRAINT [AssessmentIdentificationSystemType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AssessmentIdentificationSystemType] ADD CONSTRAINT [AssessmentIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentItem] --
CREATE TABLE [edfi].[AssessmentItem] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AssessmentItemCategoryTypeId] [INT] NULL,
    [MaxRawScore] [INT] NULL,
    [CorrectResponse] [NVARCHAR](20) NULL,
    [ExpectedTimeAssessed] [NVARCHAR](30) NULL,
    [Nomenclature] [NVARCHAR](35) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AssessmentItem_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentItem] ADD CONSTRAINT [AssessmentItem_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AssessmentItem] ADD CONSTRAINT [AssessmentItem_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AssessmentItem] ADD CONSTRAINT [AssessmentItem_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentItemCategoryType] --
CREATE TABLE [edfi].[AssessmentItemCategoryType] (
    [AssessmentItemCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AssessmentItemCategoryType_PK] PRIMARY KEY CLUSTERED (
        [AssessmentItemCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentItemCategoryType] ADD CONSTRAINT [AssessmentItemCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AssessmentItemCategoryType] ADD CONSTRAINT [AssessmentItemCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AssessmentItemCategoryType] ADD CONSTRAINT [AssessmentItemCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentItemLearningStandard] --
CREATE TABLE [edfi].[AssessmentItemLearningStandard] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentItemLearningStandard_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [LearningStandardId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentItemLearningStandard] ADD CONSTRAINT [AssessmentItemLearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentItemResultType] --
CREATE TABLE [edfi].[AssessmentItemResultType] (
    [AssessmentItemResultTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AssessmentItemResultType_PK] PRIMARY KEY CLUSTERED (
        [AssessmentItemResultTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentItemResultType] ADD CONSTRAINT [AssessmentItemResultType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AssessmentItemResultType] ADD CONSTRAINT [AssessmentItemResultType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AssessmentItemResultType] ADD CONSTRAINT [AssessmentItemResultType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentLanguage] --
CREATE TABLE [edfi].[AssessmentLanguage] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [LanguageDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentLanguage_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [LanguageDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentLanguage] ADD CONSTRAINT [AssessmentLanguage_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentPerformanceLevel] --
CREATE TABLE [edfi].[AssessmentPerformanceLevel] (
    [PerformanceLevelDescriptorId] [INT] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [MinimumScore] [NVARCHAR](35) NULL,
    [MaximumScore] [NVARCHAR](35) NULL,
    [ResultDatatypeTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentPerformanceLevel_PK] PRIMARY KEY CLUSTERED (
        [PerformanceLevelDescriptorId] ASC,
        [AssessmentReportingMethodTypeId] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentPerformanceLevel] ADD CONSTRAINT [AssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentPeriodDescriptor] --
CREATE TABLE [edfi].[AssessmentPeriodDescriptor] (
    [AssessmentPeriodDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    CONSTRAINT [AssessmentPeriodDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AssessmentPeriodDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AssessmentProgram] --
CREATE TABLE [edfi].[AssessmentProgram] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentProgram_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentProgram] ADD CONSTRAINT [AssessmentProgram_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentReportingMethodType] --
CREATE TABLE [edfi].[AssessmentReportingMethodType] (
    [AssessmentReportingMethodTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AssessmentReportingMethodType_PK] PRIMARY KEY CLUSTERED (
        [AssessmentReportingMethodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentReportingMethodType] ADD CONSTRAINT [AssessmentReportingMethodType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AssessmentReportingMethodType] ADD CONSTRAINT [AssessmentReportingMethodType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AssessmentReportingMethodType] ADD CONSTRAINT [AssessmentReportingMethodType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[AssessmentScore] --
CREATE TABLE [edfi].[AssessmentScore] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [MinimumScore] [NVARCHAR](35) NULL,
    [MaximumScore] [NVARCHAR](35) NULL,
    [ResultDatatypeTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentScore_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [AssessmentReportingMethodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentScore] ADD CONSTRAINT [AssessmentScore_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AssessmentSection] --
CREATE TABLE [edfi].[AssessmentSection] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [AssessmentSection_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [SchoolYear] ASC,
        [LocalCourseCode] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AssessmentSection] ADD CONSTRAINT [AssessmentSection_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[AttendanceEventCategoryDescriptor] --
CREATE TABLE [edfi].[AttendanceEventCategoryDescriptor] (
    [AttendanceEventCategoryDescriptorId] [INT] NOT NULL,
    [AttendanceEventCategoryTypeId] [INT] NOT NULL,
    CONSTRAINT [AttendanceEventCategoryDescriptor_PK] PRIMARY KEY CLUSTERED (
        [AttendanceEventCategoryDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[AttendanceEventCategoryType] --
CREATE TABLE [edfi].[AttendanceEventCategoryType] (
    [AttendanceEventCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [AttendanceEventCategoryType_PK] PRIMARY KEY CLUSTERED (
        [AttendanceEventCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[AttendanceEventCategoryType] ADD CONSTRAINT [AttendanceEventCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[AttendanceEventCategoryType] ADD CONSTRAINT [AttendanceEventCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[AttendanceEventCategoryType] ADD CONSTRAINT [AttendanceEventCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[BehaviorDescriptor] --
CREATE TABLE [edfi].[BehaviorDescriptor] (
    [BehaviorDescriptorId] [INT] NOT NULL,
    [BehaviorTypeId] [INT] NULL,
    CONSTRAINT [BehaviorDescriptor_PK] PRIMARY KEY CLUSTERED (
        [BehaviorDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[BehaviorType] --
CREATE TABLE [edfi].[BehaviorType] (
    [BehaviorTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [BehaviorType_PK] PRIMARY KEY CLUSTERED (
        [BehaviorTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[BehaviorType] ADD CONSTRAINT [BehaviorType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[BehaviorType] ADD CONSTRAINT [BehaviorType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[BehaviorType] ADD CONSTRAINT [BehaviorType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[BellSchedule] --
CREATE TABLE [edfi].[BellSchedule] (
    [BellScheduleName] [NVARCHAR](60) NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [Date] [DATE] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [BellSchedule_PK] PRIMARY KEY CLUSTERED (
        [BellScheduleName] ASC,
        [GradeLevelDescriptorId] ASC,
        [SchoolId] ASC,
        [Date] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[BellSchedule] ADD CONSTRAINT [BellSchedule_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[BellSchedule] ADD CONSTRAINT [BellSchedule_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[BellSchedule] ADD CONSTRAINT [BellSchedule_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[BellScheduleMeetingTime] --
CREATE TABLE [edfi].[BellScheduleMeetingTime] (
    [SchoolId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [Date] [DATE] NOT NULL,
    [BellScheduleName] [NVARCHAR](60) NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [StartTime] [TIME](7) NOT NULL,
    [AlternateDayName] [NVARCHAR](20) NULL,
    [EndTime] [TIME](7) NOT NULL,
    [OfficialAttendancePeriod] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [BellScheduleMeetingTime_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [GradeLevelDescriptorId] ASC,
        [Date] ASC,
        [BellScheduleName] ASC,
        [ClassPeriodName] ASC,
        [StartTime] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[BellScheduleMeetingTime] ADD CONSTRAINT [BellScheduleMeetingTime_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[Budget] --
CREATE TABLE [edfi].[Budget] (
    [EducationOrganizationId] [INT] NOT NULL,
    [AccountNumber] [NVARCHAR](50) NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [AsOfDate] [DATE] NOT NULL,
    [Amount] [MONEY] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Budget_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [AccountNumber] ASC,
        [FiscalYear] ASC,
        [AsOfDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Budget] ADD CONSTRAINT [Budget_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Budget] ADD CONSTRAINT [Budget_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Budget] ADD CONSTRAINT [Budget_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CalendarDate] --
CREATE TABLE [edfi].[CalendarDate] (
    [SchoolId] [INT] NOT NULL,
    [Date] [DATE] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CalendarDate_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [Date] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CalendarDate] ADD CONSTRAINT [CalendarDate_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CalendarDate] ADD CONSTRAINT [CalendarDate_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CalendarDate] ADD CONSTRAINT [CalendarDate_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CalendarDateCalendarEvent] --
CREATE TABLE [edfi].[CalendarDateCalendarEvent] (
    [SchoolId] [INT] NOT NULL,
    [Date] [DATE] NOT NULL,
    [CalendarEventDescriptorId] [INT] NOT NULL,
    [EventDuration] [DECIMAL](3, 2) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CalendarDateCalendarEvent_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [Date] ASC,
        [CalendarEventDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CalendarDateCalendarEvent] ADD CONSTRAINT [CalendarDateCalendarEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CalendarEventDescriptor] --
CREATE TABLE [edfi].[CalendarEventDescriptor] (
    [CalendarEventDescriptorId] [INT] NOT NULL,
    [CalendarEventTypeId] [INT] NOT NULL,
    CONSTRAINT [CalendarEventDescriptor_PK] PRIMARY KEY CLUSTERED (
        [CalendarEventDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[CalendarEventType] --
CREATE TABLE [edfi].[CalendarEventType] (
    [CalendarEventTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CalendarEventType_PK] PRIMARY KEY CLUSTERED (
        [CalendarEventTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CalendarEventType] ADD CONSTRAINT [CalendarEventType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CalendarEventType] ADD CONSTRAINT [CalendarEventType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CalendarEventType] ADD CONSTRAINT [CalendarEventType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CareerPathwayType] --
CREATE TABLE [edfi].[CareerPathwayType] (
    [CareerPathwayTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CareerPathwayType_PK] PRIMARY KEY CLUSTERED (
        [CareerPathwayTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CareerPathwayType] ADD CONSTRAINT [CareerPathwayType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CareerPathwayType] ADD CONSTRAINT [CareerPathwayType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CareerPathwayType] ADD CONSTRAINT [CareerPathwayType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CharterApprovalAgencyType] --
CREATE TABLE [edfi].[CharterApprovalAgencyType] (
    [CharterApprovalAgencyTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CharterApprovalAgencyType_PK] PRIMARY KEY CLUSTERED (
        [CharterApprovalAgencyTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CharterApprovalAgencyType] ADD CONSTRAINT [CharterApprovalAgencyType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CharterApprovalAgencyType] ADD CONSTRAINT [CharterApprovalAgencyType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CharterApprovalAgencyType] ADD CONSTRAINT [CharterApprovalAgencyType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CharterStatusType] --
CREATE TABLE [edfi].[CharterStatusType] (
    [CharterStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CharterStatusType_PK] PRIMARY KEY CLUSTERED (
        [CharterStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CharterStatusType] ADD CONSTRAINT [CharterStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CharterStatusType] ADD CONSTRAINT [CharterStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CharterStatusType] ADD CONSTRAINT [CharterStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CitizenshipStatusType] --
CREATE TABLE [edfi].[CitizenshipStatusType] (
    [CitizenshipStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CitizenshipStatusType_PK] PRIMARY KEY CLUSTERED (
        [CitizenshipStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CitizenshipStatusType] ADD CONSTRAINT [CitizenshipStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CitizenshipStatusType] ADD CONSTRAINT [CitizenshipStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CitizenshipStatusType] ADD CONSTRAINT [CitizenshipStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ClassPeriod] --
CREATE TABLE [edfi].[ClassPeriod] (
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ClassPeriod_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [ClassPeriodName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ClassPeriod] ADD CONSTRAINT [ClassPeriod_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ClassPeriod] ADD CONSTRAINT [ClassPeriod_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ClassPeriod] ADD CONSTRAINT [ClassPeriod_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ClassroomPositionDescriptor] --
CREATE TABLE [edfi].[ClassroomPositionDescriptor] (
    [ClassroomPositionDescriptorId] [INT] NOT NULL,
    [ClassroomPositionTypeId] [INT] NULL,
    CONSTRAINT [ClassroomPositionDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ClassroomPositionDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ClassroomPositionType] --
CREATE TABLE [edfi].[ClassroomPositionType] (
    [ClassroomPositionTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ClassroomPositionType_PK] PRIMARY KEY CLUSTERED (
        [ClassroomPositionTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ClassroomPositionType] ADD CONSTRAINT [ClassroomPositionType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ClassroomPositionType] ADD CONSTRAINT [ClassroomPositionType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ClassroomPositionType] ADD CONSTRAINT [ClassroomPositionType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Cohort] --
CREATE TABLE [edfi].[Cohort] (
    [CohortIdentifier] [NVARCHAR](20) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CohortDescription] [NVARCHAR](1024) NULL,
    [CohortTypeId] [INT] NOT NULL,
    [CohortScopeTypeId] [INT] NULL,
    [AcademicSubjectDescriptorId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Cohort_PK] PRIMARY KEY CLUSTERED (
        [CohortIdentifier] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Cohort] ADD CONSTRAINT [Cohort_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Cohort] ADD CONSTRAINT [Cohort_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Cohort] ADD CONSTRAINT [Cohort_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CohortProgram] --
CREATE TABLE [edfi].[CohortProgram] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CohortIdentifier] [NVARCHAR](20) NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CohortProgram_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CohortIdentifier] ASC,
        [ProgramEducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CohortProgram] ADD CONSTRAINT [CohortProgram_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CohortScopeType] --
CREATE TABLE [edfi].[CohortScopeType] (
    [CohortScopeTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CohortScopeType_PK] PRIMARY KEY CLUSTERED (
        [CohortScopeTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CohortScopeType] ADD CONSTRAINT [CohortScopeType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CohortScopeType] ADD CONSTRAINT [CohortScopeType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CohortScopeType] ADD CONSTRAINT [CohortScopeType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CohortType] --
CREATE TABLE [edfi].[CohortType] (
    [CohortTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CohortType_PK] PRIMARY KEY CLUSTERED (
        [CohortTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CohortType] ADD CONSTRAINT [CohortType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CohortType] ADD CONSTRAINT [CohortType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CohortType] ADD CONSTRAINT [CohortType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CohortYearType] --
CREATE TABLE [edfi].[CohortYearType] (
    [CohortYearTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CohortYearType_PK] PRIMARY KEY CLUSTERED (
        [CohortYearTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CohortYearType] ADD CONSTRAINT [CohortYearType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CohortYearType] ADD CONSTRAINT [CohortYearType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CohortYearType] ADD CONSTRAINT [CohortYearType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CompetencyLevelDescriptor] --
CREATE TABLE [edfi].[CompetencyLevelDescriptor] (
    [CompetencyLevelDescriptorId] [INT] NOT NULL,
    [PerformanceBaseConversionTypeId] [INT] NULL,
    CONSTRAINT [CompetencyLevelDescriptor_PK] PRIMARY KEY CLUSTERED (
        [CompetencyLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[CompetencyObjective] --
CREATE TABLE [edfi].[CompetencyObjective] (
    [Objective] [NVARCHAR](60) NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CompetencyObjectiveId] [NVARCHAR](60) NULL,
    [Description] [NVARCHAR](1024) NULL,
    [SuccessCriteria] [NVARCHAR](150) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CompetencyObjective_PK] PRIMARY KEY CLUSTERED (
        [Objective] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CompetencyObjective] ADD CONSTRAINT [CompetencyObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CompetencyObjective] ADD CONSTRAINT [CompetencyObjective_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CompetencyObjective] ADD CONSTRAINT [CompetencyObjective_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ContentClassType] --
CREATE TABLE [edfi].[ContentClassType] (
    [ContentClassTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ContentClassType_PK] PRIMARY KEY CLUSTERED (
        [ContentClassTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ContentClassType] ADD CONSTRAINT [ContentClassType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ContentClassType] ADD CONSTRAINT [ContentClassType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ContentClassType] ADD CONSTRAINT [ContentClassType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ContinuationOfServicesReasonDescriptor] --
CREATE TABLE [edfi].[ContinuationOfServicesReasonDescriptor] (
    [ContinuationOfServicesReasonDescriptorId] [INT] NOT NULL,
    [ContinuationOfServicesReasonTypeId] [INT] NOT NULL,
    CONSTRAINT [ContinuationOfServicesReasonDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ContinuationOfServicesReasonDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ContinuationOfServicesReasonType] --
CREATE TABLE [edfi].[ContinuationOfServicesReasonType] (
    [ContinuationOfServicesReasonTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ContinuationOfServicesReasonType_PK] PRIMARY KEY CLUSTERED (
        [ContinuationOfServicesReasonTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ContinuationOfServicesReasonType] ADD CONSTRAINT [ContinuationOfServicesReasonType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ContinuationOfServicesReasonType] ADD CONSTRAINT [ContinuationOfServicesReasonType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ContinuationOfServicesReasonType] ADD CONSTRAINT [ContinuationOfServicesReasonType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ContractedStaff] --
CREATE TABLE [edfi].[ContractedStaff] (
    [StaffUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [AccountNumber] [NVARCHAR](50) NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [AsOfDate] [DATE] NOT NULL,
    [AmountToDate] [MONEY] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ContractedStaff_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [EducationOrganizationId] ASC,
        [AccountNumber] ASC,
        [FiscalYear] ASC,
        [AsOfDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ContractedStaff] ADD CONSTRAINT [ContractedStaff_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ContractedStaff] ADD CONSTRAINT [ContractedStaff_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ContractedStaff] ADD CONSTRAINT [ContractedStaff_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CostRateType] --
CREATE TABLE [edfi].[CostRateType] (
    [CostRateTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CostRateType_PK] PRIMARY KEY CLUSTERED (
        [CostRateTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CostRateType] ADD CONSTRAINT [CostRateType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CostRateType] ADD CONSTRAINT [CostRateType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CostRateType] ADD CONSTRAINT [CostRateType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CountryDescriptor] --
CREATE TABLE [edfi].[CountryDescriptor] (
    [CountryDescriptorId] [INT] NOT NULL,
    CONSTRAINT [CountryDescriptor_PK] PRIMARY KEY CLUSTERED (
        [CountryDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[Course] --
CREATE TABLE [edfi].[Course] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [CourseTitle] [NVARCHAR](60) NOT NULL,
    [NumberOfParts] [INT] NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NULL,
    [CourseDescription] [NVARCHAR](1024) NULL,
    [TimeRequiredForCompletion] [INT] NULL,
    [DateCourseAdopted] [DATE] NULL,
    [HighSchoolCourseRequirement] [BIT] NULL,
    [CourseGPAApplicabilityTypeId] [INT] NULL,
    [CourseDefinedByTypeId] [INT] NULL,
    [MinimumAvailableCredits] [DECIMAL](9, 2) NULL,
    [MinimumAvailableCreditTypeId] [INT] NULL,
    [MinimumAvailableCreditConversion] [DECIMAL](9, 2) NULL,
    [MaximumAvailableCredits] [DECIMAL](9, 2) NULL,
    [MaximumAvailableCreditTypeId] [INT] NULL,
    [MaximumAvailableCreditConversion] [DECIMAL](9, 2) NULL,
    [CareerPathwayTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Course_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CourseCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Course] ADD CONSTRAINT [Course_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Course] ADD CONSTRAINT [Course_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Course] ADD CONSTRAINT [Course_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseAttemptResultType] --
CREATE TABLE [edfi].[CourseAttemptResultType] (
    [CourseAttemptResultTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseAttemptResultType_PK] PRIMARY KEY CLUSTERED (
        [CourseAttemptResultTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseAttemptResultType] ADD CONSTRAINT [CourseAttemptResultType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseAttemptResultType] ADD CONSTRAINT [CourseAttemptResultType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseAttemptResultType] ADD CONSTRAINT [CourseAttemptResultType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseCompetencyLevel] --
CREATE TABLE [edfi].[CourseCompetencyLevel] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [CompetencyLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseCompetencyLevel_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CourseCode] ASC,
        [CompetencyLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseCompetencyLevel] ADD CONSTRAINT [CourseCompetencyLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CourseDefinedByType] --
CREATE TABLE [edfi].[CourseDefinedByType] (
    [CourseDefinedByTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseDefinedByType_PK] PRIMARY KEY CLUSTERED (
        [CourseDefinedByTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseDefinedByType] ADD CONSTRAINT [CourseDefinedByType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseDefinedByType] ADD CONSTRAINT [CourseDefinedByType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseDefinedByType] ADD CONSTRAINT [CourseDefinedByType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseGPAApplicabilityType] --
CREATE TABLE [edfi].[CourseGPAApplicabilityType] (
    [CourseGPAApplicabilityTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseGPAApplicabilityType_PK] PRIMARY KEY CLUSTERED (
        [CourseGPAApplicabilityTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseGPAApplicabilityType] ADD CONSTRAINT [CourseGPAApplicabilityType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseGPAApplicabilityType] ADD CONSTRAINT [CourseGPAApplicabilityType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseGPAApplicabilityType] ADD CONSTRAINT [CourseGPAApplicabilityType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseIdentificationCode] --
CREATE TABLE [edfi].[CourseIdentificationCode] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [CourseIdentificationSystemDescriptorId] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CourseCode] ASC,
        [CourseIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseIdentificationCode] ADD CONSTRAINT [CourseIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CourseIdentificationSystemDescriptor] --
CREATE TABLE [edfi].[CourseIdentificationSystemDescriptor] (
    [CourseIdentificationSystemDescriptorId] [INT] NOT NULL,
    [CourseIdentificationSystemTypeId] [INT] NULL,
    CONSTRAINT [CourseIdentificationSystemDescriptor_PK] PRIMARY KEY CLUSTERED (
        [CourseIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[CourseIdentificationSystemType] --
CREATE TABLE [edfi].[CourseIdentificationSystemType] (
    [CourseIdentificationSystemTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseIdentificationSystemType_PK] PRIMARY KEY CLUSTERED (
        [CourseIdentificationSystemTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseIdentificationSystemType] ADD CONSTRAINT [CourseIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseIdentificationSystemType] ADD CONSTRAINT [CourseIdentificationSystemType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseIdentificationSystemType] ADD CONSTRAINT [CourseIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseLearningObjective] --
CREATE TABLE [edfi].[CourseLearningObjective] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseLearningObjective_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CourseCode] ASC,
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseLearningObjective] ADD CONSTRAINT [CourseLearningObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CourseLearningStandard] --
CREATE TABLE [edfi].[CourseLearningStandard] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseLearningStandard_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CourseCode] ASC,
        [LearningStandardId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseLearningStandard] ADD CONSTRAINT [CourseLearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CourseLevelCharacteristic] --
CREATE TABLE [edfi].[CourseLevelCharacteristic] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [CourseLevelCharacteristicTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseLevelCharacteristic_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CourseCode] ASC,
        [CourseLevelCharacteristicTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseLevelCharacteristic] ADD CONSTRAINT [CourseLevelCharacteristic_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CourseLevelCharacteristicType] --
CREATE TABLE [edfi].[CourseLevelCharacteristicType] (
    [CourseLevelCharacteristicTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseLevelCharacteristicType_PK] PRIMARY KEY CLUSTERED (
        [CourseLevelCharacteristicTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseLevelCharacteristicType] ADD CONSTRAINT [CourseLevelCharacteristicType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseLevelCharacteristicType] ADD CONSTRAINT [CourseLevelCharacteristicType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseLevelCharacteristicType] ADD CONSTRAINT [CourseLevelCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseOfferedGradeLevel] --
CREATE TABLE [edfi].[CourseOfferedGradeLevel] (
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseOfferedGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [CourseCode] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseOfferedGradeLevel] ADD CONSTRAINT [CourseOfferedGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CourseOffering] --
CREATE TABLE [edfi].[CourseOffering] (
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [LocalCourseTitle] [NVARCHAR](60) NULL,
    [InstructionalTimePlanned] [INT] NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseOffering_PK] PRIMARY KEY CLUSTERED (
        [LocalCourseCode] ASC,
        [SchoolId] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseOffering] ADD CONSTRAINT [CourseOffering_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseOffering] ADD CONSTRAINT [CourseOffering_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseOffering] ADD CONSTRAINT [CourseOffering_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseOfferingCurriculumUsed] --
CREATE TABLE [edfi].[CourseOfferingCurriculumUsed] (
    [SchoolId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [CurriculumUsedTypeId] [INT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseOfferingCurriculumUsed_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [SchoolYear] ASC,
        [LocalCourseCode] ASC,
        [CurriculumUsedTypeId] ASC,
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] ADD CONSTRAINT [CourseOfferingCurriculumUsed_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CourseRepeatCodeType] --
CREATE TABLE [edfi].[CourseRepeatCodeType] (
    [CourseRepeatCodeTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseRepeatCodeType_PK] PRIMARY KEY CLUSTERED (
        [CourseRepeatCodeTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseRepeatCodeType] ADD CONSTRAINT [CourseRepeatCodeType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseRepeatCodeType] ADD CONSTRAINT [CourseRepeatCodeType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseRepeatCodeType] ADD CONSTRAINT [CourseRepeatCodeType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseTranscript] --
CREATE TABLE [edfi].[CourseTranscript] (
    [CourseAttemptResultTypeId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseEducationOrganizationId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [AttemptedCredits] [DECIMAL](9, 2) NULL,
    [AttemptedCreditTypeId] [INT] NULL,
    [AttemptedCreditConversion] [DECIMAL](9, 2) NULL,
    [EarnedCredits] [DECIMAL](9, 2) NOT NULL,
    [EarnedCreditTypeId] [INT] NULL,
    [EarnedCreditConversion] [DECIMAL](9, 2) NULL,
    [WhenTakenGradeLevelDescriptorId] [INT] NULL,
    [MethodCreditEarnedTypeId] [INT] NULL,
    [FinalLetterGradeEarned] [NVARCHAR](20) NULL,
    [FinalNumericGradeEarned] [DECIMAL](9, 2) NULL,
    [CourseRepeatCodeTypeId] [INT] NULL,
    [SchoolId] [INT] NULL,
    [CourseTitle] [NVARCHAR](60) NULL,
    [AlternativeCourseTitle] [NVARCHAR](60) NULL,
    [AlternativeCourseCode] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CourseTranscript_PK] PRIMARY KEY CLUSTERED (
        [CourseAttemptResultTypeId] ASC,
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [CourseEducationOrganizationId] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [CourseCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [CourseTranscript_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [CourseTranscript_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CourseTranscript] ADD CONSTRAINT [CourseTranscript_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CourseTranscriptEarnedAdditionalCredits] --
CREATE TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] (
    [AdditionalCreditTypeId] [INT] NOT NULL,
    [CourseAttemptResultTypeId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CourseEducationOrganizationId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [Credits] [DECIMAL](9, 2) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [CourseTranscriptEarnedAdditionalCredits_PK] PRIMARY KEY CLUSTERED (
        [AdditionalCreditTypeId] ASC,
        [CourseAttemptResultTypeId] ASC,
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [CourseEducationOrganizationId] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [CourseCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] ADD CONSTRAINT [CourseTranscriptEarnedAdditionalCredits_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[CredentialFieldDescriptor] --
CREATE TABLE [edfi].[CredentialFieldDescriptor] (
    [CredentialFieldDescriptorId] [INT] NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NULL,
    CONSTRAINT [CredentialFieldDescriptor_PK] PRIMARY KEY CLUSTERED (
        [CredentialFieldDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[CredentialType] --
CREATE TABLE [edfi].[CredentialType] (
    [CredentialTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CredentialType_PK] PRIMARY KEY CLUSTERED (
        [CredentialTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CredentialType] ADD CONSTRAINT [CredentialType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CredentialType] ADD CONSTRAINT [CredentialType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CredentialType] ADD CONSTRAINT [CredentialType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CreditType] --
CREATE TABLE [edfi].[CreditType] (
    [CreditTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CreditType_PK] PRIMARY KEY CLUSTERED (
        [CreditTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CreditType] ADD CONSTRAINT [CreditType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CreditType] ADD CONSTRAINT [CreditType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CreditType] ADD CONSTRAINT [CreditType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[CurriculumUsedType] --
CREATE TABLE [edfi].[CurriculumUsedType] (
    [CurriculumUsedTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [CurriculumUsedType_PK] PRIMARY KEY CLUSTERED (
        [CurriculumUsedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[CurriculumUsedType] ADD CONSTRAINT [CurriculumUsedType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[CurriculumUsedType] ADD CONSTRAINT [CurriculumUsedType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[CurriculumUsedType] ADD CONSTRAINT [CurriculumUsedType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DeliveryMethodType] --
CREATE TABLE [edfi].[DeliveryMethodType] (
    [DeliveryMethodTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DeliveryMethodType_PK] PRIMARY KEY CLUSTERED (
        [DeliveryMethodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DeliveryMethodType] ADD CONSTRAINT [DeliveryMethodType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DeliveryMethodType] ADD CONSTRAINT [DeliveryMethodType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DeliveryMethodType] ADD CONSTRAINT [DeliveryMethodType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Descriptor] --
CREATE TABLE [edfi].[Descriptor] (
    [DescriptorId] [INT] IDENTITY(1,1) NOT NULL,
    [Namespace] [NVARCHAR](255) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [ShortDescription] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NULL,
    [PriorDescriptorId] [INT] NULL,
    [EffectiveBeginDate] [DATE] NULL,
    [EffectiveEndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Descriptor_PK] PRIMARY KEY CLUSTERED (
        [DescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
    CONSTRAINT [Descriptor_AK] UNIQUE NONCLUSTERED (
        [CodeValue] ASC,
        [Namespace] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Descriptor] ADD CONSTRAINT [Descriptor_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Descriptor] ADD CONSTRAINT [Descriptor_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Descriptor] ADD CONSTRAINT [Descriptor_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DiagnosisDescriptor] --
CREATE TABLE [edfi].[DiagnosisDescriptor] (
    [DiagnosisDescriptorId] [INT] NOT NULL,
    [DiagnosisTypeId] [INT] NULL,
    CONSTRAINT [DiagnosisDescriptor_PK] PRIMARY KEY CLUSTERED (
        [DiagnosisDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[DiagnosisType] --
CREATE TABLE [edfi].[DiagnosisType] (
    [DiagnosisTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DiagnosisType_PK] PRIMARY KEY CLUSTERED (
        [DiagnosisTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DiagnosisType] ADD CONSTRAINT [DiagnosisType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DiagnosisType] ADD CONSTRAINT [DiagnosisType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DiagnosisType] ADD CONSTRAINT [DiagnosisType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DiplomaLevelType] --
CREATE TABLE [edfi].[DiplomaLevelType] (
    [DiplomaLevelTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DiplomaLevelType_PK] PRIMARY KEY CLUSTERED (
        [DiplomaLevelTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DiplomaLevelType] ADD CONSTRAINT [DiplomaLevelType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DiplomaLevelType] ADD CONSTRAINT [DiplomaLevelType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DiplomaLevelType] ADD CONSTRAINT [DiplomaLevelType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DiplomaType] --
CREATE TABLE [edfi].[DiplomaType] (
    [DiplomaTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DiplomaType_PK] PRIMARY KEY CLUSTERED (
        [DiplomaTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DiplomaType] ADD CONSTRAINT [DiplomaType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DiplomaType] ADD CONSTRAINT [DiplomaType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DiplomaType] ADD CONSTRAINT [DiplomaType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DisabilityCategoryType] --
CREATE TABLE [edfi].[DisabilityCategoryType] (
    [DisabilityCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DisabilityCategoryType_PK] PRIMARY KEY CLUSTERED (
        [DisabilityCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisabilityCategoryType] ADD CONSTRAINT [DisabilityCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DisabilityCategoryType] ADD CONSTRAINT [DisabilityCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DisabilityCategoryType] ADD CONSTRAINT [DisabilityCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DisabilityDescriptor] --
CREATE TABLE [edfi].[DisabilityDescriptor] (
    [DisabilityDescriptorId] [INT] NOT NULL,
    [DisabilityTypeId] [INT] NULL,
    [DisabilityCategoryTypeId] [INT] NOT NULL,
    CONSTRAINT [DisabilityDescriptor_PK] PRIMARY KEY CLUSTERED (
        [DisabilityDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[DisabilityDeterminationSourceType] --
CREATE TABLE [edfi].[DisabilityDeterminationSourceType] (
    [DisabilityDeterminationSourceTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DisabilityDeterminationSourceType_PK] PRIMARY KEY CLUSTERED (
        [DisabilityDeterminationSourceTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisabilityDeterminationSourceType] ADD CONSTRAINT [DisabilityDeterminationSourceType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DisabilityDeterminationSourceType] ADD CONSTRAINT [DisabilityDeterminationSourceType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DisabilityDeterminationSourceType] ADD CONSTRAINT [DisabilityDeterminationSourceType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DisabilityType] --
CREATE TABLE [edfi].[DisabilityType] (
    [DisabilityTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DisabilityType_PK] PRIMARY KEY CLUSTERED (
        [DisabilityTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisabilityType] ADD CONSTRAINT [DisabilityType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DisabilityType] ADD CONSTRAINT [DisabilityType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DisabilityType] ADD CONSTRAINT [DisabilityType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DisciplineAction] --
CREATE TABLE [edfi].[DisciplineAction] (
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [DisciplineDate] [DATE] NOT NULL,
    [DisciplineActionLength] [INT] NULL,
    [ActualDisciplineActionLength] [INT] NULL,
    [DisciplineActionLengthDifferenceReasonTypeId] [INT] NULL,
    [RelatedToZeroTolerancePolicy] [BIT] NULL,
    [ResponsibilitySchoolId] [INT] NOT NULL,
    [AssignmentSchoolId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DisciplineAction_PK] PRIMARY KEY CLUSTERED (
        [DisciplineActionIdentifier] ASC,
        [StudentUSI] ASC,
        [DisciplineDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineAction] ADD CONSTRAINT [DisciplineAction_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DisciplineAction] ADD CONSTRAINT [DisciplineAction_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DisciplineAction] ADD CONSTRAINT [DisciplineAction_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DisciplineActionDiscipline] --
CREATE TABLE [edfi].[DisciplineActionDiscipline] (
    [StudentUSI] [INT] NOT NULL,
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL,
    [DisciplineDate] [DATE] NOT NULL,
    [DisciplineDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [DisciplineActionDiscipline_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [DisciplineActionIdentifier] ASC,
        [DisciplineDate] ASC,
        [DisciplineDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineActionDiscipline] ADD CONSTRAINT [DisciplineActionDiscipline_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[DisciplineActionDisciplineIncident] --
CREATE TABLE [edfi].[DisciplineActionDisciplineIncident] (
    [StudentUSI] [INT] NOT NULL,
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL,
    [DisciplineDate] [DATE] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [DisciplineActionDisciplineIncident_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [DisciplineActionIdentifier] ASC,
        [DisciplineDate] ASC,
        [SchoolId] ASC,
        [IncidentIdentifier] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineActionDisciplineIncident] ADD CONSTRAINT [DisciplineActionDisciplineIncident_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[DisciplineActionLengthDifferenceReasonType] --
CREATE TABLE [edfi].[DisciplineActionLengthDifferenceReasonType] (
    [DisciplineActionLengthDifferenceReasonTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DisciplineActionLengthDifferenceReasonType_PK] PRIMARY KEY CLUSTERED (
        [DisciplineActionLengthDifferenceReasonTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineActionLengthDifferenceReasonType] ADD CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DisciplineActionLengthDifferenceReasonType] ADD CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DisciplineActionLengthDifferenceReasonType] ADD CONSTRAINT [DisciplineActionLengthDifferenceReasonType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DisciplineActionStaff] --
CREATE TABLE [edfi].[DisciplineActionStaff] (
    [StudentUSI] [INT] NOT NULL,
    [DisciplineActionIdentifier] [NVARCHAR](20) NOT NULL,
    [DisciplineDate] [DATE] NOT NULL,
    [StaffUSI] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [DisciplineActionStaff_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [DisciplineActionIdentifier] ASC,
        [DisciplineDate] ASC,
        [StaffUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineActionStaff] ADD CONSTRAINT [DisciplineActionStaff_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[DisciplineDescriptor] --
CREATE TABLE [edfi].[DisciplineDescriptor] (
    [DisciplineDescriptorId] [INT] NOT NULL,
    [DisciplineTypeId] [INT] NULL,
    CONSTRAINT [DisciplineDescriptor_PK] PRIMARY KEY CLUSTERED (
        [DisciplineDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[DisciplineIncident] --
CREATE TABLE [edfi].[DisciplineIncident] (
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [IncidentDate] [DATE] NOT NULL,
    [IncidentTime] [TIME](7) NULL,
    [IncidentLocationTypeId] [INT] NULL,
    [IncidentDescription] [NVARCHAR](1024) NULL,
    [ReporterDescriptionDescriptorId] [INT] NULL,
    [ReporterName] [NVARCHAR](75) NULL,
    [ReportedToLawEnforcement] [BIT] NULL,
    [CaseNumber] [NVARCHAR](20) NULL,
    [IncidentCost] [MONEY] NULL,
    [StaffUSI] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DisciplineIncident_PK] PRIMARY KEY CLUSTERED (
        [IncidentIdentifier] ASC,
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineIncident] ADD CONSTRAINT [DisciplineIncident_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DisciplineIncident] ADD CONSTRAINT [DisciplineIncident_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DisciplineIncident] ADD CONSTRAINT [DisciplineIncident_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[DisciplineIncidentBehavior] --
CREATE TABLE [edfi].[DisciplineIncidentBehavior] (
    [SchoolId] [INT] NOT NULL,
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL,
    [BehaviorDescriptorId] [INT] NOT NULL,
    [BehaviorDetailedDescription] [NVARCHAR](1024) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [DisciplineIncidentBehavior_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [IncidentIdentifier] ASC,
        [BehaviorDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineIncidentBehavior] ADD CONSTRAINT [DisciplineIncidentBehavior_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[DisciplineIncidentWeapon] --
CREATE TABLE [edfi].[DisciplineIncidentWeapon] (
    [SchoolId] [INT] NOT NULL,
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL,
    [WeaponDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [DisciplineIncidentWeapon_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [IncidentIdentifier] ASC,
        [WeaponDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineIncidentWeapon] ADD CONSTRAINT [DisciplineIncidentWeapon_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[DisciplineType] --
CREATE TABLE [edfi].[DisciplineType] (
    [DisciplineTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [DisciplineType_PK] PRIMARY KEY CLUSTERED (
        [DisciplineTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[DisciplineType] ADD CONSTRAINT [DisciplineType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[DisciplineType] ADD CONSTRAINT [DisciplineType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[DisciplineType] ADD CONSTRAINT [DisciplineType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationalEnvironmentType] --
CREATE TABLE [edfi].[EducationalEnvironmentType] (
    [EducationalEnvironmentTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationalEnvironmentType_PK] PRIMARY KEY CLUSTERED (
        [EducationalEnvironmentTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationalEnvironmentType] ADD CONSTRAINT [EducationalEnvironmentType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationalEnvironmentType] ADD CONSTRAINT [EducationalEnvironmentType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationalEnvironmentType] ADD CONSTRAINT [EducationalEnvironmentType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationContent] --
CREATE TABLE [edfi].[EducationContent] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [LearningResourceMetadataURI] [NVARCHAR](255) NULL,
    [ShortDescription] [NVARCHAR](75) NULL,
    [Description] [NVARCHAR](1024) NULL,
    [AdditionalAuthorsIndicator] [BIT] NULL,
    [Publisher] [NVARCHAR](50) NULL,
    [TimeRequired] [NVARCHAR](30) NULL,
    [InteractivityStyleTypeId] [INT] NULL,
    [ContentClassTypeId] [INT] NULL,
    [UseRightsURL] [NVARCHAR](255) NULL,
    [PublicationDate] [DATE] NULL,
    [PublicationYear] [SMALLINT] NULL,
    [Version] [NVARCHAR](10) NULL,
    [LearningStandardId] [NVARCHAR](60) NULL,
    [Cost] [MONEY] NULL,
    [CostRateTypeId] [INT] NULL,
    [Namespace] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationContent_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContent] ADD CONSTRAINT [EducationContent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationContent] ADD CONSTRAINT [EducationContent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationContent] ADD CONSTRAINT [EducationContent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationContentAppropriateGradeLevel] --
CREATE TABLE [edfi].[EducationContentAppropriateGradeLevel] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationContentAppropriateGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] ADD CONSTRAINT [EducationContentAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationContentAppropriateSex] --
CREATE TABLE [edfi].[EducationContentAppropriateSex] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [SexTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationContentAppropriateSex_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC,
        [SexTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContentAppropriateSex] ADD CONSTRAINT [EducationContentAppropriateSex_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationContentAuthor] --
CREATE TABLE [edfi].[EducationContentAuthor] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [Author] [NVARCHAR](225) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationContentAuthor_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC,
        [Author] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContentAuthor] ADD CONSTRAINT [EducationContentAuthor_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationContentDerivativeSourceEducationContent] --
CREATE TABLE [edfi].[EducationContentDerivativeSourceEducationContent] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [DerivativeSourceContentIdentifier] [NVARCHAR](225) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationContentDerivativeSourceEducationContent_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC,
        [DerivativeSourceContentIdentifier] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] ADD CONSTRAINT [EducationContentDerivativeSourceEducationContent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] --
CREATE TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [LearningResourceMetadataURI] [NVARCHAR](225) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationContentDerivativeSourceLearningResourceMetadataURI_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC,
        [LearningResourceMetadataURI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] ADD CONSTRAINT [EducationContentDerivativeSourceLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationContentDerivativeSourceURI] --
CREATE TABLE [edfi].[EducationContentDerivativeSourceURI] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [URI] [NVARCHAR](225) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationContentDerivativeSourceURI_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC,
        [URI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContentDerivativeSourceURI] ADD CONSTRAINT [EducationContentDerivativeSourceURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationContentLanguage] --
CREATE TABLE [edfi].[EducationContentLanguage] (
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [LanguageDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationContentLanguage_PK] PRIMARY KEY CLUSTERED (
        [ContentIdentifier] ASC,
        [LanguageDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationContentLanguage] ADD CONSTRAINT [EducationContentLanguage_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationOrganization] --
CREATE TABLE [edfi].[EducationOrganization] (
    [EducationOrganizationId] [INT] NOT NULL,
    [StateOrganizationId] [NVARCHAR](60) NOT NULL,
    [NameOfInstitution] [NVARCHAR](75) NOT NULL,
    [ShortNameOfInstitution] [NVARCHAR](75) NULL,
    [WebSite] [NVARCHAR](255) NULL,
    [OperationalStatusTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationOrganization_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganization] ADD CONSTRAINT [EducationOrganization_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationOrganization] ADD CONSTRAINT [EducationOrganization_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationOrganization] ADD CONSTRAINT [EducationOrganization_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationOrganizationAddress] --
CREATE TABLE [edfi].[EducationOrganizationAddress] (
    [EducationOrganizationId] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [StreetNumberName] [NVARCHAR](150) NOT NULL,
    [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
    [BuildingSiteNumber] [NVARCHAR](20) NULL,
    [City] [NVARCHAR](30) NOT NULL,
    [StateAbbreviationTypeId] [INT] NOT NULL,
    [PostalCode] [NVARCHAR](17) NOT NULL,
    [NameOfCounty] [NVARCHAR](30) NULL,
    [CountyFIPSCode] [NVARCHAR](5) NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationOrganizationAddress_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationAddress] ADD CONSTRAINT [EducationOrganizationAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationOrganizationCategory] --
CREATE TABLE [edfi].[EducationOrganizationCategory] (
    [EducationOrganizationId] [INT] NOT NULL,
    [EducationOrganizationCategoryTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationOrganizationCategory_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [EducationOrganizationCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationCategory] ADD CONSTRAINT [EducationOrganizationCategory_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationOrganizationCategoryType] --
CREATE TABLE [edfi].[EducationOrganizationCategoryType] (
    [EducationOrganizationCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](75) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationOrganizationCategoryType_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationCategoryType] ADD CONSTRAINT [EducationOrganizationCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationOrganizationCategoryType] ADD CONSTRAINT [EducationOrganizationCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationOrganizationCategoryType] ADD CONSTRAINT [EducationOrganizationCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationOrganizationIdentificationCode] --
CREATE TABLE [edfi].[EducationOrganizationIdentificationCode] (
    [EducationOrganizationId] [INT] NOT NULL,
    [EducationOrganizationIdentificationSystemDescriptorId] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationOrganizationIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [EducationOrganizationIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] ADD CONSTRAINT [EducationOrganizationIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationOrganizationIdentificationSystemDescriptor] --
CREATE TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] (
    [EducationOrganizationIdentificationSystemDescriptorId] [INT] NOT NULL,
    [EducationOrganizationIdentificationSystemTypeId] [INT] NULL,
    CONSTRAINT [EducationOrganizationIdentificationSystemDescriptor_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[EducationOrganizationIdentificationSystemType] --
CREATE TABLE [edfi].[EducationOrganizationIdentificationSystemType] (
    [EducationOrganizationIdentificationSystemTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationOrganizationIdentificationSystemType_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationIdentificationSystemTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemType] ADD CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemType] ADD CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemType] ADD CONSTRAINT [EducationOrganizationIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationOrganizationInstitutionTelephone] --
CREATE TABLE [edfi].[EducationOrganizationInstitutionTelephone] (
    [EducationOrganizationId] [INT] NOT NULL,
    [InstitutionTelephoneNumberTypeId] [INT] NOT NULL,
    [TelephoneNumber] [NVARCHAR](24) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationOrganizationInstitutionTelephone_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [InstitutionTelephoneNumberTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] ADD CONSTRAINT [EducationOrganizationInstitutionTelephone_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationOrganizationInternationalAddress] --
CREATE TABLE [edfi].[EducationOrganizationInternationalAddress] (
    [EducationOrganizationId] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [AddressLine1] [NVARCHAR](150) NOT NULL,
    [AddressLine2] [NVARCHAR](150) NULL,
    [AddressLine3] [NVARCHAR](150) NULL,
    [AddressLine4] [NVARCHAR](150) NULL,
    [CountryDescriptorId] [INT] NOT NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [EducationOrganizationInternationalAddress_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] ADD CONSTRAINT [EducationOrganizationInternationalAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[EducationOrganizationInterventionPrescriptionAssociation] --
CREATE TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] (
    [EducationOrganizationId] [INT] NOT NULL,
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [InterventionPrescriptionIdentificationCode] ASC,
        [InterventionPrescriptionEducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] ADD CONSTRAINT [EducationOrganizationInterventionPrescriptionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationOrganizationNetwork] --
CREATE TABLE [edfi].[EducationOrganizationNetwork] (
    [EducationOrganizationNetworkId] [INT] NOT NULL,
    [NetworkPurposeTypeId] [INT] NOT NULL,
    CONSTRAINT [EducationOrganizationNetwork_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationNetworkId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[EducationOrganizationNetworkAssociation] --
CREATE TABLE [edfi].[EducationOrganizationNetworkAssociation] (
    [MemberEducationOrganizationId] [INT] NOT NULL,
    [EducationOrganizationNetworkId] [INT] NOT NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationOrganizationNetworkAssociation_PK] PRIMARY KEY CLUSTERED (
        [MemberEducationOrganizationId] ASC,
        [EducationOrganizationNetworkId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [EducationOrganizationNetworkAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [EducationOrganizationNetworkAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] ADD CONSTRAINT [EducationOrganizationNetworkAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationOrganizationPeerAssociation] --
CREATE TABLE [edfi].[EducationOrganizationPeerAssociation] (
    [EducationOrganizationId] [INT] NOT NULL,
    [PeerEducationOrganizationId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationOrganizationPeerAssociation_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [PeerEducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [EducationOrganizationPeerAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [EducationOrganizationPeerAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] ADD CONSTRAINT [EducationOrganizationPeerAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationPlanType] --
CREATE TABLE [edfi].[EducationPlanType] (
    [EducationPlanTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EducationPlanType_PK] PRIMARY KEY CLUSTERED (
        [EducationPlanTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EducationPlanType] ADD CONSTRAINT [EducationPlanType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EducationPlanType] ADD CONSTRAINT [EducationPlanType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EducationPlanType] ADD CONSTRAINT [EducationPlanType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EducationServiceCenter] --
CREATE TABLE [edfi].[EducationServiceCenter] (
    [EducationServiceCenterId] [INT] NOT NULL,
    [StateEducationAgencyId] [INT] NULL,
    CONSTRAINT [EducationServiceCenter_PK] PRIMARY KEY CLUSTERED (
        [EducationServiceCenterId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ElectronicMailType] --
CREATE TABLE [edfi].[ElectronicMailType] (
    [ElectronicMailTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ElectronicMailType_PK] PRIMARY KEY CLUSTERED (
        [ElectronicMailTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ElectronicMailType] ADD CONSTRAINT [ElectronicMailType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ElectronicMailType] ADD CONSTRAINT [ElectronicMailType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ElectronicMailType] ADD CONSTRAINT [ElectronicMailType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EmploymentStatusDescriptor] --
CREATE TABLE [edfi].[EmploymentStatusDescriptor] (
    [EmploymentStatusDescriptorId] [INT] NOT NULL,
    [EmploymentStatusTypeId] [INT] NOT NULL,
    CONSTRAINT [EmploymentStatusDescriptor_PK] PRIMARY KEY CLUSTERED (
        [EmploymentStatusDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[EmploymentStatusType] --
CREATE TABLE [edfi].[EmploymentStatusType] (
    [EmploymentStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EmploymentStatusType_PK] PRIMARY KEY CLUSTERED (
        [EmploymentStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EmploymentStatusType] ADD CONSTRAINT [EmploymentStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EmploymentStatusType] ADD CONSTRAINT [EmploymentStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EmploymentStatusType] ADD CONSTRAINT [EmploymentStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EntryGradeLevelReasonType] --
CREATE TABLE [edfi].[EntryGradeLevelReasonType] (
    [EntryGradeLevelReasonTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EntryGradeLevelReasonType_PK] PRIMARY KEY CLUSTERED (
        [EntryGradeLevelReasonTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EntryGradeLevelReasonType] ADD CONSTRAINT [EntryGradeLevelReasonType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EntryGradeLevelReasonType] ADD CONSTRAINT [EntryGradeLevelReasonType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EntryGradeLevelReasonType] ADD CONSTRAINT [EntryGradeLevelReasonType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EntryType] --
CREATE TABLE [edfi].[EntryType] (
    [EntryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EntryType_PK] PRIMARY KEY CLUSTERED (
        [EntryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EntryType] ADD CONSTRAINT [EntryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EntryType] ADD CONSTRAINT [EntryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EntryType] ADD CONSTRAINT [EntryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[EntryTypeDescriptor] --
CREATE TABLE [edfi].[EntryTypeDescriptor] (
    [EntryTypeDescriptorId] [INT] NOT NULL,
    [EntryTypeId] [INT] NULL,
    CONSTRAINT [EntryTypeDescriptor_PK] PRIMARY KEY CLUSTERED (
        [EntryTypeDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[EventCircumstanceType] --
CREATE TABLE [edfi].[EventCircumstanceType] (
    [EventCircumstanceTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [EventCircumstanceType_PK] PRIMARY KEY CLUSTERED (
        [EventCircumstanceTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[EventCircumstanceType] ADD CONSTRAINT [EventCircumstanceType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[EventCircumstanceType] ADD CONSTRAINT [EventCircumstanceType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[EventCircumstanceType] ADD CONSTRAINT [EventCircumstanceType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ExitWithdrawType] --
CREATE TABLE [edfi].[ExitWithdrawType] (
    [ExitWithdrawTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ExitWithdrawType_PK] PRIMARY KEY CLUSTERED (
        [ExitWithdrawTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ExitWithdrawType] ADD CONSTRAINT [ExitWithdrawType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ExitWithdrawType] ADD CONSTRAINT [ExitWithdrawType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ExitWithdrawType] ADD CONSTRAINT [ExitWithdrawType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ExitWithdrawTypeDescriptor] --
CREATE TABLE [edfi].[ExitWithdrawTypeDescriptor] (
    [ExitWithdrawTypeDescriptorId] [INT] NOT NULL,
    [ExitWithdrawTypeId] [INT] NULL,
    CONSTRAINT [ExitWithdrawTypeDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ExitWithdrawTypeDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[FeederSchoolAssociation] --
CREATE TABLE [edfi].[FeederSchoolAssociation] (
    [FeederSchoolId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NULL,
    [FeederRelationshipDescription] [NVARCHAR](1024) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [FeederSchoolAssociation_PK] PRIMARY KEY CLUSTERED (
        [FeederSchoolId] ASC,
        [SchoolId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FeederSchoolAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FeederSchoolAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[FeederSchoolAssociation] ADD CONSTRAINT [FeederSchoolAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Grade] --
CREATE TABLE [edfi].[Grade] (
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [GradeTypeId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [LetterGradeEarned] [NVARCHAR](20) NULL,
    [NumericGradeEarned] [DECIMAL](9, 2) NULL,
    [DiagnosticStatement] [NVARCHAR](1024) NULL,
    [PerformanceBaseConversionTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Grade_PK] PRIMARY KEY CLUSTERED (
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC,
        [GradeTypeId] ASC,
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [LocalCourseCode] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Grade] ADD CONSTRAINT [Grade_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Grade] ADD CONSTRAINT [Grade_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Grade] ADD CONSTRAINT [Grade_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GradebookEntry] --
CREATE TABLE [edfi].[GradebookEntry] (
    [GradebookEntryTitle] [NVARCHAR](60) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [DateAssigned] [DATE] NOT NULL,
    [GradebookEntryTypeId] [INT] NULL,
    [Description] [NVARCHAR](1024) NULL,
    [GradingPeriodDescriptorId] [INT] NULL,
    [BeginDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GradebookEntry_PK] PRIMARY KEY CLUSTERED (
        [GradebookEntryTitle] ASC,
        [ClassroomIdentificationCode] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [LocalCourseCode] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [DateAssigned] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradebookEntry] ADD CONSTRAINT [GradebookEntry_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GradebookEntry] ADD CONSTRAINT [GradebookEntry_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GradebookEntry] ADD CONSTRAINT [GradebookEntry_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GradebookEntryLearningObjective] --
CREATE TABLE [edfi].[GradebookEntryLearningObjective] (
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [GradebookEntryTitle] [NVARCHAR](60) NOT NULL,
    [DateAssigned] [DATE] NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GradebookEntryLearningObjective_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [GradebookEntryTitle] ASC,
        [DateAssigned] ASC,
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [SchoolYear] ASC,
        [LocalCourseCode] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradebookEntryLearningObjective] ADD CONSTRAINT [GradebookEntryLearningObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GradebookEntryLearningStandard] --
CREATE TABLE [edfi].[GradebookEntryLearningStandard] (
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [GradebookEntryTitle] [NVARCHAR](60) NOT NULL,
    [DateAssigned] [DATE] NOT NULL,
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GradebookEntryLearningStandard_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [GradebookEntryTitle] ASC,
        [DateAssigned] ASC,
        [LearningStandardId] ASC,
        [SchoolYear] ASC,
        [LocalCourseCode] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradebookEntryLearningStandard] ADD CONSTRAINT [GradebookEntryLearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GradebookEntryType] --
CREATE TABLE [edfi].[GradebookEntryType] (
    [GradebookEntryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GradebookEntryType_PK] PRIMARY KEY CLUSTERED (
        [GradebookEntryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradebookEntryType] ADD CONSTRAINT [GradebookEntryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GradebookEntryType] ADD CONSTRAINT [GradebookEntryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GradebookEntryType] ADD CONSTRAINT [GradebookEntryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GradeLevelDescriptor] --
CREATE TABLE [edfi].[GradeLevelDescriptor] (
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [GradeLevelTypeId] [INT] NOT NULL,
    CONSTRAINT [GradeLevelDescriptor_PK] PRIMARY KEY CLUSTERED (
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[GradeLevelType] --
CREATE TABLE [edfi].[GradeLevelType] (
    [GradeLevelTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GradeLevelType_PK] PRIMARY KEY CLUSTERED (
        [GradeLevelTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradeLevelType] ADD CONSTRAINT [GradeLevelType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GradeLevelType] ADD CONSTRAINT [GradeLevelType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GradeLevelType] ADD CONSTRAINT [GradeLevelType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GradeType] --
CREATE TABLE [edfi].[GradeType] (
    [GradeTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GradeType_PK] PRIMARY KEY CLUSTERED (
        [GradeTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradeType] ADD CONSTRAINT [GradeType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GradeType] ADD CONSTRAINT [GradeType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GradeType] ADD CONSTRAINT [GradeType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GradingPeriod] --
CREATE TABLE [edfi].[GradingPeriod] (
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NOT NULL,
    [TotalInstructionalDays] [INT] NOT NULL,
    [PeriodSequence] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GradingPeriod_PK] PRIMARY KEY CLUSTERED (
        [GradingPeriodDescriptorId] ASC,
        [SchoolId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradingPeriod] ADD CONSTRAINT [GradingPeriod_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GradingPeriod] ADD CONSTRAINT [GradingPeriod_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GradingPeriod] ADD CONSTRAINT [GradingPeriod_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GradingPeriodDescriptor] --
CREATE TABLE [edfi].[GradingPeriodDescriptor] (
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodTypeId] [INT] NOT NULL,
    CONSTRAINT [GradingPeriodDescriptor_PK] PRIMARY KEY CLUSTERED (
        [GradingPeriodDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[GradingPeriodType] --
CREATE TABLE [edfi].[GradingPeriodType] (
    [GradingPeriodTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [PeriodSequence] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GradingPeriodType_PK] PRIMARY KEY CLUSTERED (
        [GradingPeriodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GradingPeriodType] ADD CONSTRAINT [GradingPeriodType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GradingPeriodType] ADD CONSTRAINT [GradingPeriodType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GradingPeriodType] ADD CONSTRAINT [GradingPeriodType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GraduationPlan] --
CREATE TABLE [edfi].[GraduationPlan] (
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GraduationSchoolYear] [SMALLINT] NOT NULL,
    [IndividualPlan] [BIT] NULL,
    [TotalRequiredCredits] [DECIMAL](9, 2) NOT NULL,
    [TotalRequiredCreditTypeId] [INT] NULL,
    [TotalRequiredCreditConversion] [DECIMAL](9, 2) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GraduationPlan_PK] PRIMARY KEY CLUSTERED (
        [GraduationPlanTypeDescriptorId] ASC,
        [EducationOrganizationId] ASC,
        [GraduationSchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlan] ADD CONSTRAINT [GraduationPlan_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GraduationPlan] ADD CONSTRAINT [GraduationPlan_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GraduationPlan] ADD CONSTRAINT [GraduationPlan_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GraduationPlanCreditsByCourse] --
CREATE TABLE [edfi].[GraduationPlanCreditsByCourse] (
    [EducationOrganizationId] [INT] NOT NULL,
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [GraduationSchoolYear] [SMALLINT] NOT NULL,
    [CourseSetName] [NVARCHAR](120) NOT NULL,
    [Credits] [DECIMAL](9, 2) NOT NULL,
    [CreditTypeId] [INT] NULL,
    [CreditConversion] [DECIMAL](9, 2) NULL,
    [WhenTakenGradeLevelDescriptorId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GraduationPlanCreditsByCourse_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [GraduationPlanTypeDescriptorId] ASC,
        [GraduationSchoolYear] ASC,
        [CourseSetName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] ADD CONSTRAINT [GraduationPlanCreditsByCourse_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GraduationPlanCreditsByCourseCourse] --
CREATE TABLE [edfi].[GraduationPlanCreditsByCourseCourse] (
    [EducationOrganizationId] [INT] NOT NULL,
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [GraduationSchoolYear] [SMALLINT] NOT NULL,
    [CourseSetName] [NVARCHAR](120) NOT NULL,
    [CourseEducationOrganizationId] [INT] NOT NULL,
    [CourseCode] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GraduationPlanCreditsByCourseCourse_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [GraduationPlanTypeDescriptorId] ASC,
        [GraduationSchoolYear] ASC,
        [CourseSetName] ASC,
        [CourseEducationOrganizationId] ASC,
        [CourseCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] ADD CONSTRAINT [GraduationPlanCreditsByCourseCourse_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GraduationPlanCreditsBySubject] --
CREATE TABLE [edfi].[GraduationPlanCreditsBySubject] (
    [EducationOrganizationId] [INT] NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [GraduationSchoolYear] [SMALLINT] NOT NULL,
    [Credits] [DECIMAL](9, 2) NOT NULL,
    [CreditTypeId] [INT] NULL,
    [CreditConversion] [DECIMAL](9, 2) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GraduationPlanCreditsBySubject_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [GraduationPlanTypeDescriptorId] ASC,
        [GraduationSchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] ADD CONSTRAINT [GraduationPlanCreditsBySubject_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GraduationPlanRequiredAssessment] --
CREATE TABLE [edfi].[GraduationPlanRequiredAssessment] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [GraduationSchoolYear] [SMALLINT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GraduationPlanRequiredAssessment_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [EducationOrganizationId] ASC,
        [GraduationPlanTypeDescriptorId] ASC,
        [GraduationSchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] ADD CONSTRAINT [GraduationPlanRequiredAssessment_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] --
CREATE TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [GraduationSchoolYear] [SMALLINT] NOT NULL,
    [PerformanceLevelDescriptorId] [INT] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [MinimumScore] [NVARCHAR](35) NULL,
    [MaximumScore] [NVARCHAR](35) NULL,
    [ResultDatatypeTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [EducationOrganizationId] ASC,
        [GraduationPlanTypeDescriptorId] ASC,
        [GraduationSchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ADD CONSTRAINT [GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GraduationPlanRequiredAssessmentScore] --
CREATE TABLE [edfi].[GraduationPlanRequiredAssessmentScore] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [GraduationSchoolYear] [SMALLINT] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [MinimumScore] [NVARCHAR](35) NULL,
    [MaximumScore] [NVARCHAR](35) NULL,
    [ResultDatatypeTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [GraduationPlanRequiredAssessmentScore_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [EducationOrganizationId] ASC,
        [GraduationPlanTypeDescriptorId] ASC,
        [GraduationSchoolYear] ASC,
        [AssessmentReportingMethodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] ADD CONSTRAINT [GraduationPlanRequiredAssessmentScore_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[GraduationPlanType] --
CREATE TABLE [edfi].[GraduationPlanType] (
    [GraduationPlanTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GraduationPlanType_PK] PRIMARY KEY CLUSTERED (
        [GraduationPlanTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GraduationPlanType] ADD CONSTRAINT [GraduationPlanType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GraduationPlanType] ADD CONSTRAINT [GraduationPlanType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GraduationPlanType] ADD CONSTRAINT [GraduationPlanType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[GraduationPlanTypeDescriptor] --
CREATE TABLE [edfi].[GraduationPlanTypeDescriptor] (
    [GraduationPlanTypeDescriptorId] [INT] NOT NULL,
    [GraduationPlanTypeId] [INT] NULL,
    CONSTRAINT [GraduationPlanTypeDescriptor_PK] PRIMARY KEY CLUSTERED (
        [GraduationPlanTypeDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[GunFreeSchoolsActReportingStatusType] --
CREATE TABLE [edfi].[GunFreeSchoolsActReportingStatusType] (
    [GunFreeSchoolsActReportingStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [GunFreeSchoolsActReportingStatusType_PK] PRIMARY KEY CLUSTERED (
        [GunFreeSchoolsActReportingStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[GunFreeSchoolsActReportingStatusType] ADD CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[GunFreeSchoolsActReportingStatusType] ADD CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[GunFreeSchoolsActReportingStatusType] ADD CONSTRAINT [GunFreeSchoolsActReportingStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[IdentificationDocumentUseType] --
CREATE TABLE [edfi].[IdentificationDocumentUseType] (
    [IdentificationDocumentUseTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [IdentificationDocumentUseType_PK] PRIMARY KEY CLUSTERED (
        [IdentificationDocumentUseTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[IdentificationDocumentUseType] ADD CONSTRAINT [IdentificationDocumentUseType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[IdentificationDocumentUseType] ADD CONSTRAINT [IdentificationDocumentUseType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[IdentificationDocumentUseType] ADD CONSTRAINT [IdentificationDocumentUseType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[IncidentLocationType] --
CREATE TABLE [edfi].[IncidentLocationType] (
    [IncidentLocationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [IncidentLocationType_PK] PRIMARY KEY CLUSTERED (
        [IncidentLocationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[IncidentLocationType] ADD CONSTRAINT [IncidentLocationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[IncidentLocationType] ADD CONSTRAINT [IncidentLocationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[IncidentLocationType] ADD CONSTRAINT [IncidentLocationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InstitutionTelephoneNumberType] --
CREATE TABLE [edfi].[InstitutionTelephoneNumberType] (
    [InstitutionTelephoneNumberTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [InstitutionTelephoneNumberType_PK] PRIMARY KEY CLUSTERED (
        [InstitutionTelephoneNumberTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InstitutionTelephoneNumberType] ADD CONSTRAINT [InstitutionTelephoneNumberType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[InstitutionTelephoneNumberType] ADD CONSTRAINT [InstitutionTelephoneNumberType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[InstitutionTelephoneNumberType] ADD CONSTRAINT [InstitutionTelephoneNumberType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[IntegratedTechnologyStatusType] --
CREATE TABLE [edfi].[IntegratedTechnologyStatusType] (
    [IntegratedTechnologyStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [IntegratedTechnologyStatusType_PK] PRIMARY KEY CLUSTERED (
        [IntegratedTechnologyStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[IntegratedTechnologyStatusType] ADD CONSTRAINT [IntegratedTechnologyStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[IntegratedTechnologyStatusType] ADD CONSTRAINT [IntegratedTechnologyStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[IntegratedTechnologyStatusType] ADD CONSTRAINT [IntegratedTechnologyStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InteractivityStyleType] --
CREATE TABLE [edfi].[InteractivityStyleType] (
    [InteractivityStyleTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [InteractivityStyleType_PK] PRIMARY KEY CLUSTERED (
        [InteractivityStyleTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InteractivityStyleType] ADD CONSTRAINT [InteractivityStyleType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[InteractivityStyleType] ADD CONSTRAINT [InteractivityStyleType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[InteractivityStyleType] ADD CONSTRAINT [InteractivityStyleType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InternetAccessType] --
CREATE TABLE [edfi].[InternetAccessType] (
    [InternetAccessTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [InternetAccessType_PK] PRIMARY KEY CLUSTERED (
        [InternetAccessTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InternetAccessType] ADD CONSTRAINT [InternetAccessType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[InternetAccessType] ADD CONSTRAINT [InternetAccessType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[InternetAccessType] ADD CONSTRAINT [InternetAccessType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Intervention] --
CREATE TABLE [edfi].[Intervention] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [InterventionClassTypeId] [INT] NOT NULL,
    [DeliveryMethodTypeId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Intervention_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Intervention] ADD CONSTRAINT [Intervention_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Intervention] ADD CONSTRAINT [Intervention_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Intervention] ADD CONSTRAINT [Intervention_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InterventionAppropriateGradeLevel] --
CREATE TABLE [edfi].[InterventionAppropriateGradeLevel] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionAppropriateGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] ADD CONSTRAINT [InterventionAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionAppropriateSex] --
CREATE TABLE [edfi].[InterventionAppropriateSex] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [SexTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionAppropriateSex_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [SexTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionAppropriateSex] ADD CONSTRAINT [InterventionAppropriateSex_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionClassType] --
CREATE TABLE [edfi].[InterventionClassType] (
    [InterventionClassTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [InterventionClassType_PK] PRIMARY KEY CLUSTERED (
        [InterventionClassTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionClassType] ADD CONSTRAINT [InterventionClassType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[InterventionClassType] ADD CONSTRAINT [InterventionClassType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[InterventionClassType] ADD CONSTRAINT [InterventionClassType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InterventionDiagnosis] --
CREATE TABLE [edfi].[InterventionDiagnosis] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [DiagnosisDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionDiagnosis_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [DiagnosisDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionDiagnosis] ADD CONSTRAINT [InterventionDiagnosis_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionEducationContent] --
CREATE TABLE [edfi].[InterventionEducationContent] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionEducationContent_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [ContentIdentifier] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionEducationContent] ADD CONSTRAINT [InterventionEducationContent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionEffectivenessRatingType] --
CREATE TABLE [edfi].[InterventionEffectivenessRatingType] (
    [InterventionEffectivenessRatingTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [InterventionEffectivenessRatingType_PK] PRIMARY KEY CLUSTERED (
        [InterventionEffectivenessRatingTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionEffectivenessRatingType] ADD CONSTRAINT [InterventionEffectivenessRatingType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[InterventionEffectivenessRatingType] ADD CONSTRAINT [InterventionEffectivenessRatingType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[InterventionEffectivenessRatingType] ADD CONSTRAINT [InterventionEffectivenessRatingType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InterventionInterventionPrescription] --
CREATE TABLE [edfi].[InterventionInterventionPrescription] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionInterventionPrescription_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [InterventionPrescriptionIdentificationCode] ASC,
        [InterventionPrescriptionEducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionInterventionPrescription] ADD CONSTRAINT [InterventionInterventionPrescription_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionLearningResourceMetadataURI] --
CREATE TABLE [edfi].[InterventionLearningResourceMetadataURI] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionLearningResourceMetadataURI_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [LearningResourceMetadataURI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI] ADD CONSTRAINT [InterventionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionMeetingTime] --
CREATE TABLE [edfi].[InterventionMeetingTime] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [AlternateDayName] [NVARCHAR](20) NULL,
    [StartTime] [TIME](7) NOT NULL,
    [EndTime] [TIME](7) NOT NULL,
    [OfficialAttendancePeriod] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionMeetingTime_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionMeetingTime] ADD CONSTRAINT [InterventionMeetingTime_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPopulationServed] --
CREATE TABLE [edfi].[InterventionPopulationServed] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [PopulationServedTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPopulationServed_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [PopulationServedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPopulationServed] ADD CONSTRAINT [InterventionPopulationServed_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPrescription] --
CREATE TABLE [edfi].[InterventionPrescription] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [InterventionClassTypeId] [INT] NOT NULL,
    [DeliveryMethodTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [InterventionPrescription_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescription] ADD CONSTRAINT [InterventionPrescription_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[InterventionPrescription] ADD CONSTRAINT [InterventionPrescription_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[InterventionPrescription] ADD CONSTRAINT [InterventionPrescription_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InterventionPrescriptionAppropriateGradeLevel] --
CREATE TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPrescriptionAppropriateGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] ADD CONSTRAINT [InterventionPrescriptionAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPrescriptionAppropriateSex] --
CREATE TABLE [edfi].[InterventionPrescriptionAppropriateSex] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [SexTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPrescriptionAppropriateSex_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [SexTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] ADD CONSTRAINT [InterventionPrescriptionAppropriateSex_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPrescriptionDiagnosis] --
CREATE TABLE [edfi].[InterventionPrescriptionDiagnosis] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [DiagnosisDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPrescriptionDiagnosis_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [DiagnosisDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] ADD CONSTRAINT [InterventionPrescriptionDiagnosis_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPrescriptionEducationContent] --
CREATE TABLE [edfi].[InterventionPrescriptionEducationContent] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPrescriptionEducationContent_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [ContentIdentifier] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] ADD CONSTRAINT [InterventionPrescriptionEducationContent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPrescriptionLearningResourceMetadataURI] --
CREATE TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPrescriptionLearningResourceMetadataURI_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [LearningResourceMetadataURI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] ADD CONSTRAINT [InterventionPrescriptionLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPrescriptionPopulationServed] --
CREATE TABLE [edfi].[InterventionPrescriptionPopulationServed] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [PopulationServedTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPrescriptionPopulationServed_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [PopulationServedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] ADD CONSTRAINT [InterventionPrescriptionPopulationServed_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionPrescriptionURI] --
CREATE TABLE [edfi].[InterventionPrescriptionURI] (
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [URI] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionPrescriptionURI_PK] PRIMARY KEY CLUSTERED (
        [InterventionPrescriptionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [URI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionPrescriptionURI] ADD CONSTRAINT [InterventionPrescriptionURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStaff] --
CREATE TABLE [edfi].[InterventionStaff] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [StaffUSI] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStaff_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [StaffUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStaff] ADD CONSTRAINT [InterventionStaff_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudy] --
CREATE TABLE [edfi].[InterventionStudy] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [InterventionPrescriptionEducationOrganizationId] [INT] NOT NULL,
    [InterventionPrescriptionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [Participants] [INT] NOT NULL,
    [DeliveryMethodTypeId] [INT] NOT NULL,
    [InterventionClassTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [InterventionStudy_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudy] ADD CONSTRAINT [InterventionStudy_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[InterventionStudy] ADD CONSTRAINT [InterventionStudy_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[InterventionStudy] ADD CONSTRAINT [InterventionStudy_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[InterventionStudyAppropriateGradeLevel] --
CREATE TABLE [edfi].[InterventionStudyAppropriateGradeLevel] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyAppropriateGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] ADD CONSTRAINT [InterventionStudyAppropriateGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudyAppropriateSex] --
CREATE TABLE [edfi].[InterventionStudyAppropriateSex] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [SexTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyAppropriateSex_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [SexTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyAppropriateSex] ADD CONSTRAINT [InterventionStudyAppropriateSex_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudyEducationContent] --
CREATE TABLE [edfi].[InterventionStudyEducationContent] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ContentIdentifier] [NVARCHAR](225) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyEducationContent_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [ContentIdentifier] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyEducationContent] ADD CONSTRAINT [InterventionStudyEducationContent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudyInterventionEffectiveness] --
CREATE TABLE [edfi].[InterventionStudyInterventionEffectiveness] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [DiagnosisDescriptorId] [INT] NOT NULL,
    [PopulationServedTypeId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [ImprovementIndex] [INT] NULL,
    [InterventionEffectivenessRatingTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyInterventionEffectiveness_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [DiagnosisDescriptorId] ASC,
        [PopulationServedTypeId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] ADD CONSTRAINT [InterventionStudyInterventionEffectiveness_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudyLearningResourceMetadataURI] --
CREATE TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [LearningResourceMetadataURI] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyLearningResourceMetadataURI_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [LearningResourceMetadataURI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] ADD CONSTRAINT [InterventionStudyLearningResourceMetadataURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudyPopulationServed] --
CREATE TABLE [edfi].[InterventionStudyPopulationServed] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [PopulationServedTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyPopulationServed_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [PopulationServedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyPopulationServed] ADD CONSTRAINT [InterventionStudyPopulationServed_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudyStateAbbreviation] --
CREATE TABLE [edfi].[InterventionStudyStateAbbreviation] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [StateAbbreviationTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyStateAbbreviation_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [StateAbbreviationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] ADD CONSTRAINT [InterventionStudyStateAbbreviation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionStudyURI] --
CREATE TABLE [edfi].[InterventionStudyURI] (
    [InterventionStudyIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [URI] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionStudyURI_PK] PRIMARY KEY CLUSTERED (
        [InterventionStudyIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [URI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionStudyURI] ADD CONSTRAINT [InterventionStudyURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[InterventionURI] --
CREATE TABLE [edfi].[InterventionURI] (
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [URI] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [InterventionURI_PK] PRIMARY KEY CLUSTERED (
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [URI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[InterventionURI] ADD CONSTRAINT [InterventionURI_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LanguageDescriptor] --
CREATE TABLE [edfi].[LanguageDescriptor] (
    [LanguageDescriptorId] [INT] NOT NULL,
    [LanguageTypeId] [INT] NULL,
    CONSTRAINT [LanguageDescriptor_PK] PRIMARY KEY CLUSTERED (
        [LanguageDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[LanguageType] --
CREATE TABLE [edfi].[LanguageType] (
    [LanguageTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LanguageType_PK] PRIMARY KEY CLUSTERED (
        [LanguageTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LanguageType] ADD CONSTRAINT [LanguageType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LanguageType] ADD CONSTRAINT [LanguageType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LanguageType] ADD CONSTRAINT [LanguageType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LanguageUseType] --
CREATE TABLE [edfi].[LanguageUseType] (
    [LanguageUseTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LanguageUseType_PK] PRIMARY KEY CLUSTERED (
        [LanguageUseTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LanguageUseType] ADD CONSTRAINT [LanguageUseType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LanguageUseType] ADD CONSTRAINT [LanguageUseType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LanguageUseType] ADD CONSTRAINT [LanguageUseType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LearningObjective] --
CREATE TABLE [edfi].[LearningObjective] (
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [LearningObjectiveId] [NVARCHAR](60) NULL,
    [Description] [NVARCHAR](1024) NULL,
    [Nomenclature] [NVARCHAR](35) NULL,
    [SuccessCriteria] [NVARCHAR](150) NULL,
    [ParentObjective] [NVARCHAR](60) NULL,
    [ParentAcademicSubjectDescriptorId] [INT] NULL,
    [ParentObjectiveGradeLevelDescriptorId] [INT] NULL,
    [Namespace] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LearningObjective_PK] PRIMARY KEY CLUSTERED (
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningObjective] ADD CONSTRAINT [LearningObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LearningObjective] ADD CONSTRAINT [LearningObjective_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LearningObjective] ADD CONSTRAINT [LearningObjective_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LearningObjectiveContentStandard] --
CREATE TABLE [edfi].[LearningObjectiveContentStandard] (
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [Title] [NVARCHAR](75) NOT NULL,
    [Version] [NVARCHAR](50) NULL,
    [URI] [NVARCHAR](255) NULL,
    [PublicationDate] [DATE] NULL,
    [PublicationYear] [SMALLINT] NULL,
    [PublicationStatusTypeId] [INT] NULL,
    [MandatingEducationOrganizationId] [INT] NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningObjectiveContentStandard_PK] PRIMARY KEY CLUSTERED (
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningObjectiveContentStandard] ADD CONSTRAINT [LearningObjectiveContentStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LearningObjectiveContentStandardAuthor] --
CREATE TABLE [edfi].[LearningObjectiveContentStandardAuthor] (
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [Author] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningObjectiveContentStandardAuthor_PK] PRIMARY KEY CLUSTERED (
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [Author] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningObjectiveContentStandardAuthor] ADD CONSTRAINT [LearningObjectiveContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LearningObjectiveLearningStandard] --
CREATE TABLE [edfi].[LearningObjectiveLearningStandard] (
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningObjectiveLearningStandard_PK] PRIMARY KEY CLUSTERED (
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [LearningStandardId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningObjectiveLearningStandard] ADD CONSTRAINT [LearningObjectiveLearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LearningStandard] --
CREATE TABLE [edfi].[LearningStandard] (
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [LearningStandardItemCode] [NVARCHAR](60) NULL,
    [URI] [NVARCHAR](255) NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [CourseTitle] [NVARCHAR](60) NULL,
    [SuccessCriteria] [NVARCHAR](150) NULL,
    [ParentLearningStandardId] [NVARCHAR](60) NULL,
    [Namespace] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LearningStandard_PK] PRIMARY KEY CLUSTERED (
        [LearningStandardId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningStandard] ADD CONSTRAINT [LearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LearningStandard] ADD CONSTRAINT [LearningStandard_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LearningStandard] ADD CONSTRAINT [LearningStandard_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LearningStandardContentStandard] --
CREATE TABLE [edfi].[LearningStandardContentStandard] (
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [Title] [NVARCHAR](75) NOT NULL,
    [Version] [NVARCHAR](50) NULL,
    [URI] [NVARCHAR](255) NULL,
    [PublicationDate] [DATE] NULL,
    [PublicationYear] [SMALLINT] NULL,
    [PublicationStatusTypeId] [INT] NULL,
    [MandatingEducationOrganizationId] [INT] NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningStandardContentStandard_PK] PRIMARY KEY CLUSTERED (
        [LearningStandardId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningStandardContentStandard] ADD CONSTRAINT [LearningStandardContentStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LearningStandardContentStandardAuthor] --
CREATE TABLE [edfi].[LearningStandardContentStandardAuthor] (
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [Author] [NVARCHAR](255) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningStandardContentStandardAuthor_PK] PRIMARY KEY CLUSTERED (
        [LearningStandardId] ASC,
        [Author] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningStandardContentStandardAuthor] ADD CONSTRAINT [LearningStandardContentStandardAuthor_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LearningStandardGradeLevel] --
CREATE TABLE [edfi].[LearningStandardGradeLevel] (
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningStandardGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [LearningStandardId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningStandardGradeLevel] ADD CONSTRAINT [LearningStandardGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LearningStandardIdentificationCode] --
CREATE TABLE [edfi].[LearningStandardIdentificationCode] (
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [ContentStandardName] [NVARCHAR](65) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningStandardIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [LearningStandardId] ASC,
        [IdentificationCode] ASC,
        [ContentStandardName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningStandardIdentificationCode] ADD CONSTRAINT [LearningStandardIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LearningStandardPrerequisiteLearningStandard] --
CREATE TABLE [edfi].[LearningStandardPrerequisiteLearningStandard] (
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [PrerequisiteLearningStandardId] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LearningStandardPrerequisiteLearningStandard_PK] PRIMARY KEY CLUSTERED (
        [LearningStandardId] ASC,
        [PrerequisiteLearningStandardId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LearningStandardPrerequisiteLearningStandard] ADD CONSTRAINT [LearningStandardPrerequisiteLearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LeaveEvent] --
CREATE TABLE [edfi].[LeaveEvent] (
    [StaffUSI] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [LeaveEventCategoryTypeId] [INT] NOT NULL,
    [LeaveEventReason] [NVARCHAR](40) NULL,
    [HoursOnLeave] [DECIMAL](18, 2) NULL,
    [SubstituteAssigned] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LeaveEvent_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [EventDate] ASC,
        [LeaveEventCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LeaveEvent] ADD CONSTRAINT [LeaveEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LeaveEvent] ADD CONSTRAINT [LeaveEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LeaveEvent] ADD CONSTRAINT [LeaveEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LeaveEventCategoryType] --
CREATE TABLE [edfi].[LeaveEventCategoryType] (
    [LeaveEventCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LeaveEventCategoryType_PK] PRIMARY KEY CLUSTERED (
        [LeaveEventCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LeaveEventCategoryType] ADD CONSTRAINT [LeaveEventCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LeaveEventCategoryType] ADD CONSTRAINT [LeaveEventCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LeaveEventCategoryType] ADD CONSTRAINT [LeaveEventCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LevelDescriptor] --
CREATE TABLE [edfi].[LevelDescriptor] (
    [LevelDescriptorId] [INT] NOT NULL,
    CONSTRAINT [LevelDescriptor_PK] PRIMARY KEY CLUSTERED (
        [LevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[LevelDescriptorGradeLevel] --
CREATE TABLE [edfi].[LevelDescriptorGradeLevel] (
    [LevelDescriptorId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LevelDescriptorGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [LevelDescriptorId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LevelDescriptorGradeLevel] ADD CONSTRAINT [LevelDescriptorGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LevelOfEducationDescriptor] --
CREATE TABLE [edfi].[LevelOfEducationDescriptor] (
    [LevelOfEducationDescriptorId] [INT] NOT NULL,
    [LevelOfEducationTypeId] [INT] NULL,
    CONSTRAINT [LevelOfEducationDescriptor_PK] PRIMARY KEY CLUSTERED (
        [LevelOfEducationDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[LevelOfEducationType] --
CREATE TABLE [edfi].[LevelOfEducationType] (
    [LevelOfEducationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LevelOfEducationType_PK] PRIMARY KEY CLUSTERED (
        [LevelOfEducationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LevelOfEducationType] ADD CONSTRAINT [LevelOfEducationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LevelOfEducationType] ADD CONSTRAINT [LevelOfEducationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LevelOfEducationType] ADD CONSTRAINT [LevelOfEducationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LimitedEnglishProficiencyDescriptor] --
CREATE TABLE [edfi].[LimitedEnglishProficiencyDescriptor] (
    [LimitedEnglishProficiencyDescriptorId] [INT] NOT NULL,
    [LimitedEnglishProficiencyTypeId] [INT] NOT NULL,
    CONSTRAINT [LimitedEnglishProficiencyDescriptor_PK] PRIMARY KEY CLUSTERED (
        [LimitedEnglishProficiencyDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[LimitedEnglishProficiencyType] --
CREATE TABLE [edfi].[LimitedEnglishProficiencyType] (
    [LimitedEnglishProficiencyTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LimitedEnglishProficiencyType_PK] PRIMARY KEY CLUSTERED (
        [LimitedEnglishProficiencyTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LimitedEnglishProficiencyType] ADD CONSTRAINT [LimitedEnglishProficiencyType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LimitedEnglishProficiencyType] ADD CONSTRAINT [LimitedEnglishProficiencyType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LimitedEnglishProficiencyType] ADD CONSTRAINT [LimitedEnglishProficiencyType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LocalEducationAgency] --
CREATE TABLE [edfi].[LocalEducationAgency] (
    [LocalEducationAgencyId] [INT] NOT NULL,
    [LocalEducationAgencyCategoryTypeId] [INT] NOT NULL,
    [CharterStatusTypeId] [INT] NULL,
    [ParentLocalEducationAgencyId] [INT] NULL,
    [EducationServiceCenterId] [INT] NULL,
    [StateEducationAgencyId] [INT] NULL,
    CONSTRAINT [LocalEducationAgency_PK] PRIMARY KEY CLUSTERED (
        [LocalEducationAgencyId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[LocalEducationAgencyAccountability] --
CREATE TABLE [edfi].[LocalEducationAgencyAccountability] (
    [LocalEducationAgencyId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [GunFreeSchoolsActReportingStatusTypeId] [INT] NULL,
    [SchoolChoiceImplementStatusTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [LocalEducationAgencyAccountability_PK] PRIMARY KEY CLUSTERED (
        [LocalEducationAgencyId] ASC,
        [SchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LocalEducationAgencyAccountability] ADD CONSTRAINT [LocalEducationAgencyAccountability_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[LocalEducationAgencyCategoryType] --
CREATE TABLE [edfi].[LocalEducationAgencyCategoryType] (
    [LocalEducationAgencyCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LocalEducationAgencyCategoryType_PK] PRIMARY KEY CLUSTERED (
        [LocalEducationAgencyCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LocalEducationAgencyCategoryType] ADD CONSTRAINT [LocalEducationAgencyCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LocalEducationAgencyCategoryType] ADD CONSTRAINT [LocalEducationAgencyCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LocalEducationAgencyCategoryType] ADD CONSTRAINT [LocalEducationAgencyCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[LocalEducationAgencyFederalFunds] --
CREATE TABLE [edfi].[LocalEducationAgencyFederalFunds] (
    [LocalEducationAgencyId] [INT] NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [InnovativeDollarsSpent] [MONEY] NULL,
    [InnovativeDollarsSpentOnStrategicPriorities] [MONEY] NULL,
    [InnovativeProgramsFundsReceived] [MONEY] NULL,
    [SchoolImprovementAllocation] [MONEY] NULL,
    [SchoolImprovementReservedFundsPercentage] [DECIMAL](5, 4) NULL,
    [SupplementalEducationalServicesFundsSpent] [MONEY] NULL,
    [SupplementalEducationalServicesPerPupilExpenditure] [MONEY] NULL,
    [StateAssessmentAdministrationFunding] [DECIMAL](5, 4) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [LocalEducationAgencyFederalFunds_PK] PRIMARY KEY CLUSTERED (
        [LocalEducationAgencyId] ASC,
        [FiscalYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [LocalEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [LocalEducationAgencyFederalFunds_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[LocalEducationAgencyFederalFunds] ADD CONSTRAINT [LocalEducationAgencyFederalFunds_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Location] --
CREATE TABLE [edfi].[Location] (
    [SchoolId] [INT] NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [MaximumNumberOfSeats] [INT] NULL,
    [OptimalNumberOfSeats] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Location_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [ClassroomIdentificationCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Location] ADD CONSTRAINT [Location_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Location] ADD CONSTRAINT [Location_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Location] ADD CONSTRAINT [Location_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[MagnetSpecialProgramEmphasisSchoolType] --
CREATE TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolType] (
    [MagnetSpecialProgramEmphasisSchoolTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_PK] PRIMARY KEY CLUSTERED (
        [MagnetSpecialProgramEmphasisSchoolTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolType] ADD CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolType] ADD CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[MagnetSpecialProgramEmphasisSchoolType] ADD CONSTRAINT [MagnetSpecialProgramEmphasisSchoolType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[MediumOfInstructionType] --
CREATE TABLE [edfi].[MediumOfInstructionType] (
    [MediumOfInstructionTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [MediumOfInstructionType_PK] PRIMARY KEY CLUSTERED (
        [MediumOfInstructionTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[MediumOfInstructionType] ADD CONSTRAINT [MediumOfInstructionType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[MediumOfInstructionType] ADD CONSTRAINT [MediumOfInstructionType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[MediumOfInstructionType] ADD CONSTRAINT [MediumOfInstructionType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[MeetingDayType] --
CREATE TABLE [edfi].[MeetingDayType] (
    [MeetingDayTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [MeetingDayType_PK] PRIMARY KEY CLUSTERED (
        [MeetingDayTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[MeetingDayType] ADD CONSTRAINT [MeetingDayType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[MeetingDayType] ADD CONSTRAINT [MeetingDayType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[MeetingDayType] ADD CONSTRAINT [MeetingDayType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[MethodCreditEarnedType] --
CREATE TABLE [edfi].[MethodCreditEarnedType] (
    [MethodCreditEarnedTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [MethodCreditEarnedType_PK] PRIMARY KEY CLUSTERED (
        [MethodCreditEarnedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[MethodCreditEarnedType] ADD CONSTRAINT [MethodCreditEarnedType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[MethodCreditEarnedType] ADD CONSTRAINT [MethodCreditEarnedType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[MethodCreditEarnedType] ADD CONSTRAINT [MethodCreditEarnedType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[NetworkPurposeType] --
CREATE TABLE [edfi].[NetworkPurposeType] (
    [NetworkPurposeTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [NetworkPurposeType_PK] PRIMARY KEY CLUSTERED (
        [NetworkPurposeTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[NetworkPurposeType] ADD CONSTRAINT [NetworkPurposeType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[NetworkPurposeType] ADD CONSTRAINT [NetworkPurposeType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[NetworkPurposeType] ADD CONSTRAINT [NetworkPurposeType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ObjectiveAssessment] --
CREATE TABLE [edfi].[ObjectiveAssessment] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [MaxRawScore] [INT] NULL,
    [PercentOfAssessment] [DECIMAL](5, 4) NULL,
    [Nomenclature] [NVARCHAR](35) NULL,
    [Description] [NVARCHAR](1024) NULL,
    [ParentIdentificationCode] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ObjectiveAssessment_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ObjectiveAssessment] ADD CONSTRAINT [ObjectiveAssessment_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ObjectiveAssessment] ADD CONSTRAINT [ObjectiveAssessment_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ObjectiveAssessment] ADD CONSTRAINT [ObjectiveAssessment_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ObjectiveAssessmentAssessmentItem] --
CREATE TABLE [edfi].[ObjectiveAssessmentAssessmentItem] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AssessmentItemIdentificationCode] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ObjectiveAssessmentAssessmentItem_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [AssessmentItemIdentificationCode] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] ADD CONSTRAINT [ObjectiveAssessmentAssessmentItem_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ObjectiveAssessmentLearningObjective] --
CREATE TABLE [edfi].[ObjectiveAssessmentLearningObjective] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ObjectiveAssessmentLearningObjective_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [Objective] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningObjective] ADD CONSTRAINT [ObjectiveAssessmentLearningObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ObjectiveAssessmentLearningStandard] --
CREATE TABLE [edfi].[ObjectiveAssessmentLearningStandard] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ObjectiveAssessmentLearningStandard_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [LearningStandardId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] ADD CONSTRAINT [ObjectiveAssessmentLearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ObjectiveAssessmentPerformanceLevel] --
CREATE TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] (
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [PerformanceLevelDescriptorId] [INT] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [MinimumScore] [NVARCHAR](35) NULL,
    [MaximumScore] [NVARCHAR](35) NULL,
    [ResultDatatypeTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ObjectiveAssessmentPerformanceLevel_PK] PRIMARY KEY CLUSTERED (
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [PerformanceLevelDescriptorId] ASC,
        [AssessmentReportingMethodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [ObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ObjectiveAssessmentScore] --
CREATE TABLE [edfi].[ObjectiveAssessmentScore] (
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [Version] [INT] NOT NULL,
    [MinimumScore] [NVARCHAR](35) NULL,
    [MaximumScore] [NVARCHAR](35) NULL,
    [ResultDatatypeTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ObjectiveAssessmentScore_PK] PRIMARY KEY CLUSTERED (
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [AssessmentReportingMethodTypeId] ASC,
        [AssessmentTitle] ASC,
        [IdentificationCode] ASC,
        [Version] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ObjectiveAssessmentScore] ADD CONSTRAINT [ObjectiveAssessmentScore_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[OldEthnicityType] --
CREATE TABLE [edfi].[OldEthnicityType] (
    [OldEthnicityTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [OldEthnicityType_PK] PRIMARY KEY CLUSTERED (
        [OldEthnicityTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[OldEthnicityType] ADD CONSTRAINT [OldEthnicityType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[OldEthnicityType] ADD CONSTRAINT [OldEthnicityType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[OldEthnicityType] ADD CONSTRAINT [OldEthnicityType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[OpenStaffPosition] --
CREATE TABLE [edfi].[OpenStaffPosition] (
    [EducationOrganizationId] [INT] NOT NULL,
    [EmploymentStatusDescriptorId] [INT] NOT NULL,
    [StaffClassificationDescriptorId] [INT] NOT NULL,
    [RequisitionNumber] [NVARCHAR](20) NOT NULL,
    [DatePosted] [DATE] NOT NULL,
    [PositionTitle] [NVARCHAR](100) NULL,
    [ProgramAssignmentDescriptorId] [INT] NULL,
    [DatePostingRemoved] [DATE] NULL,
    [PostingResultTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [OpenStaffPosition_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [EmploymentStatusDescriptorId] ASC,
        [StaffClassificationDescriptorId] ASC,
        [RequisitionNumber] ASC,
        [DatePosted] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [OpenStaffPosition_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [OpenStaffPosition_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[OpenStaffPosition] ADD CONSTRAINT [OpenStaffPosition_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[OpenStaffPositionAcademicSubject] --
CREATE TABLE [edfi].[OpenStaffPositionAcademicSubject] (
    [EducationOrganizationId] [INT] NOT NULL,
    [StaffClassificationDescriptorId] [INT] NOT NULL,
    [RequisitionNumber] [NVARCHAR](20) NOT NULL,
    [DatePosted] [DATE] NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [EmploymentStatusDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [OpenStaffPositionAcademicSubject_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [StaffClassificationDescriptorId] ASC,
        [RequisitionNumber] ASC,
        [DatePosted] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [EmploymentStatusDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] ADD CONSTRAINT [OpenStaffPositionAcademicSubject_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[OpenStaffPositionInstructionalGradeLevel] --
CREATE TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] (
    [EducationOrganizationId] [INT] NOT NULL,
    [StaffClassificationDescriptorId] [INT] NOT NULL,
    [RequisitionNumber] [NVARCHAR](20) NOT NULL,
    [DatePosted] [DATE] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [EmploymentStatusDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [OpenStaffPositionInstructionalGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [StaffClassificationDescriptorId] ASC,
        [RequisitionNumber] ASC,
        [DatePosted] ASC,
        [GradeLevelDescriptorId] ASC,
        [EmploymentStatusDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] ADD CONSTRAINT [OpenStaffPositionInstructionalGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[OperationalStatusType] --
CREATE TABLE [edfi].[OperationalStatusType] (
    [OperationalStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [OperationalStatusType_PK] PRIMARY KEY CLUSTERED (
        [OperationalStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[OperationalStatusType] ADD CONSTRAINT [OperationalStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[OperationalStatusType] ADD CONSTRAINT [OperationalStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[OperationalStatusType] ADD CONSTRAINT [OperationalStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[OtherNameType] --
CREATE TABLE [edfi].[OtherNameType] (
    [OtherNameTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [OtherNameType_PK] PRIMARY KEY CLUSTERED (
        [OtherNameTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[OtherNameType] ADD CONSTRAINT [OtherNameType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[OtherNameType] ADD CONSTRAINT [OtherNameType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[OtherNameType] ADD CONSTRAINT [OtherNameType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Parent] --
CREATE TABLE [edfi].[Parent] (
    [ParentUSI] [INT] IDENTITY(1,1) NOT NULL,
    [PersonalTitlePrefix] [NVARCHAR](30) NULL,
    [FirstName] [NVARCHAR](75) NOT NULL,
    [MiddleName] [NVARCHAR](75) NULL,
    [LastSurname] [NVARCHAR](75) NOT NULL,
    [GenerationCodeSuffix] [NVARCHAR](10) NULL,
    [MaidenName] [NVARCHAR](75) NULL,
    [SexTypeId] [INT] NULL,
    [LoginId] [NVARCHAR](60) NULL,
    [ParentUniqueId] [NVARCHAR](32) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Parent_PK] PRIMARY KEY CLUSTERED (
        [ParentUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [Parent_UI_ParentUniqueId] ON [edfi].[Parent] (
    [ParentUniqueId] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Parent] ADD CONSTRAINT [Parent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Parent] ADD CONSTRAINT [Parent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Parent] ADD CONSTRAINT [Parent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ParentAddress] --
CREATE TABLE [edfi].[ParentAddress] (
    [ParentUSI] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [StreetNumberName] [NVARCHAR](150) NOT NULL,
    [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
    [BuildingSiteNumber] [NVARCHAR](20) NULL,
    [City] [NVARCHAR](30) NOT NULL,
    [StateAbbreviationTypeId] [INT] NOT NULL,
    [PostalCode] [NVARCHAR](17) NOT NULL,
    [NameOfCounty] [NVARCHAR](30) NULL,
    [CountyFIPSCode] [NVARCHAR](5) NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ParentAddress_PK] PRIMARY KEY CLUSTERED (
        [ParentUSI] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ParentAddress] ADD CONSTRAINT [ParentAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ParentElectronicMail] --
CREATE TABLE [edfi].[ParentElectronicMail] (
    [ParentUSI] [INT] NOT NULL,
    [ElectronicMailTypeId] [INT] NOT NULL,
    [ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
    [PrimaryEmailAddressIndicator] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ParentElectronicMail_PK] PRIMARY KEY CLUSTERED (
        [ParentUSI] ASC,
        [ElectronicMailTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ParentElectronicMail] ADD CONSTRAINT [ParentElectronicMail_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ParentIdentificationDocument] --
CREATE TABLE [edfi].[ParentIdentificationDocument] (
    [PersonalInformationVerificationTypeId] [INT] NOT NULL,
    [IdentificationDocumentUseTypeId] [INT] NOT NULL,
    [ParentUSI] [INT] NOT NULL,
    [DocumentTitle] [NVARCHAR](60) NULL,
    [DocumentExpirationDate] [DATE] NULL,
    [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
    [IssuerName] [NVARCHAR](150) NULL,
    [IssuerCountryDescriptorId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ParentIdentificationDocument_PK] PRIMARY KEY CLUSTERED (
        [PersonalInformationVerificationTypeId] ASC,
        [IdentificationDocumentUseTypeId] ASC,
        [ParentUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ParentIdentificationDocument] ADD CONSTRAINT [ParentIdentificationDocument_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ParentInternationalAddress] --
CREATE TABLE [edfi].[ParentInternationalAddress] (
    [ParentUSI] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [AddressLine1] [NVARCHAR](150) NOT NULL,
    [AddressLine2] [NVARCHAR](150) NULL,
    [AddressLine3] [NVARCHAR](150) NULL,
    [AddressLine4] [NVARCHAR](150) NULL,
    [CountryDescriptorId] [INT] NOT NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ParentInternationalAddress_PK] PRIMARY KEY CLUSTERED (
        [ParentUSI] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ParentInternationalAddress] ADD CONSTRAINT [ParentInternationalAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ParentOtherName] --
CREATE TABLE [edfi].[ParentOtherName] (
    [ParentUSI] [INT] NOT NULL,
    [OtherNameTypeId] [INT] NOT NULL,
    [PersonalTitlePrefix] [NVARCHAR](30) NULL,
    [FirstName] [NVARCHAR](75) NOT NULL,
    [MiddleName] [NVARCHAR](75) NULL,
    [LastSurname] [NVARCHAR](75) NOT NULL,
    [GenerationCodeSuffix] [NVARCHAR](10) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ParentOtherName_PK] PRIMARY KEY CLUSTERED (
        [ParentUSI] ASC,
        [OtherNameTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ParentOtherName] ADD CONSTRAINT [ParentOtherName_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ParentTelephone] --
CREATE TABLE [edfi].[ParentTelephone] (
    [ParentUSI] [INT] NOT NULL,
    [TelephoneNumberTypeId] [INT] NOT NULL,
    [TelephoneNumber] [NVARCHAR](24) NOT NULL,
    [OrderOfPriority] [INT] NULL,
    [TextMessageCapabilityIndicator] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ParentTelephone_PK] PRIMARY KEY CLUSTERED (
        [ParentUSI] ASC,
        [TelephoneNumberTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ParentTelephone] ADD CONSTRAINT [ParentTelephone_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[Payroll] --
CREATE TABLE [edfi].[Payroll] (
    [StaffUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [AccountNumber] [NVARCHAR](50) NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [AsOfDate] [DATE] NOT NULL,
    [AmountToDate] [MONEY] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Payroll_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [EducationOrganizationId] ASC,
        [AccountNumber] ASC,
        [FiscalYear] ASC,
        [AsOfDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Payroll] ADD CONSTRAINT [Payroll_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Payroll] ADD CONSTRAINT [Payroll_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Payroll] ADD CONSTRAINT [Payroll_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PerformanceBaseConversionType] --
CREATE TABLE [edfi].[PerformanceBaseConversionType] (
    [PerformanceBaseConversionTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PerformanceBaseConversionType_PK] PRIMARY KEY CLUSTERED (
        [PerformanceBaseConversionTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PerformanceBaseConversionType] ADD CONSTRAINT [PerformanceBaseConversionType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PerformanceBaseConversionType] ADD CONSTRAINT [PerformanceBaseConversionType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PerformanceBaseConversionType] ADD CONSTRAINT [PerformanceBaseConversionType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PerformanceLevelDescriptor] --
CREATE TABLE [edfi].[PerformanceLevelDescriptor] (
    [PerformanceLevelDescriptorId] [INT] NOT NULL,
    [PerformanceBaseConversionTypeId] [INT] NULL,
    CONSTRAINT [PerformanceLevelDescriptor_PK] PRIMARY KEY CLUSTERED (
        [PerformanceLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[PersonalInformationVerificationType] --
CREATE TABLE [edfi].[PersonalInformationVerificationType] (
    [PersonalInformationVerificationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PersonalInformationVerificationType_PK] PRIMARY KEY CLUSTERED (
        [PersonalInformationVerificationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PersonalInformationVerificationType] ADD CONSTRAINT [PersonalInformationVerificationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PersonalInformationVerificationType] ADD CONSTRAINT [PersonalInformationVerificationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PersonalInformationVerificationType] ADD CONSTRAINT [PersonalInformationVerificationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PopulationServedType] --
CREATE TABLE [edfi].[PopulationServedType] (
    [PopulationServedTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PopulationServedType_PK] PRIMARY KEY CLUSTERED (
        [PopulationServedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PopulationServedType] ADD CONSTRAINT [PopulationServedType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PopulationServedType] ADD CONSTRAINT [PopulationServedType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PopulationServedType] ADD CONSTRAINT [PopulationServedType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PostingResultType] --
CREATE TABLE [edfi].[PostingResultType] (
    [PostingResultTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PostingResultType_PK] PRIMARY KEY CLUSTERED (
        [PostingResultTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PostingResultType] ADD CONSTRAINT [PostingResultType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PostingResultType] ADD CONSTRAINT [PostingResultType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PostingResultType] ADD CONSTRAINT [PostingResultType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PostSecondaryEvent] --
CREATE TABLE [edfi].[PostSecondaryEvent] (
    [StudentUSI] [INT] NOT NULL,
    [PostSecondaryEventCategoryTypeId] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PostSecondaryEvent_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [PostSecondaryEventCategoryTypeId] ASC,
        [EventDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PostSecondaryEvent] ADD CONSTRAINT [PostSecondaryEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PostSecondaryEvent] ADD CONSTRAINT [PostSecondaryEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PostSecondaryEvent] ADD CONSTRAINT [PostSecondaryEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PostSecondaryEventCategoryType] --
CREATE TABLE [edfi].[PostSecondaryEventCategoryType] (
    [PostSecondaryEventCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PostSecondaryEventCategoryType_PK] PRIMARY KEY CLUSTERED (
        [PostSecondaryEventCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PostSecondaryEventCategoryType] ADD CONSTRAINT [PostSecondaryEventCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PostSecondaryEventCategoryType] ADD CONSTRAINT [PostSecondaryEventCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PostSecondaryEventCategoryType] ADD CONSTRAINT [PostSecondaryEventCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PostSecondaryEventPostSecondaryInstitution] --
CREATE TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] (
    [StudentUSI] [INT] NOT NULL,
    [PostSecondaryEventCategoryTypeId] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [PostSecondaryInstitutionId] [NVARCHAR](30) NULL,
    [NameOfInstitution] [NVARCHAR](75) NOT NULL,
    [PostSecondaryInstitutionLevelTypeId] [INT] NULL,
    [AdministrativeFundingControlDescriptorId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [PostSecondaryEventPostSecondaryInstitution_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [PostSecondaryEventCategoryTypeId] ASC,
        [EventDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] ADD CONSTRAINT [PostSecondaryEventPostSecondaryInstitution_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] --
CREATE TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] (
    [StudentUSI] [INT] NOT NULL,
    [PostSecondaryEventCategoryTypeId] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [EducationOrganizationIdentificationSystemDescriptorId] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [PostSecondaryEventCategoryTypeId] ASC,
        [EventDate] ASC,
        [EducationOrganizationIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ADD CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] --
CREATE TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] (
    [StudentUSI] [INT] NOT NULL,
    [PostSecondaryEventCategoryTypeId] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [MediumOfInstructionTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [PostSecondaryEventCategoryTypeId] ASC,
        [EventDate] ASC,
        [MediumOfInstructionTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ADD CONSTRAINT [PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[PostSecondaryInstitutionLevelType] --
CREATE TABLE [edfi].[PostSecondaryInstitutionLevelType] (
    [PostSecondaryInstitutionLevelTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PostSecondaryInstitutionLevelType_PK] PRIMARY KEY CLUSTERED (
        [PostSecondaryInstitutionLevelTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PostSecondaryInstitutionLevelType] ADD CONSTRAINT [PostSecondaryInstitutionLevelType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PostSecondaryInstitutionLevelType] ADD CONSTRAINT [PostSecondaryInstitutionLevelType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PostSecondaryInstitutionLevelType] ADD CONSTRAINT [PostSecondaryInstitutionLevelType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Program] --
CREATE TABLE [edfi].[Program] (
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [ProgramId] [NVARCHAR](20) NULL,
    [ProgramSponsorTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Program_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Program] ADD CONSTRAINT [Program_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Program] ADD CONSTRAINT [Program_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Program] ADD CONSTRAINT [Program_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ProgramAssignmentDescriptor] --
CREATE TABLE [edfi].[ProgramAssignmentDescriptor] (
    [ProgramAssignmentDescriptorId] [INT] NOT NULL,
    [ProgramAssignmentTypeId] [INT] NULL,
    CONSTRAINT [ProgramAssignmentDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ProgramAssignmentDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ProgramAssignmentType] --
CREATE TABLE [edfi].[ProgramAssignmentType] (
    [ProgramAssignmentTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ProgramAssignmentType_PK] PRIMARY KEY CLUSTERED (
        [ProgramAssignmentTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramAssignmentType] ADD CONSTRAINT [ProgramAssignmentType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ProgramAssignmentType] ADD CONSTRAINT [ProgramAssignmentType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ProgramAssignmentType] ADD CONSTRAINT [ProgramAssignmentType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ProgramCharacteristic] --
CREATE TABLE [edfi].[ProgramCharacteristic] (
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramCharacteristicDescriptorId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ProgramCharacteristic_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramCharacteristicDescriptorId] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramCharacteristic] ADD CONSTRAINT [ProgramCharacteristic_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ProgramCharacteristicDescriptor] --
CREATE TABLE [edfi].[ProgramCharacteristicDescriptor] (
    [ProgramCharacteristicDescriptorId] [INT] NOT NULL,
    [ProgramCharacteristicTypeId] [INT] NULL,
    CONSTRAINT [ProgramCharacteristicDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ProgramCharacteristicDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ProgramCharacteristicType] --
CREATE TABLE [edfi].[ProgramCharacteristicType] (
    [ProgramCharacteristicTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ProgramCharacteristicType_PK] PRIMARY KEY CLUSTERED (
        [ProgramCharacteristicTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramCharacteristicType] ADD CONSTRAINT [ProgramCharacteristicType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ProgramCharacteristicType] ADD CONSTRAINT [ProgramCharacteristicType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ProgramCharacteristicType] ADD CONSTRAINT [ProgramCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ProgramLearningObjective] --
CREATE TABLE [edfi].[ProgramLearningObjective] (
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ProgramLearningObjective_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramLearningObjective] ADD CONSTRAINT [ProgramLearningObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ProgramLearningStandard] --
CREATE TABLE [edfi].[ProgramLearningStandard] (
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [LearningStandardId] [NVARCHAR](60) NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ProgramLearningStandard_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [LearningStandardId] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramLearningStandard] ADD CONSTRAINT [ProgramLearningStandard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ProgramService] --
CREATE TABLE [edfi].[ProgramService] (
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ServiceDescriptorId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ProgramService_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ServiceDescriptorId] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramService] ADD CONSTRAINT [ProgramService_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ProgramSponsorType] --
CREATE TABLE [edfi].[ProgramSponsorType] (
    [ProgramSponsorTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ProgramSponsorType_PK] PRIMARY KEY CLUSTERED (
        [ProgramSponsorTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramSponsorType] ADD CONSTRAINT [ProgramSponsorType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ProgramSponsorType] ADD CONSTRAINT [ProgramSponsorType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ProgramSponsorType] ADD CONSTRAINT [ProgramSponsorType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ProgramType] --
CREATE TABLE [edfi].[ProgramType] (
    [ProgramTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ProgramType_PK] PRIMARY KEY CLUSTERED (
        [ProgramTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ProgramType] ADD CONSTRAINT [ProgramType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ProgramType] ADD CONSTRAINT [ProgramType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ProgramType] ADD CONSTRAINT [ProgramType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[PublicationStatusType] --
CREATE TABLE [edfi].[PublicationStatusType] (
    [PublicationStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [PublicationStatusType_PK] PRIMARY KEY CLUSTERED (
        [PublicationStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[PublicationStatusType] ADD CONSTRAINT [PublicationStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[PublicationStatusType] ADD CONSTRAINT [PublicationStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[PublicationStatusType] ADD CONSTRAINT [PublicationStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[RaceType] --
CREATE TABLE [edfi].[RaceType] (
    [RaceTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [RaceType_PK] PRIMARY KEY CLUSTERED (
        [RaceTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RaceType] ADD CONSTRAINT [RaceType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[RaceType] ADD CONSTRAINT [RaceType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[RaceType] ADD CONSTRAINT [RaceType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ReasonExitedDescriptor] --
CREATE TABLE [edfi].[ReasonExitedDescriptor] (
    [ReasonExitedDescriptorId] [INT] NOT NULL,
    [ReasonExitedTypeId] [INT] NULL,
    CONSTRAINT [ReasonExitedDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ReasonExitedDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ReasonExitedType] --
CREATE TABLE [edfi].[ReasonExitedType] (
    [ReasonExitedTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ReasonExitedType_PK] PRIMARY KEY CLUSTERED (
        [ReasonExitedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ReasonExitedType] ADD CONSTRAINT [ReasonExitedType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ReasonExitedType] ADD CONSTRAINT [ReasonExitedType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ReasonExitedType] ADD CONSTRAINT [ReasonExitedType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ReasonNotTestedType] --
CREATE TABLE [edfi].[ReasonNotTestedType] (
    [ReasonNotTestedTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ReasonNotTestedType_PK] PRIMARY KEY CLUSTERED (
        [ReasonNotTestedTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ReasonNotTestedType] ADD CONSTRAINT [ReasonNotTestedType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ReasonNotTestedType] ADD CONSTRAINT [ReasonNotTestedType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ReasonNotTestedType] ADD CONSTRAINT [ReasonNotTestedType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[RecognitionType] --
CREATE TABLE [edfi].[RecognitionType] (
    [RecognitionTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [RecognitionType_PK] PRIMARY KEY CLUSTERED (
        [RecognitionTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RecognitionType] ADD CONSTRAINT [RecognitionType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[RecognitionType] ADD CONSTRAINT [RecognitionType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[RecognitionType] ADD CONSTRAINT [RecognitionType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[RelationType] --
CREATE TABLE [edfi].[RelationType] (
    [RelationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [RelationType_PK] PRIMARY KEY CLUSTERED (
        [RelationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RelationType] ADD CONSTRAINT [RelationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[RelationType] ADD CONSTRAINT [RelationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[RelationType] ADD CONSTRAINT [RelationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[RepeatIdentifierType] --
CREATE TABLE [edfi].[RepeatIdentifierType] (
    [RepeatIdentifierTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [RepeatIdentifierType_PK] PRIMARY KEY CLUSTERED (
        [RepeatIdentifierTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RepeatIdentifierType] ADD CONSTRAINT [RepeatIdentifierType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[RepeatIdentifierType] ADD CONSTRAINT [RepeatIdentifierType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[RepeatIdentifierType] ADD CONSTRAINT [RepeatIdentifierType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ReportCard] --
CREATE TABLE [edfi].[ReportCard] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [GPAGivenGradingPeriod] [DECIMAL](18, 4) NULL,
    [GPACumulative] [DECIMAL](18, 4) NULL,
    [NumberOfDaysAbsent] [DECIMAL](18, 4) NULL,
    [NumberOfDaysInAttendance] [DECIMAL](18, 4) NULL,
    [NumberOfDaysTardy] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ReportCard_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC,
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ReportCard] ADD CONSTRAINT [ReportCard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ReportCard] ADD CONSTRAINT [ReportCard_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ReportCard] ADD CONSTRAINT [ReportCard_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ReportCardGrade] --
CREATE TABLE [edfi].[ReportCardGrade] (
    [EducationOrganizationId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [GradeTypeId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ReportCardGrade_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC,
        [GradeTypeId] ASC,
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [LocalCourseCode] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ReportCardGrade] ADD CONSTRAINT [ReportCardGrade_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ReportCardStudentCompetencyObjective] --
CREATE TABLE [edfi].[ReportCardStudentCompetencyObjective] (
    [StudentUSI] [INT] NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [ObjectiveEducationOrganizationId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ReportCardEducationOrganizationId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ReportCardStudentCompetencyObjective_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [Objective] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [ObjectiveEducationOrganizationId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC,
        [SchoolId] ASC,
        [ReportCardEducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] ADD CONSTRAINT [ReportCardStudentCompetencyObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ReportCardStudentLearningObjective] --
CREATE TABLE [edfi].[ReportCardStudentLearningObjective] (
    [ReportCardEducationOrganizationId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [ReportCardStudentLearningObjective_PK] PRIMARY KEY CLUSTERED (
        [ReportCardEducationOrganizationId] ASC,
        [StudentUSI] ASC,
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC,
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ReportCardStudentLearningObjective] ADD CONSTRAINT [ReportCardStudentLearningObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[ReporterDescriptionDescriptor] --
CREATE TABLE [edfi].[ReporterDescriptionDescriptor] (
    [ReporterDescriptionDescriptorId] [INT] NOT NULL,
    [ReporterDescriptionTypeId] [INT] NULL,
    CONSTRAINT [ReporterDescriptionDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ReporterDescriptionDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ReporterDescriptionType] --
CREATE TABLE [edfi].[ReporterDescriptionType] (
    [ReporterDescriptionTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ReporterDescriptionType_PK] PRIMARY KEY CLUSTERED (
        [ReporterDescriptionTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ReporterDescriptionType] ADD CONSTRAINT [ReporterDescriptionType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ReporterDescriptionType] ADD CONSTRAINT [ReporterDescriptionType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ReporterDescriptionType] ADD CONSTRAINT [ReporterDescriptionType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ResidencyStatusDescriptor] --
CREATE TABLE [edfi].[ResidencyStatusDescriptor] (
    [ResidencyStatusDescriptorId] [INT] NOT NULL,
    [ResidencyStatusTypeId] [INT] NULL,
    CONSTRAINT [ResidencyStatusDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ResidencyStatusDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ResidencyStatusType] --
CREATE TABLE [edfi].[ResidencyStatusType] (
    [ResidencyStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ResidencyStatusType_PK] PRIMARY KEY CLUSTERED (
        [ResidencyStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ResidencyStatusType] ADD CONSTRAINT [ResidencyStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ResidencyStatusType] ADD CONSTRAINT [ResidencyStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ResidencyStatusType] ADD CONSTRAINT [ResidencyStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ResponseIndicatorType] --
CREATE TABLE [edfi].[ResponseIndicatorType] (
    [ResponseIndicatorTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ResponseIndicatorType_PK] PRIMARY KEY CLUSTERED (
        [ResponseIndicatorTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ResponseIndicatorType] ADD CONSTRAINT [ResponseIndicatorType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ResponseIndicatorType] ADD CONSTRAINT [ResponseIndicatorType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ResponseIndicatorType] ADD CONSTRAINT [ResponseIndicatorType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ResponsibilityDescriptor] --
CREATE TABLE [edfi].[ResponsibilityDescriptor] (
    [ResponsibilityDescriptorId] [INT] NOT NULL,
    [ResponsibilityTypeId] [INT] NULL,
    CONSTRAINT [ResponsibilityDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ResponsibilityDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[ResponsibilityType] --
CREATE TABLE [edfi].[ResponsibilityType] (
    [ResponsibilityTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ResponsibilityType_PK] PRIMARY KEY CLUSTERED (
        [ResponsibilityTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ResponsibilityType] ADD CONSTRAINT [ResponsibilityType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ResponsibilityType] ADD CONSTRAINT [ResponsibilityType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ResponsibilityType] ADD CONSTRAINT [ResponsibilityType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[RestraintEvent] --
CREATE TABLE [edfi].[RestraintEvent] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [EducationalEnvironmentTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [RestraintEvent_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [RestraintEventIdentifier] ASC,
        [EventDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RestraintEvent] ADD CONSTRAINT [RestraintEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[RestraintEvent] ADD CONSTRAINT [RestraintEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[RestraintEvent] ADD CONSTRAINT [RestraintEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[RestraintEventProgram] --
CREATE TABLE [edfi].[RestraintEventProgram] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [RestraintEventProgram_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [RestraintEventIdentifier] ASC,
        [EventDate] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RestraintEventProgram] ADD CONSTRAINT [RestraintEventProgram_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[RestraintEventReason] --
CREATE TABLE [edfi].[RestraintEventReason] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [RestraintEventIdentifier] [NVARCHAR](20) NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [RestraintEventReasonTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [RestraintEventReason_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [RestraintEventIdentifier] ASC,
        [EventDate] ASC,
        [RestraintEventReasonTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RestraintEventReason] ADD CONSTRAINT [RestraintEventReason_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[RestraintEventReasonType] --
CREATE TABLE [edfi].[RestraintEventReasonType] (
    [RestraintEventReasonTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [RestraintEventReasonType_PK] PRIMARY KEY CLUSTERED (
        [RestraintEventReasonTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RestraintEventReasonType] ADD CONSTRAINT [RestraintEventReasonType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[RestraintEventReasonType] ADD CONSTRAINT [RestraintEventReasonType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[RestraintEventReasonType] ADD CONSTRAINT [RestraintEventReasonType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ResultDatatypeType] --
CREATE TABLE [edfi].[ResultDatatypeType] (
    [ResultDatatypeTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [ResultDatatypeType_PK] PRIMARY KEY CLUSTERED (
        [ResultDatatypeTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[ResultDatatypeType] ADD CONSTRAINT [ResultDatatypeType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[ResultDatatypeType] ADD CONSTRAINT [ResultDatatypeType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[ResultDatatypeType] ADD CONSTRAINT [ResultDatatypeType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[RetestIndicatorType] --
CREATE TABLE [edfi].[RetestIndicatorType] (
    [RetestIndicatorTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [RetestIndicatorType_PK] PRIMARY KEY CLUSTERED (
        [RetestIndicatorTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[RetestIndicatorType] ADD CONSTRAINT [RetestIndicatorType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[RetestIndicatorType] ADD CONSTRAINT [RetestIndicatorType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[RetestIndicatorType] ADD CONSTRAINT [RetestIndicatorType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[School] --
CREATE TABLE [edfi].[School] (
    [SchoolId] [INT] NOT NULL,
    [SchoolTypeId] [INT] NULL,
    [CharterStatusTypeId] [INT] NULL,
    [TitleIPartASchoolDesignationTypeId] [INT] NULL,
    [MagnetSpecialProgramEmphasisSchoolTypeId] [INT] NULL,
    [AdministrativeFundingControlDescriptorId] [INT] NULL,
    [InternetAccessTypeId] [INT] NULL,
    [LocalEducationAgencyId] [INT] NULL,
    [CharterApprovalAgencyTypeId] [INT] NULL,
    [CharterApprovalSchoolYear] [SMALLINT] NULL,
    CONSTRAINT [School_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[SchoolCategory] --
CREATE TABLE [edfi].[SchoolCategory] (
    [SchoolId] [INT] NOT NULL,
    [SchoolCategoryTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [SchoolCategory_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [SchoolCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SchoolCategory] ADD CONSTRAINT [SchoolCategory_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[SchoolCategoryType] --
CREATE TABLE [edfi].[SchoolCategoryType] (
    [SchoolCategoryTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SchoolCategoryType_PK] PRIMARY KEY CLUSTERED (
        [SchoolCategoryTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SchoolCategoryType] ADD CONSTRAINT [SchoolCategoryType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SchoolCategoryType] ADD CONSTRAINT [SchoolCategoryType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SchoolCategoryType] ADD CONSTRAINT [SchoolCategoryType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SchoolChoiceImplementStatusType] --
CREATE TABLE [edfi].[SchoolChoiceImplementStatusType] (
    [SchoolChoiceImplementStatusTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SchoolChoiceImplementStatusType_PK] PRIMARY KEY CLUSTERED (
        [SchoolChoiceImplementStatusTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SchoolChoiceImplementStatusType] ADD CONSTRAINT [SchoolChoiceImplementStatusType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SchoolChoiceImplementStatusType] ADD CONSTRAINT [SchoolChoiceImplementStatusType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SchoolChoiceImplementStatusType] ADD CONSTRAINT [SchoolChoiceImplementStatusType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SchoolFoodServicesEligibilityDescriptor] --
CREATE TABLE [edfi].[SchoolFoodServicesEligibilityDescriptor] (
    [SchoolFoodServicesEligibilityDescriptorId] [INT] NOT NULL,
    [SchoolFoodServicesEligibilityTypeId] [INT] NULL,
    CONSTRAINT [SchoolFoodServicesEligibilityDescriptor_PK] PRIMARY KEY CLUSTERED (
        [SchoolFoodServicesEligibilityDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[SchoolFoodServicesEligibilityType] --
CREATE TABLE [edfi].[SchoolFoodServicesEligibilityType] (
    [SchoolFoodServicesEligibilityTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SchoolFoodServicesEligibilityType_PK] PRIMARY KEY CLUSTERED (
        [SchoolFoodServicesEligibilityTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SchoolFoodServicesEligibilityType] ADD CONSTRAINT [SchoolFoodServicesEligibilityType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SchoolFoodServicesEligibilityType] ADD CONSTRAINT [SchoolFoodServicesEligibilityType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SchoolFoodServicesEligibilityType] ADD CONSTRAINT [SchoolFoodServicesEligibilityType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SchoolGradeLevel] --
CREATE TABLE [edfi].[SchoolGradeLevel] (
    [SchoolId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [SchoolGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SchoolGradeLevel] ADD CONSTRAINT [SchoolGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[SchoolType] --
CREATE TABLE [edfi].[SchoolType] (
    [SchoolTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SchoolType_PK] PRIMARY KEY CLUSTERED (
        [SchoolTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SchoolType] ADD CONSTRAINT [SchoolType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SchoolType] ADD CONSTRAINT [SchoolType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SchoolType] ADD CONSTRAINT [SchoolType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SchoolYearType] --
CREATE TABLE [edfi].[SchoolYearType] (
    [SchoolYear] [SMALLINT] NOT NULL,
    [SchoolYearDescription] [NVARCHAR](50) NOT NULL,
    [CurrentSchoolYear] [BIT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SchoolYearType_PK] PRIMARY KEY CLUSTERED (
        [SchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SchoolYearType] ADD CONSTRAINT [SchoolYearType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SchoolYearType] ADD CONSTRAINT [SchoolYearType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SchoolYearType] ADD CONSTRAINT [SchoolYearType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Section] --
CREATE TABLE [edfi].[Section] (
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [EducationalEnvironmentTypeId] [INT] NULL,
    [MediumOfInstructionTypeId] [INT] NULL,
    [PopulationServedTypeId] [INT] NULL,
    [AvailableCredits] [DECIMAL](9, 2) NULL,
    [AvailableCreditTypeId] [INT] NULL,
    [AvailableCreditConversion] [DECIMAL](9, 2) NULL,
    [InstructionLanguageDescriptorId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Section_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [LocalCourseCode] ASC,
        [TermDescriptorId] ASC,
        [SchoolYear] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Section] ADD CONSTRAINT [Section_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Section] ADD CONSTRAINT [Section_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Section] ADD CONSTRAINT [Section_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SectionAttendanceTakenEvent] --
CREATE TABLE [edfi].[SectionAttendanceTakenEvent] (
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [Date] [DATE] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [StaffUSI] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SectionAttendanceTakenEvent_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [LocalCourseCode] ASC,
        [TermDescriptorId] ASC,
        [SchoolYear] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [Date] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [SectionAttendanceTakenEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [SectionAttendanceTakenEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SectionAttendanceTakenEvent] ADD CONSTRAINT [SectionAttendanceTakenEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SectionCharacteristic] --
CREATE TABLE [edfi].[SectionCharacteristic] (
    [SectionCharacteristicDescriptorId] [INT] NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [SectionCharacteristic_PK] PRIMARY KEY CLUSTERED (
        [SectionCharacteristicDescriptorId] ASC,
        [ClassroomIdentificationCode] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [LocalCourseCode] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SectionCharacteristic] ADD CONSTRAINT [SectionCharacteristic_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[SectionCharacteristicDescriptor] --
CREATE TABLE [edfi].[SectionCharacteristicDescriptor] (
    [SectionCharacteristicDescriptorId] [INT] NOT NULL,
    [SectionCharacteristicTypeId] [INT] NULL,
    CONSTRAINT [SectionCharacteristicDescriptor_PK] PRIMARY KEY CLUSTERED (
        [SectionCharacteristicDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[SectionCharacteristicType] --
CREATE TABLE [edfi].[SectionCharacteristicType] (
    [SectionCharacteristicTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SectionCharacteristicType_PK] PRIMARY KEY CLUSTERED (
        [SectionCharacteristicTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SectionCharacteristicType] ADD CONSTRAINT [SectionCharacteristicType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SectionCharacteristicType] ADD CONSTRAINT [SectionCharacteristicType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SectionCharacteristicType] ADD CONSTRAINT [SectionCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SectionProgram] --
CREATE TABLE [edfi].[SectionProgram] (
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [SectionProgram_PK] PRIMARY KEY CLUSTERED (
        [ClassroomIdentificationCode] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [LocalCourseCode] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SectionProgram] ADD CONSTRAINT [SectionProgram_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[SeparationReasonDescriptor] --
CREATE TABLE [edfi].[SeparationReasonDescriptor] (
    [SeparationReasonDescriptorId] [INT] NOT NULL,
    [SeparationReasonTypeId] [INT] NULL,
    CONSTRAINT [SeparationReasonDescriptor_PK] PRIMARY KEY CLUSTERED (
        [SeparationReasonDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[SeparationReasonType] --
CREATE TABLE [edfi].[SeparationReasonType] (
    [SeparationReasonTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SeparationReasonType_PK] PRIMARY KEY CLUSTERED (
        [SeparationReasonTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SeparationReasonType] ADD CONSTRAINT [SeparationReasonType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SeparationReasonType] ADD CONSTRAINT [SeparationReasonType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SeparationReasonType] ADD CONSTRAINT [SeparationReasonType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SeparationType] --
CREATE TABLE [edfi].[SeparationType] (
    [SeparationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SeparationType_PK] PRIMARY KEY CLUSTERED (
        [SeparationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SeparationType] ADD CONSTRAINT [SeparationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SeparationType] ADD CONSTRAINT [SeparationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SeparationType] ADD CONSTRAINT [SeparationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[ServiceDescriptor] --
CREATE TABLE [edfi].[ServiceDescriptor] (
    [ServiceDescriptorId] [INT] NOT NULL,
    [ServiceCategory] [NVARCHAR](50) NULL,
    CONSTRAINT [ServiceDescriptor_PK] PRIMARY KEY CLUSTERED (
        [ServiceDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[Session] --
CREATE TABLE [edfi].[Session] (
    [SchoolId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [SessionName] [NVARCHAR](60) NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NOT NULL,
    [TotalInstructionalDays] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Session_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Session] ADD CONSTRAINT [Session_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Session] ADD CONSTRAINT [Session_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Session] ADD CONSTRAINT [Session_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SessionAcademicWeek] --
CREATE TABLE [edfi].[SessionAcademicWeek] (
    [SchoolId] [INT] NOT NULL,
    [WeekIdentifier] [NVARCHAR](80) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [SessionAcademicWeek_PK] PRIMARY KEY CLUSTERED (
        [SchoolId] ASC,
        [WeekIdentifier] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SessionAcademicWeek] ADD CONSTRAINT [SessionAcademicWeek_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[SessionGradingPeriod] --
CREATE TABLE [edfi].[SessionGradingPeriod] (
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [SessionGradingPeriod_PK] PRIMARY KEY CLUSTERED (
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [SchoolId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SessionGradingPeriod] ADD CONSTRAINT [SessionGradingPeriod_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[SexType] --
CREATE TABLE [edfi].[SexType] (
    [SexTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SexType_PK] PRIMARY KEY CLUSTERED (
        [SexTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SexType] ADD CONSTRAINT [SexType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SexType] ADD CONSTRAINT [SexType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SexType] ADD CONSTRAINT [SexType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[SpecialEducationSettingDescriptor] --
CREATE TABLE [edfi].[SpecialEducationSettingDescriptor] (
    [SpecialEducationSettingDescriptorId] [INT] NOT NULL,
    [SpecialEducationSettingTypeId] [INT] NULL,
    CONSTRAINT [SpecialEducationSettingDescriptor_PK] PRIMARY KEY CLUSTERED (
        [SpecialEducationSettingDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[SpecialEducationSettingType] --
CREATE TABLE [edfi].[SpecialEducationSettingType] (
    [SpecialEducationSettingTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [SpecialEducationSettingType_PK] PRIMARY KEY CLUSTERED (
        [SpecialEducationSettingTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[SpecialEducationSettingType] ADD CONSTRAINT [SpecialEducationSettingType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[SpecialEducationSettingType] ADD CONSTRAINT [SpecialEducationSettingType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[SpecialEducationSettingType] ADD CONSTRAINT [SpecialEducationSettingType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Staff] --
CREATE TABLE [edfi].[Staff] (
    [StaffUSI] [INT] IDENTITY(1,1) NOT NULL,
    [PersonalTitlePrefix] [NVARCHAR](30) NULL,
    [FirstName] [NVARCHAR](75) NOT NULL,
    [MiddleName] [NVARCHAR](75) NULL,
    [LastSurname] [NVARCHAR](75) NOT NULL,
    [GenerationCodeSuffix] [NVARCHAR](10) NULL,
    [MaidenName] [NVARCHAR](75) NULL,
    [SexTypeId] [INT] NULL,
    [BirthDate] [DATE] NULL,
    [HispanicLatinoEthnicity] [BIT] NOT NULL,
    [OldEthnicityTypeId] [INT] NULL,
    [CitizenshipStatusTypeId] [INT] NULL,
    [HighestCompletedLevelOfEducationDescriptorId] [INT] NULL,
    [YearsOfPriorProfessionalExperience] [DECIMAL](5, 2) NULL,
    [YearsOfPriorTeachingExperience] [DECIMAL](5, 2) NULL,
    [LoginId] [NVARCHAR](60) NULL,
    [HighlyQualifiedTeacher] [BIT] NULL,
    [StaffUniqueId] [NVARCHAR](32) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Staff_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [Staff_UI_StaffUniqueId] ON [edfi].[Staff] (
    [StaffUniqueId] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Staff] ADD CONSTRAINT [Staff_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Staff] ADD CONSTRAINT [Staff_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Staff] ADD CONSTRAINT [Staff_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffAddress] --
CREATE TABLE [edfi].[StaffAddress] (
    [StaffUSI] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [StreetNumberName] [NVARCHAR](150) NOT NULL,
    [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
    [BuildingSiteNumber] [NVARCHAR](20) NULL,
    [City] [NVARCHAR](30) NOT NULL,
    [StateAbbreviationTypeId] [INT] NOT NULL,
    [PostalCode] [NVARCHAR](17) NOT NULL,
    [NameOfCounty] [NVARCHAR](30) NULL,
    [CountyFIPSCode] [NVARCHAR](5) NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffAddress_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffAddress] ADD CONSTRAINT [StaffAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffClassificationDescriptor] --
CREATE TABLE [edfi].[StaffClassificationDescriptor] (
    [StaffClassificationDescriptorId] [INT] NOT NULL,
    [StaffClassificationTypeId] [INT] NULL,
    CONSTRAINT [StaffClassificationDescriptor_PK] PRIMARY KEY CLUSTERED (
        [StaffClassificationDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StaffClassificationType] --
CREATE TABLE [edfi].[StaffClassificationType] (
    [StaffClassificationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffClassificationType_PK] PRIMARY KEY CLUSTERED (
        [StaffClassificationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffClassificationType] ADD CONSTRAINT [StaffClassificationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffClassificationType] ADD CONSTRAINT [StaffClassificationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffClassificationType] ADD CONSTRAINT [StaffClassificationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffCohortAssociation] --
CREATE TABLE [edfi].[StaffCohortAssociation] (
    [StaffUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CohortIdentifier] [NVARCHAR](20) NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NULL,
    [StudentRecordAccess] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffCohortAssociation_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [EducationOrganizationId] ASC,
        [CohortIdentifier] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffCohortAssociation] ADD CONSTRAINT [StaffCohortAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffCohortAssociation] ADD CONSTRAINT [StaffCohortAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffCohortAssociation] ADD CONSTRAINT [StaffCohortAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffCredential] --
CREATE TABLE [edfi].[StaffCredential] (
    [StaffUSI] [INT] NOT NULL,
    [CredentialFieldDescriptorId] [INT] NOT NULL,
    [CredentialTypeId] [INT] NOT NULL,
    [LevelDescriptorId] [INT] NOT NULL,
    [TeachingCredentialDescriptorId] [INT] NOT NULL,
    [CredentialIssuanceDate] [DATE] NOT NULL,
    [CredentialExpirationDate] [DATE] NULL,
    [TeachingCredentialBasisTypeId] [INT] NULL,
    [StateOfIssueStateAbbreviationTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffCredential_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [CredentialFieldDescriptorId] ASC,
        [CredentialTypeId] ASC,
        [LevelDescriptorId] ASC,
        [TeachingCredentialDescriptorId] ASC,
        [CredentialIssuanceDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffCredential] ADD CONSTRAINT [StaffCredential_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffEducationOrganizationAssignmentAssociation] --
CREATE TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] (
    [StaffUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [StaffClassificationDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [PositionTitle] [NVARCHAR](100) NULL,
    [EndDate] [DATE] NULL,
    [OrderOfAssignment] [INT] NULL,
    [EmploymentEducationOrganizationId] [INT] NULL,
    [EmploymentStatusDescriptorId] [INT] NULL,
    [EmploymentHireDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [EducationOrganizationId] ASC,
        [StaffClassificationDescriptorId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] ADD CONSTRAINT [StaffEducationOrganizationAssignmentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffEducationOrganizationEmploymentAssociation] --
CREATE TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] (
    [EducationOrganizationId] [INT] NOT NULL,
    [StaffUSI] [INT] NOT NULL,
    [EmploymentStatusDescriptorId] [INT] NOT NULL,
    [HireDate] [DATE] NOT NULL,
    [EndDate] [DATE] NULL,
    [SeparationTypeId] [INT] NULL,
    [SeparationReasonDescriptorId] [INT] NULL,
    [Department] [NVARCHAR](3) NULL,
    [FullTimeEquivalency] [DECIMAL](5, 4) NULL,
    [OfferDate] [DATE] NULL,
    [HourlyWage] [MONEY] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_PK] PRIMARY KEY CLUSTERED (
        [EducationOrganizationId] ASC,
        [StaffUSI] ASC,
        [EmploymentStatusDescriptorId] ASC,
        [HireDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] ADD CONSTRAINT [StaffEducationOrganizationEmploymentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffElectronicMail] --
CREATE TABLE [edfi].[StaffElectronicMail] (
    [StaffUSI] [INT] NOT NULL,
    [ElectronicMailTypeId] [INT] NOT NULL,
    [ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
    [PrimaryEmailAddressIndicator] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffElectronicMail_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [ElectronicMailTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffElectronicMail] ADD CONSTRAINT [StaffElectronicMail_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffIdentificationCode] --
CREATE TABLE [edfi].[StaffIdentificationCode] (
    [StaffUSI] [INT] NOT NULL,
    [StaffIdentificationSystemDescriptorId] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [StaffIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffIdentificationCode] ADD CONSTRAINT [StaffIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffIdentificationDocument] --
CREATE TABLE [edfi].[StaffIdentificationDocument] (
    [PersonalInformationVerificationTypeId] [INT] NOT NULL,
    [IdentificationDocumentUseTypeId] [INT] NOT NULL,
    [StaffUSI] [INT] NOT NULL,
    [DocumentTitle] [NVARCHAR](60) NULL,
    [DocumentExpirationDate] [DATE] NULL,
    [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
    [IssuerName] [NVARCHAR](150) NULL,
    [IssuerCountryDescriptorId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffIdentificationDocument_PK] PRIMARY KEY CLUSTERED (
        [PersonalInformationVerificationTypeId] ASC,
        [IdentificationDocumentUseTypeId] ASC,
        [StaffUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffIdentificationDocument] ADD CONSTRAINT [StaffIdentificationDocument_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffIdentificationSystemDescriptor] --
CREATE TABLE [edfi].[StaffIdentificationSystemDescriptor] (
    [StaffIdentificationSystemDescriptorId] [INT] NOT NULL,
    [StaffIdentificationSystemTypeId] [INT] NULL,
    CONSTRAINT [StaffIdentificationSystemDescriptor_PK] PRIMARY KEY CLUSTERED (
        [StaffIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StaffIdentificationSystemType] --
CREATE TABLE [edfi].[StaffIdentificationSystemType] (
    [StaffIdentificationSystemTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffIdentificationSystemType_PK] PRIMARY KEY CLUSTERED (
        [StaffIdentificationSystemTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffIdentificationSystemType] ADD CONSTRAINT [StaffIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffIdentificationSystemType] ADD CONSTRAINT [StaffIdentificationSystemType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffIdentificationSystemType] ADD CONSTRAINT [StaffIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffInternationalAddress] --
CREATE TABLE [edfi].[StaffInternationalAddress] (
    [StaffUSI] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [AddressLine1] [NVARCHAR](150) NOT NULL,
    [AddressLine2] [NVARCHAR](150) NULL,
    [AddressLine3] [NVARCHAR](150) NULL,
    [AddressLine4] [NVARCHAR](150) NULL,
    [CountryDescriptorId] [INT] NOT NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffInternationalAddress_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffInternationalAddress] ADD CONSTRAINT [StaffInternationalAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffLanguage] --
CREATE TABLE [edfi].[StaffLanguage] (
    [StaffUSI] [INT] NOT NULL,
    [LanguageDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffLanguage_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [LanguageDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffLanguage] ADD CONSTRAINT [StaffLanguage_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffLanguageUse] --
CREATE TABLE [edfi].[StaffLanguageUse] (
    [StaffUSI] [INT] NOT NULL,
    [LanguageDescriptorId] [INT] NOT NULL,
    [LanguageUseTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffLanguageUse_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [LanguageDescriptorId] ASC,
        [LanguageUseTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffLanguageUse] ADD CONSTRAINT [StaffLanguageUse_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffOtherName] --
CREATE TABLE [edfi].[StaffOtherName] (
    [StaffUSI] [INT] NOT NULL,
    [OtherNameTypeId] [INT] NOT NULL,
    [PersonalTitlePrefix] [NVARCHAR](30) NULL,
    [FirstName] [NVARCHAR](75) NOT NULL,
    [MiddleName] [NVARCHAR](75) NULL,
    [LastSurname] [NVARCHAR](75) NOT NULL,
    [GenerationCodeSuffix] [NVARCHAR](10) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffOtherName_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [OtherNameTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffOtherName] ADD CONSTRAINT [StaffOtherName_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffProgramAssociation] --
CREATE TABLE [edfi].[StaffProgramAssociation] (
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [StaffUSI] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [EndDate] [DATE] NULL,
    [StudentRecordAccess] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffProgramAssociation_PK] PRIMARY KEY CLUSTERED (
        [ProgramEducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [StaffUSI] ASC,
        [BeginDate] ASC,
        [ProgramName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffProgramAssociation] ADD CONSTRAINT [StaffProgramAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffProgramAssociation] ADD CONSTRAINT [StaffProgramAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffProgramAssociation] ADD CONSTRAINT [StaffProgramAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffRace] --
CREATE TABLE [edfi].[StaffRace] (
    [StaffUSI] [INT] NOT NULL,
    [RaceTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffRace_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [RaceTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffRace] ADD CONSTRAINT [StaffRace_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffSchoolAssociation] --
CREATE TABLE [edfi].[StaffSchoolAssociation] (
    [StaffUSI] [INT] NOT NULL,
    [ProgramAssignmentDescriptorId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffSchoolAssociation_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [ProgramAssignmentDescriptorId] ASC,
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffSchoolAssociation] ADD CONSTRAINT [StaffSchoolAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffSchoolAssociation] ADD CONSTRAINT [StaffSchoolAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffSchoolAssociation] ADD CONSTRAINT [StaffSchoolAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffSchoolAssociationAcademicSubject] --
CREATE TABLE [edfi].[StaffSchoolAssociationAcademicSubject] (
    [StaffUSI] [INT] NOT NULL,
    [ProgramAssignmentDescriptorId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffSchoolAssociationAcademicSubject_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [ProgramAssignmentDescriptorId] ASC,
        [SchoolId] ASC,
        [AcademicSubjectDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] ADD CONSTRAINT [StaffSchoolAssociationAcademicSubject_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffSchoolAssociationGradeLevel] --
CREATE TABLE [edfi].[StaffSchoolAssociationGradeLevel] (
    [StaffUSI] [INT] NOT NULL,
    [ProgramAssignmentDescriptorId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffSchoolAssociationGradeLevel_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [ProgramAssignmentDescriptorId] ASC,
        [SchoolId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] ADD CONSTRAINT [StaffSchoolAssociationGradeLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffSectionAssociation] --
CREATE TABLE [edfi].[StaffSectionAssociation] (
    [StaffUSI] [INT] NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [ClassroomPositionDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [HighlyQualifiedTeacher] [BIT] NULL,
    [TeacherStudentDataLinkExclusion] [BIT] NULL,
    [PercentageContribution] [DECIMAL](5, 4) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StaffSectionAssociation_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [ClassroomIdentificationCode] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [LocalCourseCode] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffSectionAssociation] ADD CONSTRAINT [StaffSectionAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StaffSectionAssociation] ADD CONSTRAINT [StaffSectionAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StaffSectionAssociation] ADD CONSTRAINT [StaffSectionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StaffTelephone] --
CREATE TABLE [edfi].[StaffTelephone] (
    [StaffUSI] [INT] NOT NULL,
    [TelephoneNumberTypeId] [INT] NOT NULL,
    [TelephoneNumber] [NVARCHAR](24) NOT NULL,
    [OrderOfPriority] [INT] NULL,
    [TextMessageCapabilityIndicator] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffTelephone_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [TelephoneNumberTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffTelephone] ADD CONSTRAINT [StaffTelephone_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StaffVisa] --
CREATE TABLE [edfi].[StaffVisa] (
    [StaffUSI] [INT] NOT NULL,
    [VisaTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StaffVisa_PK] PRIMARY KEY CLUSTERED (
        [StaffUSI] ASC,
        [VisaTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StaffVisa] ADD CONSTRAINT [StaffVisa_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StateAbbreviationType] --
CREATE TABLE [edfi].[StateAbbreviationType] (
    [StateAbbreviationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StateAbbreviationType_PK] PRIMARY KEY CLUSTERED (
        [StateAbbreviationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StateAbbreviationType] ADD CONSTRAINT [StateAbbreviationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StateAbbreviationType] ADD CONSTRAINT [StateAbbreviationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StateAbbreviationType] ADD CONSTRAINT [StateAbbreviationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StateEducationAgency] --
CREATE TABLE [edfi].[StateEducationAgency] (
    [StateEducationAgencyId] [INT] NOT NULL,
    CONSTRAINT [StateEducationAgency_PK] PRIMARY KEY CLUSTERED (
        [StateEducationAgencyId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StateEducationAgencyAccountability] --
CREATE TABLE [edfi].[StateEducationAgencyAccountability] (
    [StateEducationAgencyId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [CTEGraduationRateInclusion] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StateEducationAgencyAccountability_PK] PRIMARY KEY CLUSTERED (
        [StateEducationAgencyId] ASC,
        [SchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StateEducationAgencyAccountability] ADD CONSTRAINT [StateEducationAgencyAccountability_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StateEducationAgencyFederalFunds] --
CREATE TABLE [edfi].[StateEducationAgencyFederalFunds] (
    [StateEducationAgencyId] [INT] NOT NULL,
    [FiscalYear] [INT] NOT NULL,
    [FederalProgramsFundingAllocation] [MONEY] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StateEducationAgencyFederalFunds_PK] PRIMARY KEY CLUSTERED (
        [StateEducationAgencyId] ASC,
        [FiscalYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [StateEducationAgencyFederalFunds_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [StateEducationAgencyFederalFunds_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StateEducationAgencyFederalFunds] ADD CONSTRAINT [StateEducationAgencyFederalFunds_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[Student] --
CREATE TABLE [edfi].[Student] (
    [StudentUSI] [INT] IDENTITY(1,1) NOT NULL,
    [PersonalTitlePrefix] [NVARCHAR](30) NULL,
    [FirstName] [NVARCHAR](75) NOT NULL,
    [MiddleName] [NVARCHAR](75) NULL,
    [LastSurname] [NVARCHAR](75) NOT NULL,
    [GenerationCodeSuffix] [NVARCHAR](10) NULL,
    [MaidenName] [NVARCHAR](75) NULL,
    [SexTypeId] [INT] NOT NULL,
    [BirthDate] [DATE] NOT NULL,
    [BirthCity] [NVARCHAR](30) NULL,
    [BirthStateAbbreviationTypeId] [INT] NULL,
    [BirthInternationalProvince] [NVARCHAR](150) NULL,
    [BirthCountryDescriptorId] [INT] NULL,
    [DateEnteredUS] [DATE] NULL,
    [MultipleBirthStatus] [BIT] NULL,
    [ProfileThumbnail] [NVARCHAR](59) NULL,
    [HispanicLatinoEthnicity] [BIT] NOT NULL,
    [OldEthnicityTypeId] [INT] NULL,
    [CitizenshipStatusTypeId] [INT] NULL,
    [EconomicDisadvantaged] [BIT] NULL,
    [SchoolFoodServicesEligibilityDescriptorId] [INT] NULL,
    [LimitedEnglishProficiencyDescriptorId] [INT] NULL,
    [DisplacementStatus] [NVARCHAR](30) NULL,
    [LoginId] [NVARCHAR](60) NULL,
    [StudentUniqueId] [NVARCHAR](32) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [Student_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [Student_UI_StudentUniqueId] ON [edfi].[Student] (
    [StudentUniqueId] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [edfi].[Student] ADD CONSTRAINT [Student_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[Student] ADD CONSTRAINT [Student_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[Student] ADD CONSTRAINT [Student_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentAcademicRecord] --
CREATE TABLE [edfi].[StudentAcademicRecord] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [CumulativeEarnedCredits] [DECIMAL](9, 2) NULL,
    [CumulativeEarnedCreditTypeId] [INT] NULL,
    [CumulativeEarnedCreditConversion] [DECIMAL](9, 2) NULL,
    [CumulativeAttemptedCredits] [DECIMAL](9, 2) NULL,
    [CumulativeAttemptedCreditTypeId] [INT] NULL,
    [CumulativeAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
    [CumulativeGradePointsEarned] [DECIMAL](18, 4) NULL,
    [CumulativeGradePointAverage] [DECIMAL](18, 4) NULL,
    [GradeValueQualifier] [NVARCHAR](80) NULL,
    [ProjectedGraduationDate] [DATE] NULL,
    [SessionEarnedCredits] [DECIMAL](9, 2) NULL,
    [SessionEarnedCreditTypeId] [INT] NULL,
    [SessionEarnedCreditConversion] [DECIMAL](9, 2) NULL,
    [SessionAttemptedCredits] [DECIMAL](9, 2) NULL,
    [SessionAttemptedCreditTypeId] [INT] NULL,
    [SessionAttemptedCreditConversion] [DECIMAL](9, 2) NULL,
    [SessionGradePointsEarned] [DECIMAL](18, 4) NULL,
    [SessionGradePointAverage] [DECIMAL](18, 4) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentAcademicRecord_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [StudentAcademicRecord_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [StudentAcademicRecord_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentAcademicRecord] ADD CONSTRAINT [StudentAcademicRecord_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentAcademicRecordAcademicHonor] --
CREATE TABLE [edfi].[StudentAcademicRecordAcademicHonor] (
    [AcademicHonorCategoryTypeId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [AchievementTitle] [NVARCHAR](60) NULL,
    [AchievementCategoryDescriptorId] [INT] NULL,
    [AchievementCategorySystem] [NVARCHAR](60) NULL,
    [IssuerName] [NVARCHAR](150) NULL,
    [IssuerOriginURL] [NVARCHAR](255) NULL,
    [Criteria] [NVARCHAR](150) NULL,
    [CriteriaURL] [NVARCHAR](255) NULL,
    [EvidenceStatement] [NVARCHAR](150) NULL,
    [ImageURL] [NVARCHAR](255) NULL,
    [HonorDescription] [NVARCHAR](80) NULL,
    [HonorAwardDate] [DATE] NULL,
    [HonorAwardExpiresDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAcademicRecordAcademicHonor_PK] PRIMARY KEY CLUSTERED (
        [AcademicHonorCategoryTypeId] ASC,
        [StudentUSI] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] ADD CONSTRAINT [StudentAcademicRecordAcademicHonor_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAcademicRecordClassRanking] --
CREATE TABLE [edfi].[StudentAcademicRecordClassRanking] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ClassRank] [INT] NOT NULL,
    [TotalNumberInClass] [INT] NOT NULL,
    [PercentageRanking] [INT] NULL,
    [ClassRankingDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAcademicRecordClassRanking_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAcademicRecordClassRanking] ADD CONSTRAINT [StudentAcademicRecordClassRanking_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAcademicRecordDiploma] --
CREATE TABLE [edfi].[StudentAcademicRecordDiploma] (
    [StudentUSI] [INT] NOT NULL,
    [DiplomaTypeId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [DiplomaAwardDate] [DATE] NOT NULL,
    [AchievementTitle] [NVARCHAR](60) NULL,
    [AchievementCategoryDescriptorId] [INT] NULL,
    [AchievementCategorySystem] [NVARCHAR](60) NULL,
    [IssuerName] [NVARCHAR](150) NULL,
    [IssuerOriginURL] [NVARCHAR](255) NULL,
    [Criteria] [NVARCHAR](150) NULL,
    [CriteriaURL] [NVARCHAR](255) NULL,
    [EvidenceStatement] [NVARCHAR](150) NULL,
    [ImageURL] [NVARCHAR](255) NULL,
    [DiplomaLevelTypeId] [INT] NULL,
    [CTECompleter] [BIT] NULL,
    [DiplomaDescription] [NVARCHAR](80) NULL,
    [DiplomaAwardExpiresDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAcademicRecordDiploma_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [DiplomaTypeId] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [EducationOrganizationId] ASC,
        [DiplomaAwardDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAcademicRecordDiploma] ADD CONSTRAINT [StudentAcademicRecordDiploma_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAcademicRecordRecognition] --
CREATE TABLE [edfi].[StudentAcademicRecordRecognition] (
    [RecognitionTypeId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [AchievementTitle] [NVARCHAR](60) NULL,
    [AchievementCategoryDescriptorId] [INT] NULL,
    [AchievementCategorySystem] [NVARCHAR](60) NULL,
    [IssuerName] [NVARCHAR](150) NULL,
    [IssuerOriginURL] [NVARCHAR](255) NULL,
    [Criteria] [NVARCHAR](150) NULL,
    [CriteriaURL] [NVARCHAR](255) NULL,
    [EvidenceStatement] [NVARCHAR](150) NULL,
    [ImageURL] [NVARCHAR](255) NULL,
    [RecognitionDescription] [NVARCHAR](80) NULL,
    [RecognitionAwardDate] [DATE] NULL,
    [RecognitionAwardExpiresDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAcademicRecordRecognition_PK] PRIMARY KEY CLUSTERED (
        [RecognitionTypeId] ASC,
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAcademicRecordRecognition] ADD CONSTRAINT [StudentAcademicRecordRecognition_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAcademicRecordReportCard] --
CREATE TABLE [edfi].[StudentAcademicRecordReportCard] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAcademicRecordReportCard_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [EducationOrganizationId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC,
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAcademicRecordReportCard] ADD CONSTRAINT [StudentAcademicRecordReportCard_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAddress] --
CREATE TABLE [edfi].[StudentAddress] (
    [StudentUSI] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [StreetNumberName] [NVARCHAR](150) NOT NULL,
    [ApartmentRoomSuiteNumber] [NVARCHAR](50) NULL,
    [BuildingSiteNumber] [NVARCHAR](20) NULL,
    [City] [NVARCHAR](30) NOT NULL,
    [StateAbbreviationTypeId] [INT] NOT NULL,
    [PostalCode] [NVARCHAR](17) NOT NULL,
    [NameOfCounty] [NVARCHAR](30) NULL,
    [CountyFIPSCode] [NVARCHAR](5) NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAddress_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAddress] ADD CONSTRAINT [StudentAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAssessment] --
CREATE TABLE [edfi].[StudentAssessment] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [AdministrationEndDate] [DATE] NULL,
    [SerialNumber] [NVARCHAR](60) NULL,
    [AdministrationLanguageDescriptorId] [INT] NULL,
    [AdministrationEnvironmentTypeId] [INT] NULL,
    [RetestIndicatorTypeId] [INT] NULL,
    [ReasonNotTestedTypeId] [INT] NULL,
    [WhenAssessedGradeLevelDescriptorId] [INT] NULL,
    [EventCircumstanceTypeId] [INT] NULL,
    [EventDescription] [NVARCHAR](1024) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentAssessment_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [AdministrationDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [StudentAssessment_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [StudentAssessment_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentAssessment] ADD CONSTRAINT [StudentAssessment_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentAssessmentAccommodation] --
CREATE TABLE [edfi].[StudentAssessmentAccommodation] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [AccommodationDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAssessmentAccommodation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [AdministrationDate] ASC,
        [AccommodationDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessmentAccommodation] ADD CONSTRAINT [StudentAssessmentAccommodation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAssessmentItem] --
CREATE TABLE [edfi].[StudentAssessmentItem] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [AssessmentResponse] [NVARCHAR](60) NULL,
    [DescriptiveFeedback] [NVARCHAR](1024) NULL,
    [ResponseIndicatorTypeId] [INT] NULL,
    [AssessmentItemResultTypeId] [INT] NOT NULL,
    [RawScoreResult] [INT] NULL,
    [TimeAssessed] [NVARCHAR](30) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAssessmentItem_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [AdministrationDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessmentItem] ADD CONSTRAINT [StudentAssessmentItem_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAssessmentPerformanceLevel] --
CREATE TABLE [edfi].[StudentAssessmentPerformanceLevel] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [PerformanceLevelDescriptorId] [INT] NOT NULL,
    [PerformanceLevelMet] [BIT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAssessmentPerformanceLevel_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [AdministrationDate] ASC,
        [PerformanceLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] ADD CONSTRAINT [StudentAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAssessmentScoreResult] --
CREATE TABLE [edfi].[StudentAssessmentScoreResult] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [Result] [NVARCHAR](35) NOT NULL,
    [ResultDatatypeTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAssessmentScoreResult_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [AdministrationDate] ASC,
        [AssessmentReportingMethodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessmentScoreResult] ADD CONSTRAINT [StudentAssessmentScoreResult_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAssessmentStudentObjectiveAssessment] --
CREATE TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAssessmentStudentObjectiveAssessment_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [AdministrationDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessment_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] --
CREATE TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [PerformanceLevelDescriptorId] [INT] NOT NULL,
    [PerformanceLevelMet] [BIT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [AdministrationDate] ASC,
        [PerformanceLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] --
CREATE TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] (
    [StudentUSI] [INT] NOT NULL,
    [AssessmentTitle] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [AssessedGradeLevelDescriptorId] [INT] NOT NULL,
    [Version] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [AdministrationDate] [DATE] NOT NULL,
    [AssessmentReportingMethodTypeId] [INT] NOT NULL,
    [Result] [NVARCHAR](35) NOT NULL,
    [ResultDatatypeTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentScoreResult_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssessmentTitle] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [AssessedGradeLevelDescriptorId] ASC,
        [Version] ASC,
        [IdentificationCode] ASC,
        [AdministrationDate] ASC,
        [AssessmentReportingMethodTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ADD CONSTRAINT [StudentAssessmentStudentObjectiveAssessmentScoreResult_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentCharacteristic] --
CREATE TABLE [edfi].[StudentCharacteristic] (
    [StudentUSI] [INT] NOT NULL,
    [StudentCharacteristicDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [DesignatedBy] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentCharacteristic_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [StudentCharacteristicDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentCharacteristic] ADD CONSTRAINT [StudentCharacteristic_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentCharacteristicDescriptor] --
CREATE TABLE [edfi].[StudentCharacteristicDescriptor] (
    [StudentCharacteristicDescriptorId] [INT] NOT NULL,
    [StudentCharacteristicTypeId] [INT] NULL,
    CONSTRAINT [StudentCharacteristicDescriptor_PK] PRIMARY KEY CLUSTERED (
        [StudentCharacteristicDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StudentCharacteristicType] --
CREATE TABLE [edfi].[StudentCharacteristicType] (
    [StudentCharacteristicTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentCharacteristicType_PK] PRIMARY KEY CLUSTERED (
        [StudentCharacteristicTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentCharacteristicType] ADD CONSTRAINT [StudentCharacteristicType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentCharacteristicType] ADD CONSTRAINT [StudentCharacteristicType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentCharacteristicType] ADD CONSTRAINT [StudentCharacteristicType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentCohortAssociation] --
CREATE TABLE [edfi].[StudentCohortAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CohortIdentifier] [NVARCHAR](20) NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentCohortAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [CohortIdentifier] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentCohortAssociation] ADD CONSTRAINT [StudentCohortAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentCohortAssociation] ADD CONSTRAINT [StudentCohortAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentCohortAssociation] ADD CONSTRAINT [StudentCohortAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentCohortAssociationSection] --
CREATE TABLE [edfi].[StudentCohortAssociationSection] (
    [StudentUSI] [INT] NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CohortIdentifier] [NVARCHAR](20) NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentCohortAssociationSection_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ClassroomIdentificationCode] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [LocalCourseCode] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [EducationOrganizationId] ASC,
        [CohortIdentifier] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentCohortAssociationSection] ADD CONSTRAINT [StudentCohortAssociationSection_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentCohortYear] --
CREATE TABLE [edfi].[StudentCohortYear] (
    [StudentUSI] [INT] NOT NULL,
    [CohortYearTypeId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentCohortYear_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [CohortYearTypeId] ASC,
        [SchoolYear] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentCohortYear] ADD CONSTRAINT [StudentCohortYear_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentCompetencyObjective] --
CREATE TABLE [edfi].[StudentCompetencyObjective] (
    [StudentUSI] [INT] NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [ObjectiveEducationOrganizationId] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [CompetencyLevelDescriptorId] [INT] NOT NULL,
    [DiagnosticStatement] [NVARCHAR](1024) NULL,
    [UniqueSectionCode] [NVARCHAR](255) NULL,
    [SequenceOfCourse] [INT] NULL,
    [LocalCourseCode] [NVARCHAR](60) NULL,
    [SchoolYear] [SMALLINT] NULL,
    [TermDescriptorId] [INT] NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NULL,
    [ClassPeriodName] [NVARCHAR](20) NULL,
    [ProgramEducationOrganizationId] [INT] NULL,
    [ProgramName] [NVARCHAR](60) NULL,
    [ProgramTypeId] [INT] NULL,
    [BeginDate] [DATE] NULL,
    [EducationOrganizationId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentCompetencyObjective_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [Objective] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [ObjectiveEducationOrganizationId] ASC,
        [SchoolId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [StudentCompetencyObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [StudentCompetencyObjective_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentCompetencyObjective] ADD CONSTRAINT [StudentCompetencyObjective_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentCTEProgramAssociation] --
CREATE TABLE [edfi].[StudentCTEProgramAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    CONSTRAINT [StudentCTEProgramAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StudentCTEProgramAssociationCTEProgram] --
CREATE TABLE [edfi].[StudentCTEProgramAssociationCTEProgram] (
    [StudentUSI] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [CareerPathwayTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CIPCode] [NVARCHAR](120) NULL,
    [PrimaryCTEProgramIndicator] [BIT] NULL,
    [CTEProgramCompletionIndicator] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentCTEProgramAssociationCTEProgram_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ProgramTypeId] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC,
        [CareerPathwayTypeId] ASC,
        [ProgramName] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentCTEProgramAssociationCTEProgram] ADD CONSTRAINT [StudentCTEProgramAssociationCTEProgram_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentDisability] --
CREATE TABLE [edfi].[StudentDisability] (
    [StudentUSI] [INT] NOT NULL,
    [DisabilityDescriptorId] [INT] NOT NULL,
    [DisabilityDiagnosis] [NVARCHAR](80) NULL,
    [OrderOfDisability] [INT] NULL,
    [DisabilityDeterminationSourceTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentDisability_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [DisabilityDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentDisability] ADD CONSTRAINT [StudentDisability_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentDisciplineIncidentAssociation] --
CREATE TABLE [edfi].[StudentDisciplineIncidentAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL,
    [StudentParticipationCodeTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentDisciplineIncidentAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [IncidentIdentifier] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [StudentDisciplineIncidentAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [StudentDisciplineIncidentAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] ADD CONSTRAINT [StudentDisciplineIncidentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentDisciplineIncidentAssociationBehavior] --
CREATE TABLE [edfi].[StudentDisciplineIncidentAssociationBehavior] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [IncidentIdentifier] [NVARCHAR](20) NOT NULL,
    [BehaviorDescriptorId] [INT] NOT NULL,
    [BehaviorDetailedDescription] [NVARCHAR](1024) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentDisciplineIncidentAssociationBehavior_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [IncidentIdentifier] ASC,
        [BehaviorDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentDisciplineIncidentAssociationBehavior] ADD CONSTRAINT [StudentDisciplineIncidentAssociationBehavior_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentEducationOrganizationAssociation] --
CREATE TABLE [edfi].[StudentEducationOrganizationAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ResponsibilityDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentEducationOrganizationAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [ResponsibilityDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [StudentEducationOrganizationAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [StudentEducationOrganizationAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] ADD CONSTRAINT [StudentEducationOrganizationAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentElectronicMail] --
CREATE TABLE [edfi].[StudentElectronicMail] (
    [StudentUSI] [INT] NOT NULL,
    [ElectronicMailTypeId] [INT] NOT NULL,
    [ElectronicMailAddress] [NVARCHAR](128) NOT NULL,
    [PrimaryEmailAddressIndicator] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentElectronicMail_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ElectronicMailTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentElectronicMail] ADD CONSTRAINT [StudentElectronicMail_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentGradebookEntry] --
CREATE TABLE [edfi].[StudentGradebookEntry] (
    [StudentUSI] [INT] NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [GradebookEntryTitle] [NVARCHAR](60) NOT NULL,
    [DateAssigned] [DATE] NOT NULL,
    [DateFulfilled] [DATE] NULL,
    [LetterGradeEarned] [NVARCHAR](20) NULL,
    [NumericGradeEarned] [DECIMAL](9, 2) NULL,
    [CompetencyLevelDescriptorId] [INT] NULL,
    [DiagnosticStatement] [NVARCHAR](1024) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentGradebookEntry_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ClassroomIdentificationCode] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [LocalCourseCode] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [BeginDate] ASC,
        [GradebookEntryTitle] ASC,
        [DateAssigned] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentGradebookEntry] ADD CONSTRAINT [StudentGradebookEntry_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentGradebookEntry] ADD CONSTRAINT [StudentGradebookEntry_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentGradebookEntry] ADD CONSTRAINT [StudentGradebookEntry_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentIdentificationCode] --
CREATE TABLE [edfi].[StudentIdentificationCode] (
    [StudentUSI] [INT] NOT NULL,
    [AssigningOrganizationIdentificationCode] [NVARCHAR](60) NOT NULL,
    [StudentIdentificationSystemDescriptorId] [INT] NOT NULL,
    [IdentificationCode] [NVARCHAR](60) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentIdentificationCode_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AssigningOrganizationIdentificationCode] ASC,
        [StudentIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentIdentificationCode] ADD CONSTRAINT [StudentIdentificationCode_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentIdentificationDocument] --
CREATE TABLE [edfi].[StudentIdentificationDocument] (
    [PersonalInformationVerificationTypeId] [INT] NOT NULL,
    [IdentificationDocumentUseTypeId] [INT] NOT NULL,
    [StudentUSI] [INT] NOT NULL,
    [DocumentTitle] [NVARCHAR](60) NULL,
    [DocumentExpirationDate] [DATE] NULL,
    [IssuerDocumentIdentificationCode] [NVARCHAR](60) NULL,
    [IssuerName] [NVARCHAR](150) NULL,
    [IssuerCountryDescriptorId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentIdentificationDocument_PK] PRIMARY KEY CLUSTERED (
        [PersonalInformationVerificationTypeId] ASC,
        [IdentificationDocumentUseTypeId] ASC,
        [StudentUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentIdentificationDocument] ADD CONSTRAINT [StudentIdentificationDocument_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentIdentificationSystemDescriptor] --
CREATE TABLE [edfi].[StudentIdentificationSystemDescriptor] (
    [StudentIdentificationSystemDescriptorId] [INT] NOT NULL,
    [StudentIdentificationSystemTypeId] [INT] NULL,
    CONSTRAINT [StudentIdentificationSystemDescriptor_PK] PRIMARY KEY CLUSTERED (
        [StudentIdentificationSystemDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StudentIdentificationSystemType] --
CREATE TABLE [edfi].[StudentIdentificationSystemType] (
    [StudentIdentificationSystemTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentIdentificationSystemType_PK] PRIMARY KEY CLUSTERED (
        [StudentIdentificationSystemTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentIdentificationSystemType] ADD CONSTRAINT [StudentIdentificationSystemType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentIdentificationSystemType] ADD CONSTRAINT [StudentIdentificationSystemType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentIdentificationSystemType] ADD CONSTRAINT [StudentIdentificationSystemType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentIndicator] --
CREATE TABLE [edfi].[StudentIndicator] (
    [StudentUSI] [INT] NOT NULL,
    [IndicatorName] [NVARCHAR](60) NOT NULL,
    [IndicatorGroup] [NVARCHAR](60) NULL,
    [Indicator] [NVARCHAR](35) NOT NULL,
    [BeginDate] [DATETIME] NULL,
    [EndDate] [DATETIME] NULL,
    [DesignatedBy] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentIndicator_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [IndicatorName] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentIndicator] ADD CONSTRAINT [StudentIndicator_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentInternationalAddress] --
CREATE TABLE [edfi].[StudentInternationalAddress] (
    [StudentUSI] [INT] NOT NULL,
    [AddressTypeId] [INT] NOT NULL,
    [AddressLine1] [NVARCHAR](150) NOT NULL,
    [AddressLine2] [NVARCHAR](150) NULL,
    [AddressLine3] [NVARCHAR](150) NULL,
    [AddressLine4] [NVARCHAR](150) NULL,
    [CountryDescriptorId] [INT] NOT NULL,
    [Latitude] [NVARCHAR](20) NULL,
    [Longitude] [NVARCHAR](20) NULL,
    [BeginDate] [DATE] NULL,
    [EndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentInternationalAddress_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [AddressTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentInternationalAddress] ADD CONSTRAINT [StudentInternationalAddress_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentInterventionAssociation] --
CREATE TABLE [edfi].[StudentInterventionAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [CohortIdentifier] [NVARCHAR](20) NULL,
    [CohortEducationOrganizationId] [INT] NULL,
    [DiagnosticStatement] [NVARCHAR](1024) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentInterventionAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentInterventionAssociation] ADD CONSTRAINT [StudentInterventionAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentInterventionAssociation] ADD CONSTRAINT [StudentInterventionAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentInterventionAssociation] ADD CONSTRAINT [StudentInterventionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentInterventionAssociationInterventionEffectiveness] --
CREATE TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] (
    [StudentUSI] [INT] NOT NULL,
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [DiagnosisDescriptorId] [INT] NOT NULL,
    [PopulationServedTypeId] [INT] NOT NULL,
    [GradeLevelDescriptorId] [INT] NOT NULL,
    [ImprovementIndex] [INT] NULL,
    [InterventionEffectivenessRatingTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentInterventionAssociationInterventionEffectiveness_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [DiagnosisDescriptorId] ASC,
        [PopulationServedTypeId] ASC,
        [GradeLevelDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] ADD CONSTRAINT [StudentInterventionAssociationInterventionEffectiveness_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentInterventionAttendanceEvent] --
CREATE TABLE [edfi].[StudentInterventionAttendanceEvent] (
    [StudentUSI] [INT] NOT NULL,
    [InterventionIdentificationCode] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [AttendanceEventCategoryDescriptorId] [INT] NOT NULL,
    [AttendanceEventReason] [NVARCHAR](40) NULL,
    [EducationalEnvironmentTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentInterventionAttendanceEvent_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [InterventionIdentificationCode] ASC,
        [EducationOrganizationId] ASC,
        [EventDate] ASC,
        [AttendanceEventCategoryDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [StudentInterventionAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [StudentInterventionAttendanceEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] ADD CONSTRAINT [StudentInterventionAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentLanguage] --
CREATE TABLE [edfi].[StudentLanguage] (
    [StudentUSI] [INT] NOT NULL,
    [LanguageDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentLanguage_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [LanguageDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentLanguage] ADD CONSTRAINT [StudentLanguage_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentLanguageUse] --
CREATE TABLE [edfi].[StudentLanguageUse] (
    [StudentUSI] [INT] NOT NULL,
    [LanguageDescriptorId] [INT] NOT NULL,
    [LanguageUseTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentLanguageUse_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [LanguageDescriptorId] ASC,
        [LanguageUseTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentLanguageUse] ADD CONSTRAINT [StudentLanguageUse_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentLearningObjective] --
CREATE TABLE [edfi].[StudentLearningObjective] (
    [StudentUSI] [INT] NOT NULL,
    [Objective] [NVARCHAR](60) NOT NULL,
    [AcademicSubjectDescriptorId] [INT] NOT NULL,
    [ObjectiveGradeLevelDescriptorId] [INT] NOT NULL,
    [GradingPeriodDescriptorId] [INT] NOT NULL,
    [GradingPeriodBeginDate] [DATE] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [CompetencyLevelDescriptorId] [INT] NOT NULL,
    [DiagnosticStatement] [NVARCHAR](1024) NULL,
    [UniqueSectionCode] [NVARCHAR](255) NULL,
    [SequenceOfCourse] [INT] NULL,
    [LocalCourseCode] [NVARCHAR](60) NULL,
    [SchoolYear] [SMALLINT] NULL,
    [TermDescriptorId] [INT] NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NULL,
    [ClassPeriodName] [NVARCHAR](20) NULL,
    [ProgramEducationOrganizationId] [INT] NULL,
    [ProgramName] [NVARCHAR](60) NULL,
    [ProgramTypeId] [INT] NULL,
    [BeginDate] [DATE] NULL,
    [EducationOrganizationId] [INT] NULL,
    [StudentSectionAssociationBeginDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentLearningObjective_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [Objective] ASC,
        [AcademicSubjectDescriptorId] ASC,
        [ObjectiveGradeLevelDescriptorId] ASC,
        [GradingPeriodDescriptorId] ASC,
        [GradingPeriodBeginDate] ASC,
        [SchoolId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [StudentLearningObjective_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [StudentLearningObjective_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentLearningObjective] ADD CONSTRAINT [StudentLearningObjective_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentLearningStyle] --
CREATE TABLE [edfi].[StudentLearningStyle] (
    [StudentUSI] [INT] NOT NULL,
    [VisualLearning] [DECIMAL](5, 4) NOT NULL,
    [AuditoryLearning] [DECIMAL](5, 4) NOT NULL,
    [TactileLearning] [DECIMAL](5, 4) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentLearningStyle_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentLearningStyle] ADD CONSTRAINT [StudentLearningStyle_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentMigrantEducationProgramAssociation] --
CREATE TABLE [edfi].[StudentMigrantEducationProgramAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [PriorityForServices] [BIT] NOT NULL,
    [LastQualifyingMove] [DATE] NOT NULL,
    [ContinuationOfServicesReasonDescriptorId] [INT] NULL,
    [USInitialEntry] [DATE] NULL,
    [USMostRecentEntry] [DATE] NULL,
    [USInitialSchoolEntry] [DATE] NULL,
    CONSTRAINT [StudentMigrantEducationProgramAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StudentOtherName] --
CREATE TABLE [edfi].[StudentOtherName] (
    [StudentUSI] [INT] NOT NULL,
    [OtherNameTypeId] [INT] NOT NULL,
    [PersonalTitlePrefix] [NVARCHAR](30) NULL,
    [FirstName] [NVARCHAR](75) NOT NULL,
    [MiddleName] [NVARCHAR](75) NULL,
    [LastSurname] [NVARCHAR](75) NOT NULL,
    [GenerationCodeSuffix] [NVARCHAR](10) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentOtherName_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [OtherNameTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentOtherName] ADD CONSTRAINT [StudentOtherName_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentParentAssociation] --
CREATE TABLE [edfi].[StudentParentAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [ParentUSI] [INT] NOT NULL,
    [RelationTypeId] [INT] NULL,
    [PrimaryContactStatus] [BIT] NULL,
    [LivesWith] [BIT] NULL,
    [EmergencyContactStatus] [BIT] NULL,
    [ContactPriority] [INT] NULL,
    [ContactRestrictions] [NVARCHAR](250) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentParentAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ParentUSI] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentParentAssociation] ADD CONSTRAINT [StudentParentAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentParentAssociation] ADD CONSTRAINT [StudentParentAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentParentAssociation] ADD CONSTRAINT [StudentParentAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentParticipationCodeType] --
CREATE TABLE [edfi].[StudentParticipationCodeType] (
    [StudentParticipationCodeTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentParticipationCodeType_PK] PRIMARY KEY CLUSTERED (
        [StudentParticipationCodeTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentParticipationCodeType] ADD CONSTRAINT [StudentParticipationCodeType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentParticipationCodeType] ADD CONSTRAINT [StudentParticipationCodeType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentParticipationCodeType] ADD CONSTRAINT [StudentParticipationCodeType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentProgramAssociation] --
CREATE TABLE [edfi].[StudentProgramAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NULL,
    [ReasonExitedDescriptorId] [INT] NULL,
    [ServedOutsideOfRegularSession] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentProgramAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentProgramAssociation] ADD CONSTRAINT [StudentProgramAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentProgramAssociation] ADD CONSTRAINT [StudentProgramAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentProgramAssociation] ADD CONSTRAINT [StudentProgramAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentProgramAssociationService] --
CREATE TABLE [edfi].[StudentProgramAssociationService] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [ServiceDescriptorId] [INT] NOT NULL,
    [PrimaryIndicator] [BIT] NULL,
    [ServiceBeginDate] [DATE] NULL,
    [ServiceEndDate] [DATE] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentProgramAssociationService_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC,
        [ServiceDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentProgramAssociationService] ADD CONSTRAINT [StudentProgramAssociationService_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentProgramAttendanceEvent] --
CREATE TABLE [edfi].[StudentProgramAttendanceEvent] (
    [StudentUSI] [INT] NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [AttendanceEventCategoryDescriptorId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [AttendanceEventReason] [NVARCHAR](40) NULL,
    [EducationalEnvironmentTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentProgramAttendanceEvent_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ProgramEducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [EventDate] ASC,
        [AttendanceEventCategoryDescriptorId] ASC,
        [ProgramName] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [StudentProgramAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [StudentProgramAttendanceEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentProgramAttendanceEvent] ADD CONSTRAINT [StudentProgramAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentProgramParticipation] --
CREATE TABLE [edfi].[StudentProgramParticipation] (
    [StudentUSI] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [BeginDate] [DATETIME] NULL,
    [EndDate] [DATETIME] NULL,
    [DesignatedBy] [NVARCHAR](60) NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentProgramParticipation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ProgramTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentProgramParticipation] ADD CONSTRAINT [StudentProgramParticipation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentProgramParticipationProgramCharacteristic] --
CREATE TABLE [edfi].[StudentProgramParticipationProgramCharacteristic] (
    [StudentUSI] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramCharacteristicDescriptorId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentProgramParticipationProgramCharacteristic_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ProgramTypeId] ASC,
        [ProgramCharacteristicDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentProgramParticipationProgramCharacteristic] ADD CONSTRAINT [StudentProgramParticipationProgramCharacteristic_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentRace] --
CREATE TABLE [edfi].[StudentRace] (
    [StudentUSI] [INT] NOT NULL,
    [RaceTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentRace_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [RaceTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentRace] ADD CONSTRAINT [StudentRace_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentSchoolAssociation] --
CREATE TABLE [edfi].[StudentSchoolAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [EntryDate] [DATE] NOT NULL,
    [PrimarySchool] [BIT] NULL,
    [SchoolYear] [SMALLINT] NULL,
    [EntryGradeLevelDescriptorId] [INT] NOT NULL,
    [EntryGradeLevelReasonTypeId] [INT] NULL,
    [EntryTypeDescriptorId] [INT] NULL,
    [RepeatGradeIndicator] [BIT] NULL,
    [ClassOfSchoolYear] [SMALLINT] NULL,
    [SchoolChoiceTransfer] [BIT] NULL,
    [ExitWithdrawDate] [DATE] NULL,
    [ExitWithdrawTypeDescriptorId] [INT] NULL,
    [ResidencyStatusDescriptorId] [INT] NULL,
    [GraduationPlanTypeDescriptorId] [INT] NULL,
    [EducationOrganizationId] [INT] NULL,
    [GraduationSchoolYear] [SMALLINT] NULL,
    [EmployedWhileEnrolled] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentSchoolAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [EntryDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [StudentSchoolAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [StudentSchoolAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentSchoolAssociation] ADD CONSTRAINT [StudentSchoolAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentSchoolAssociationEducationPlan] --
CREATE TABLE [edfi].[StudentSchoolAssociationEducationPlan] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [EntryDate] [DATE] NOT NULL,
    [EducationPlanTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentSchoolAssociationEducationPlan_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [EntryDate] ASC,
        [EducationPlanTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] ADD CONSTRAINT [StudentSchoolAssociationEducationPlan_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentSchoolAttendanceEvent] --
CREATE TABLE [edfi].[StudentSchoolAttendanceEvent] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [AttendanceEventCategoryDescriptorId] [INT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [AttendanceEventReason] [NVARCHAR](40) NULL,
    [EducationalEnvironmentTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentSchoolAttendanceEvent_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [SchoolYear] ASC,
        [EventDate] ASC,
        [AttendanceEventCategoryDescriptorId] ASC,
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [StudentSchoolAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [StudentSchoolAttendanceEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] ADD CONSTRAINT [StudentSchoolAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentSectionAssociation] --
CREATE TABLE [edfi].[StudentSectionAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [EndDate] [DATE] NULL,
    [HomeroomIndicator] [BIT] NULL,
    [RepeatIdentifierTypeId] [INT] NULL,
    [TeacherStudentDataLinkExclusion] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentSectionAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [ClassroomIdentificationCode] ASC,
        [LocalCourseCode] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentSectionAssociation] ADD CONSTRAINT [StudentSectionAssociation_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentSectionAssociation] ADD CONSTRAINT [StudentSectionAssociation_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentSectionAssociation] ADD CONSTRAINT [StudentSectionAssociation_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentSectionAttendanceEvent] --
CREATE TABLE [edfi].[StudentSectionAttendanceEvent] (
    [StudentUSI] [INT] NOT NULL,
    [ClassroomIdentificationCode] [NVARCHAR](20) NOT NULL,
    [SchoolId] [INT] NOT NULL,
    [ClassPeriodName] [NVARCHAR](20) NOT NULL,
    [LocalCourseCode] [NVARCHAR](60) NOT NULL,
    [SchoolYear] [SMALLINT] NOT NULL,
    [TermDescriptorId] [INT] NOT NULL,
    [UniqueSectionCode] [NVARCHAR](255) NOT NULL,
    [SequenceOfCourse] [INT] NOT NULL,
    [EventDate] [DATE] NOT NULL,
    [AttendanceEventCategoryDescriptorId] [INT] NOT NULL,
    [AttendanceEventReason] [NVARCHAR](40) NULL,
    [EducationalEnvironmentTypeId] [INT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [StudentSectionAttendanceEvent_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ClassroomIdentificationCode] ASC,
        [SchoolId] ASC,
        [ClassPeriodName] ASC,
        [LocalCourseCode] ASC,
        [SchoolYear] ASC,
        [TermDescriptorId] ASC,
        [UniqueSectionCode] ASC,
        [SequenceOfCourse] ASC,
        [EventDate] ASC,
        [AttendanceEventCategoryDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [StudentSectionAttendanceEvent_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [StudentSectionAttendanceEvent_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[StudentSectionAttendanceEvent] ADD CONSTRAINT [StudentSectionAttendanceEvent_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[StudentSpecialEducationProgramAssociation] --
CREATE TABLE [edfi].[StudentSpecialEducationProgramAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [IdeaEligibility] [BIT] NULL,
    [SpecialEducationSettingDescriptorId] [INT] NULL,
    [SpecialEducationHoursPerWeek] [DECIMAL](5, 2) NULL,
    [SchoolHoursPerWeek] [DECIMAL](5, 2) NULL,
    [MultiplyDisabled] [BIT] NULL,
    [MedicallyFragile] [BIT] NULL,
    [LastEvaluationDate] [DATE] NULL,
    [IEPReviewDate] [DATE] NULL,
    [IEPBeginDate] [DATE] NULL,
    [IEPEndDate] [DATE] NULL,
    CONSTRAINT [StudentSpecialEducationProgramAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] --
CREATE TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] (
    [StudentUSI] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [StaffUSI] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [PrimaryProvider] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentSpecialEducationProgramAssociationServiceProvider_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [ProgramTypeId] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC,
        [StaffUSI] ASC,
        [ProgramName] ASC,
        [EducationOrganizationId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ADD CONSTRAINT [StudentSpecialEducationProgramAssociationServiceProvider_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentTelephone] --
CREATE TABLE [edfi].[StudentTelephone] (
    [StudentUSI] [INT] NOT NULL,
    [TelephoneNumberTypeId] [INT] NOT NULL,
    [TelephoneNumber] [NVARCHAR](24) NOT NULL,
    [OrderOfPriority] [INT] NULL,
    [TextMessageCapabilityIndicator] [BIT] NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentTelephone_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [TelephoneNumberTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentTelephone] ADD CONSTRAINT [StudentTelephone_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[StudentTitleIPartAProgramAssociation] --
CREATE TABLE [edfi].[StudentTitleIPartAProgramAssociation] (
    [StudentUSI] [INT] NOT NULL,
    [EducationOrganizationId] [INT] NOT NULL,
    [ProgramTypeId] [INT] NOT NULL,
    [ProgramName] [NVARCHAR](60) NOT NULL,
    [ProgramEducationOrganizationId] [INT] NOT NULL,
    [BeginDate] [DATE] NOT NULL,
    [TitleIPartAParticipantTypeId] [INT] NOT NULL,
    CONSTRAINT [StudentTitleIPartAProgramAssociation_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [EducationOrganizationId] ASC,
        [ProgramTypeId] ASC,
        [ProgramName] ASC,
        [ProgramEducationOrganizationId] ASC,
        [BeginDate] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[StudentVisa] --
CREATE TABLE [edfi].[StudentVisa] (
    [StudentUSI] [INT] NOT NULL,
    [VisaTypeId] [INT] NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    CONSTRAINT [StudentVisa_PK] PRIMARY KEY CLUSTERED (
        [StudentUSI] ASC,
        [VisaTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[StudentVisa] ADD CONSTRAINT [StudentVisa_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO

-- Table [edfi].[TeachingCredentialBasisType] --
CREATE TABLE [edfi].[TeachingCredentialBasisType] (
    [TeachingCredentialBasisTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [TeachingCredentialBasisType_PK] PRIMARY KEY CLUSTERED (
        [TeachingCredentialBasisTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[TeachingCredentialBasisType] ADD CONSTRAINT [TeachingCredentialBasisType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[TeachingCredentialBasisType] ADD CONSTRAINT [TeachingCredentialBasisType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[TeachingCredentialBasisType] ADD CONSTRAINT [TeachingCredentialBasisType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[TeachingCredentialDescriptor] --
CREATE TABLE [edfi].[TeachingCredentialDescriptor] (
    [TeachingCredentialDescriptorId] [INT] NOT NULL,
    [TeachingCredentialTypeId] [INT] NULL,
    CONSTRAINT [TeachingCredentialDescriptor_PK] PRIMARY KEY CLUSTERED (
        [TeachingCredentialDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[TeachingCredentialType] --
CREATE TABLE [edfi].[TeachingCredentialType] (
    [TeachingCredentialTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [TeachingCredentialType_PK] PRIMARY KEY CLUSTERED (
        [TeachingCredentialTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[TeachingCredentialType] ADD CONSTRAINT [TeachingCredentialType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[TeachingCredentialType] ADD CONSTRAINT [TeachingCredentialType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[TeachingCredentialType] ADD CONSTRAINT [TeachingCredentialType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[TelephoneNumberType] --
CREATE TABLE [edfi].[TelephoneNumberType] (
    [TelephoneNumberTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [TelephoneNumberType_PK] PRIMARY KEY CLUSTERED (
        [TelephoneNumberTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[TelephoneNumberType] ADD CONSTRAINT [TelephoneNumberType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[TelephoneNumberType] ADD CONSTRAINT [TelephoneNumberType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[TelephoneNumberType] ADD CONSTRAINT [TelephoneNumberType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[TermDescriptor] --
CREATE TABLE [edfi].[TermDescriptor] (
    [TermDescriptorId] [INT] NOT NULL,
    [TermTypeId] [INT] NULL,
    CONSTRAINT [TermDescriptor_PK] PRIMARY KEY CLUSTERED (
        [TermDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[TermType] --
CREATE TABLE [edfi].[TermType] (
    [TermTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [TermType_PK] PRIMARY KEY CLUSTERED (
        [TermTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[TermType] ADD CONSTRAINT [TermType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[TermType] ADD CONSTRAINT [TermType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[TermType] ADD CONSTRAINT [TermType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[TitleIPartAParticipantType] --
CREATE TABLE [edfi].[TitleIPartAParticipantType] (
    [TitleIPartAParticipantTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [TitleIPartAParticipantType_PK] PRIMARY KEY CLUSTERED (
        [TitleIPartAParticipantTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[TitleIPartAParticipantType] ADD CONSTRAINT [TitleIPartAParticipantType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[TitleIPartAParticipantType] ADD CONSTRAINT [TitleIPartAParticipantType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[TitleIPartAParticipantType] ADD CONSTRAINT [TitleIPartAParticipantType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[TitleIPartASchoolDesignationType] --
CREATE TABLE [edfi].[TitleIPartASchoolDesignationType] (
    [TitleIPartASchoolDesignationTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [TitleIPartASchoolDesignationType_PK] PRIMARY KEY CLUSTERED (
        [TitleIPartASchoolDesignationTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[TitleIPartASchoolDesignationType] ADD CONSTRAINT [TitleIPartASchoolDesignationType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[TitleIPartASchoolDesignationType] ADD CONSTRAINT [TitleIPartASchoolDesignationType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[TitleIPartASchoolDesignationType] ADD CONSTRAINT [TitleIPartASchoolDesignationType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[VisaType] --
CREATE TABLE [edfi].[VisaType] (
    [VisaTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [VisaType_PK] PRIMARY KEY CLUSTERED (
        [VisaTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[VisaType] ADD CONSTRAINT [VisaType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[VisaType] ADD CONSTRAINT [VisaType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[VisaType] ADD CONSTRAINT [VisaType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

-- Table [edfi].[WeaponDescriptor] --
CREATE TABLE [edfi].[WeaponDescriptor] (
    [WeaponDescriptorId] [INT] NOT NULL,
    [WeaponTypeId] [INT] NULL,
    CONSTRAINT [WeaponDescriptor_PK] PRIMARY KEY CLUSTERED (
        [WeaponDescriptorId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

-- Table [edfi].[WeaponType] --
CREATE TABLE [edfi].[WeaponType] (
    [WeaponTypeId] [INT] IDENTITY(1,1) NOT NULL,
    [CodeValue] [NVARCHAR](50) NOT NULL,
    [Description] [NVARCHAR](1024) NOT NULL,
    [ShortDescription] [NVARCHAR](450) NOT NULL,
    [CreateDate] [DATETIME] NOT NULL,
    [LastModifiedDate] [DATETIME] NOT NULL,
    [Id] [UNIQUEIDENTIFIER] NOT NULL,
    CONSTRAINT [WeaponType_PK] PRIMARY KEY CLUSTERED (
        [WeaponTypeId] ASC
    ) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [edfi].[WeaponType] ADD CONSTRAINT [WeaponType_DF_CreateDate] DEFAULT (getdate()) FOR [CreateDate]
GO
ALTER TABLE [edfi].[WeaponType] ADD CONSTRAINT [WeaponType_DF_Id] DEFAULT (newid()) FOR [Id]
GO
ALTER TABLE [edfi].[WeaponType] ADD CONSTRAINT [WeaponType_DF_LastModifiedDate] DEFAULT (getdate()) FOR [LastModifiedDate]
GO

ALTER TABLE [edfi].[AcademicSubjectDescriptor] WITH CHECK ADD CONSTRAINT [FK_AcademicSubjectDescriptor_AcademicSubjectType] FOREIGN KEY ([AcademicSubjectTypeId])
REFERENCES [edfi].[AcademicSubjectType] ([AcademicSubjectTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AcademicSubjectDescriptor_AcademicSubjectType]
ON [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectTypeId] ASC)
GO

ALTER TABLE [edfi].[AcademicSubjectDescriptor] WITH CHECK ADD CONSTRAINT [FK_AcademicSubjectDescriptor_Descriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AcademicSubjectDescriptor_Descriptor]
ON [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AcademicWeek] WITH CHECK ADD CONSTRAINT [FK_AcademicWeek_CalendarDate] FOREIGN KEY ([SchoolId], [BeginDate])
REFERENCES [edfi].[CalendarDate] ([SchoolId], [Date])
GO

CREATE NONCLUSTERED INDEX [FK_AcademicWeek_CalendarDate]
ON [edfi].[AcademicWeek] ([SchoolId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[AcademicWeek] WITH CHECK ADD CONSTRAINT [FK_AcademicWeek_CalendarDate1] FOREIGN KEY ([SchoolId], [EndDate])
REFERENCES [edfi].[CalendarDate] ([SchoolId], [Date])
GO

CREATE NONCLUSTERED INDEX [FK_AcademicWeek_CalendarDate1]
ON [edfi].[AcademicWeek] ([SchoolId] ASC, [EndDate] ASC)
GO

ALTER TABLE [edfi].[AcademicWeek] WITH CHECK ADD CONSTRAINT [FK_AcademicWeek_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_AcademicWeek_School]
ON [edfi].[AcademicWeek] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[AccommodationDescriptor] WITH CHECK ADD CONSTRAINT [FK_AccommodationDescriptor_AccommodationType] FOREIGN KEY ([AccommodationTypeId])
REFERENCES [edfi].[AccommodationType] ([AccommodationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AccommodationDescriptor_AccommodationType]
ON [edfi].[AccommodationDescriptor] ([AccommodationTypeId] ASC)
GO

ALTER TABLE [edfi].[AccommodationDescriptor] WITH CHECK ADD CONSTRAINT [FK_AccommodationDescriptor_Descriptor] FOREIGN KEY ([AccommodationDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AccommodationDescriptor_Descriptor]
ON [edfi].[AccommodationDescriptor] ([AccommodationDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Account] WITH CHECK ADD CONSTRAINT [FK_Account_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_Account_EducationOrganization]
ON [edfi].[Account] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[AccountabilityRating] WITH CHECK ADD CONSTRAINT [FK_AccountabilityRating_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_AccountabilityRating_EducationOrganization]
ON [edfi].[AccountabilityRating] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[AccountabilityRating] WITH CHECK ADD CONSTRAINT [FK_AccountabilityRating_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_AccountabilityRating_SchoolYearType]
ON [edfi].[AccountabilityRating] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[AccountCode] WITH CHECK ADD CONSTRAINT [FK_AccountCode_Account] FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
REFERENCES [edfi].[Account] ([EducationOrganizationId], [AccountNumber], [FiscalYear])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AccountCode_Account]
ON [edfi].[AccountCode] ([EducationOrganizationId] ASC, [AccountNumber] ASC, [FiscalYear] ASC)
GO

ALTER TABLE [edfi].[AccountCode] WITH CHECK ADD CONSTRAINT [FK_AccountCode_AccountCodeDescriptor] FOREIGN KEY ([AccountCodeDescriptorId])
REFERENCES [edfi].[AccountCodeDescriptor] ([AccountCodeDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AccountCode_AccountCodeDescriptor]
ON [edfi].[AccountCode] ([AccountCodeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AccountCodeDescriptor] WITH CHECK ADD CONSTRAINT [FK_AccountCodeDescriptor_Descriptor] FOREIGN KEY ([AccountCodeDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AccountCodeDescriptor_Descriptor]
ON [edfi].[AccountCodeDescriptor] ([AccountCodeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AchievementCategoryDescriptor] WITH CHECK ADD CONSTRAINT [FK_AchievementCategoryDescriptor_AchievementCategoryType] FOREIGN KEY ([AchievementCategoryTypeId])
REFERENCES [edfi].[AchievementCategoryType] ([AchievementCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AchievementCategoryDescriptor_AchievementCategoryType]
ON [edfi].[AchievementCategoryDescriptor] ([AchievementCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[AchievementCategoryDescriptor] WITH CHECK ADD CONSTRAINT [FK_AchievementCategoryDescriptor_Descriptor] FOREIGN KEY ([AchievementCategoryDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AchievementCategoryDescriptor_Descriptor]
ON [edfi].[AchievementCategoryDescriptor] ([AchievementCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Actual] WITH CHECK ADD CONSTRAINT [FK_Actual_Account] FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
REFERENCES [edfi].[Account] ([EducationOrganizationId], [AccountNumber], [FiscalYear])
GO

CREATE NONCLUSTERED INDEX [FK_Actual_Account]
ON [edfi].[Actual] ([EducationOrganizationId] ASC, [AccountNumber] ASC, [FiscalYear] ASC)
GO

ALTER TABLE [edfi].[AdministrativeFundingControlDescriptor] WITH CHECK ADD CONSTRAINT [FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType] FOREIGN KEY ([AdministrativeFundingControlTypeId])
REFERENCES [edfi].[AdministrativeFundingControlType] ([AdministrativeFundingControlTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AdministrativeFundingControlDescriptor_AdministrativeFundingControlType]
ON [edfi].[AdministrativeFundingControlDescriptor] ([AdministrativeFundingControlTypeId] ASC)
GO

ALTER TABLE [edfi].[AdministrativeFundingControlDescriptor] WITH CHECK ADD CONSTRAINT [FK_AdministrativeFundingControlDescriptor_Descriptor] FOREIGN KEY ([AdministrativeFundingControlDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AdministrativeFundingControlDescriptor_Descriptor]
ON [edfi].[AdministrativeFundingControlDescriptor] ([AdministrativeFundingControlDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Assessment] WITH CHECK ADD CONSTRAINT [FK_Assessment_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Assessment_AcademicSubjectDescriptor]
ON [edfi].[Assessment] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Assessment] WITH CHECK ADD CONSTRAINT [FK_Assessment_AssessmentCategoryDescriptor] FOREIGN KEY ([AssessmentCategoryDescriptorId])
REFERENCES [edfi].[AssessmentCategoryDescriptor] ([AssessmentCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Assessment_AssessmentCategoryDescriptor]
ON [edfi].[Assessment] ([AssessmentCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Assessment] WITH CHECK ADD CONSTRAINT [FK_Assessment_AssessmentFamily] FOREIGN KEY ([AssessmentFamilyTitle])
REFERENCES [edfi].[AssessmentFamily] ([AssessmentFamilyTitle])
GO

CREATE NONCLUSTERED INDEX [FK_Assessment_AssessmentFamily]
ON [edfi].[Assessment] ([AssessmentFamilyTitle] ASC)
GO

ALTER TABLE [edfi].[Assessment] WITH CHECK ADD CONSTRAINT [FK_Assessment_AssessmentPeriodDescriptor] FOREIGN KEY ([AssessmentPeriodDescriptorId])
REFERENCES [edfi].[AssessmentPeriodDescriptor] ([AssessmentPeriodDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Assessment_AssessmentPeriodDescriptor]
ON [edfi].[Assessment] ([AssessmentPeriodDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Assessment] WITH CHECK ADD CONSTRAINT [FK_Assessment_GradeLevelDescriptor] FOREIGN KEY ([AssessedGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Assessment_GradeLevelDescriptor]
ON [edfi].[Assessment] ([AssessedGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Assessment] WITH CHECK ADD CONSTRAINT [FK_Assessment_GradeLevelDescriptor1] FOREIGN KEY ([LowestAssessedGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Assessment_GradeLevelDescriptor1]
ON [edfi].[Assessment] ([LowestAssessedGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentCategoryDescriptor] WITH CHECK ADD CONSTRAINT [FK_AssessmentCategoryDescriptor_AssessmentCategoryType] FOREIGN KEY ([AssessmentCategoryTypeId])
REFERENCES [edfi].[AssessmentCategoryType] ([AssessmentCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentCategoryDescriptor_AssessmentCategoryType]
ON [edfi].[AssessmentCategoryDescriptor] ([AssessmentCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentCategoryDescriptor] WITH CHECK ADD CONSTRAINT [FK_AssessmentCategoryDescriptor_Descriptor] FOREIGN KEY ([AssessmentCategoryDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentCategoryDescriptor_Descriptor]
ON [edfi].[AssessmentCategoryDescriptor] ([AssessmentCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentContentStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentContentStandard_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [AssessmentVersion])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentContentStandard_Assessment]
ON [edfi].[AssessmentContentStandard] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [AssessmentVersion] ASC)
GO

ALTER TABLE [edfi].[AssessmentContentStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentContentStandard_EducationOrganization] FOREIGN KEY ([MandatingEducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentContentStandard_EducationOrganization]
ON [edfi].[AssessmentContentStandard] ([MandatingEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[AssessmentContentStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentContentStandard_PublicationStatusType] FOREIGN KEY ([PublicationStatusTypeId])
REFERENCES [edfi].[PublicationStatusType] ([PublicationStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentContentStandard_PublicationStatusType]
ON [edfi].[AssessmentContentStandard] ([PublicationStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentContentStandardAuthor] WITH CHECK ADD CONSTRAINT [FK_AssessmentContentStandardAuthor_AssessmentContentStandard] FOREIGN KEY ([AssessmentVersion], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId])
REFERENCES [edfi].[AssessmentContentStandard] ([AssessmentVersion], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentContentStandardAuthor_AssessmentContentStandard]
ON [edfi].[AssessmentContentStandardAuthor] ([AssessmentVersion] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamily] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamily_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamily_AcademicSubjectDescriptor]
ON [edfi].[AssessmentFamily] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamily] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamily_AssessmentCategoryDescriptor] FOREIGN KEY ([AssessmentCategoryDescriptorId])
REFERENCES [edfi].[AssessmentCategoryDescriptor] ([AssessmentCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamily_AssessmentCategoryDescriptor]
ON [edfi].[AssessmentFamily] ([AssessmentCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamily] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamily_AssessmentFamily] FOREIGN KEY ([ParentAssessmentFamilyTitle])
REFERENCES [edfi].[AssessmentFamily] ([AssessmentFamilyTitle])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamily_AssessmentFamily]
ON [edfi].[AssessmentFamily] ([ParentAssessmentFamilyTitle] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamily] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamily_GradeLevelDescriptor] FOREIGN KEY ([AssessedGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamily_GradeLevelDescriptor]
ON [edfi].[AssessmentFamily] ([AssessedGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamily] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamily_GradeLevelDescriptor1] FOREIGN KEY ([LowestAssessedGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamily_GradeLevelDescriptor1]
ON [edfi].[AssessmentFamily] ([LowestAssessedGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyAssessmentPeriod] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily] FOREIGN KEY ([AssessmentFamilyTitle])
REFERENCES [edfi].[AssessmentFamily] ([AssessmentFamilyTitle])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyAssessmentPeriod_AssessmentFamily]
ON [edfi].[AssessmentFamilyAssessmentPeriod] ([AssessmentFamilyTitle] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyAssessmentPeriod] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor] FOREIGN KEY ([AssessmentPeriodDescriptorId])
REFERENCES [edfi].[AssessmentPeriodDescriptor] ([AssessmentPeriodDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyAssessmentPeriod_AssessmentPeriodDescriptor]
ON [edfi].[AssessmentFamilyAssessmentPeriod] ([AssessmentPeriodDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyContentStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyContentStandard_AssessmentFamily] FOREIGN KEY ([AssessmentFamilyTitle])
REFERENCES [edfi].[AssessmentFamily] ([AssessmentFamilyTitle])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyContentStandard_AssessmentFamily]
ON [edfi].[AssessmentFamilyContentStandard] ([AssessmentFamilyTitle] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyContentStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyContentStandard_EducationOrganization] FOREIGN KEY ([MandatingEducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyContentStandard_EducationOrganization]
ON [edfi].[AssessmentFamilyContentStandard] ([MandatingEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyContentStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyContentStandard_PublicationStatusType] FOREIGN KEY ([PublicationStatusTypeId])
REFERENCES [edfi].[PublicationStatusType] ([PublicationStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyContentStandard_PublicationStatusType]
ON [edfi].[AssessmentFamilyContentStandard] ([PublicationStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyContentStandardAuthor] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard] FOREIGN KEY ([AssessmentFamilyTitle])
REFERENCES [edfi].[AssessmentFamilyContentStandard] ([AssessmentFamilyTitle])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyContentStandardAuthor_AssessmentFamilyContentStandard]
ON [edfi].[AssessmentFamilyContentStandardAuthor] ([AssessmentFamilyTitle] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyIdentificationCode_AssessmentFamily] FOREIGN KEY ([AssessmentFamilyTitle])
REFERENCES [edfi].[AssessmentFamily] ([AssessmentFamilyTitle])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyIdentificationCode_AssessmentFamily]
ON [edfi].[AssessmentFamilyIdentificationCode] ([AssessmentFamilyTitle] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor] FOREIGN KEY ([AssessmentIdentificationSystemDescriptorId])
REFERENCES [edfi].[AssessmentIdentificationSystemDescriptor] ([AssessmentIdentificationSystemDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyIdentificationCode_AssessmentIdentificationSystemDescriptor]
ON [edfi].[AssessmentFamilyIdentificationCode] ([AssessmentIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyLanguage] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyLanguage_AssessmentFamily] FOREIGN KEY ([AssessmentFamilyTitle])
REFERENCES [edfi].[AssessmentFamily] ([AssessmentFamilyTitle])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyLanguage_AssessmentFamily]
ON [edfi].[AssessmentFamilyLanguage] ([AssessmentFamilyTitle] ASC)
GO

ALTER TABLE [edfi].[AssessmentFamilyLanguage] WITH CHECK ADD CONSTRAINT [FK_AssessmentFamilyLanguage_LanguageDescriptor] FOREIGN KEY ([LanguageDescriptorId])
REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentFamilyLanguage_LanguageDescriptor]
ON [edfi].[AssessmentFamilyLanguage] ([LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_AssessmentIdentificationCode_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentIdentificationCode_Assessment]
ON [edfi].[AssessmentIdentificationCode] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[AssessmentIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor] FOREIGN KEY ([AssessmentIdentificationSystemDescriptorId])
REFERENCES [edfi].[AssessmentIdentificationSystemDescriptor] ([AssessmentIdentificationSystemDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentIdentificationCode_AssessmentIdentificationSystemDescriptor]
ON [edfi].[AssessmentIdentificationCode] ([AssessmentIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType] FOREIGN KEY ([AssessmentIdentificationSystemTypeId])
REFERENCES [edfi].[AssessmentIdentificationSystemType] ([AssessmentIdentificationSystemTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentIdentificationSystemDescriptor_AssessmentIdentificationSystemType]
ON [edfi].[AssessmentIdentificationSystemDescriptor] ([AssessmentIdentificationSystemTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_AssessmentIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([AssessmentIdentificationSystemDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentIdentificationSystemDescriptor_Descriptor]
ON [edfi].[AssessmentIdentificationSystemDescriptor] ([AssessmentIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentItem] WITH CHECK ADD CONSTRAINT [FK_AssessmentItem_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentItem_Assessment]
ON [edfi].[AssessmentItem] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[AssessmentItem] WITH CHECK ADD CONSTRAINT [FK_AssessmentItem_AssessmentItemCategoryType] FOREIGN KEY ([AssessmentItemCategoryTypeId])
REFERENCES [edfi].[AssessmentItemCategoryType] ([AssessmentItemCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentItem_AssessmentItemCategoryType]
ON [edfi].[AssessmentItem] ([AssessmentItemCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentItemLearningStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentItemLearningStandard_AssessmentItem] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[AssessmentItem] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentItemLearningStandard_AssessmentItem]
ON [edfi].[AssessmentItemLearningStandard] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[AssessmentItemLearningStandard] WITH CHECK ADD CONSTRAINT [FK_AssessmentItemLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentItemLearningStandard_LearningStandard]
ON [edfi].[AssessmentItemLearningStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[AssessmentLanguage] WITH CHECK ADD CONSTRAINT [FK_AssessmentLanguage_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentLanguage_Assessment]
ON [edfi].[AssessmentLanguage] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[AssessmentLanguage] WITH CHECK ADD CONSTRAINT [FK_AssessmentLanguage_LanguageDescriptor] FOREIGN KEY ([LanguageDescriptorId])
REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentLanguage_LanguageDescriptor]
ON [edfi].[AssessmentLanguage] ([LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_AssessmentPerformanceLevel_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentPerformanceLevel_Assessment]
ON [edfi].[AssessmentPerformanceLevel] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[AssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_AssessmentPerformanceLevel_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentPerformanceLevel_AssessmentReportingMethodType]
ON [edfi].[AssessmentPerformanceLevel] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor] FOREIGN KEY ([PerformanceLevelDescriptorId])
REFERENCES [edfi].[PerformanceLevelDescriptor] ([PerformanceLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentPerformanceLevel_PerformanceLevelDescriptor]
ON [edfi].[AssessmentPerformanceLevel] ([PerformanceLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_AssessmentPerformanceLevel_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentPerformanceLevel_ResultDatatypeType]
ON [edfi].[AssessmentPerformanceLevel] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentPeriodDescriptor] WITH CHECK ADD CONSTRAINT [FK_AssessmentPeriodDescriptor_Descriptor] FOREIGN KEY ([AssessmentPeriodDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentPeriodDescriptor_Descriptor]
ON [edfi].[AssessmentPeriodDescriptor] ([AssessmentPeriodDescriptorId] ASC)
GO

ALTER TABLE [edfi].[AssessmentProgram] WITH CHECK ADD CONSTRAINT [FK_AssessmentProgram_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentProgram_Assessment]
ON [edfi].[AssessmentProgram] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[AssessmentProgram] WITH CHECK ADD CONSTRAINT [FK_AssessmentProgram_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentProgram_Program]
ON [edfi].[AssessmentProgram] ([EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[AssessmentScore] WITH CHECK ADD CONSTRAINT [FK_AssessmentScore_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentScore_Assessment]
ON [edfi].[AssessmentScore] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[AssessmentScore] WITH CHECK ADD CONSTRAINT [FK_AssessmentScore_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentScore_AssessmentReportingMethodType]
ON [edfi].[AssessmentScore] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentScore] WITH CHECK ADD CONSTRAINT [FK_AssessmentScore_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentScore_ResultDatatypeType]
ON [edfi].[AssessmentScore] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[AssessmentSection] WITH CHECK ADD CONSTRAINT [FK_AssessmentSection_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentSection_Assessment]
ON [edfi].[AssessmentSection] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[AssessmentSection] WITH CHECK ADD CONSTRAINT [FK_AssessmentSection_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AssessmentSection_Section]
ON [edfi].[AssessmentSection] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[AttendanceEventCategoryDescriptor] WITH CHECK ADD CONSTRAINT [FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType] FOREIGN KEY ([AttendanceEventCategoryTypeId])
REFERENCES [edfi].[AttendanceEventCategoryType] ([AttendanceEventCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_AttendanceEventCategoryDescriptor_AttendanceEventCategoryType]
ON [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[AttendanceEventCategoryDescriptor] WITH CHECK ADD CONSTRAINT [FK_AttendanceEventCategoryDescriptor_Descriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_AttendanceEventCategoryDescriptor_Descriptor]
ON [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[BehaviorDescriptor] WITH CHECK ADD CONSTRAINT [FK_BehaviorDescriptor_BehaviorType] FOREIGN KEY ([BehaviorTypeId])
REFERENCES [edfi].[BehaviorType] ([BehaviorTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_BehaviorDescriptor_BehaviorType]
ON [edfi].[BehaviorDescriptor] ([BehaviorTypeId] ASC)
GO

ALTER TABLE [edfi].[BehaviorDescriptor] WITH CHECK ADD CONSTRAINT [FK_BehaviorDescriptor_Descriptor] FOREIGN KEY ([BehaviorDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_BehaviorDescriptor_Descriptor]
ON [edfi].[BehaviorDescriptor] ([BehaviorDescriptorId] ASC)
GO

ALTER TABLE [edfi].[BellSchedule] WITH CHECK ADD CONSTRAINT [FK_BellSchedule_CalendarDate] FOREIGN KEY ([SchoolId], [Date])
REFERENCES [edfi].[CalendarDate] ([SchoolId], [Date])
GO

CREATE NONCLUSTERED INDEX [FK_BellSchedule_CalendarDate]
ON [edfi].[BellSchedule] ([SchoolId] ASC, [Date] ASC)
GO

ALTER TABLE [edfi].[BellSchedule] WITH CHECK ADD CONSTRAINT [FK_BellSchedule_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_BellSchedule_GradeLevelDescriptor]
ON [edfi].[BellSchedule] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[BellScheduleMeetingTime] WITH CHECK ADD CONSTRAINT [FK_BellScheduleMeetingTime_BellSchedule] FOREIGN KEY ([BellScheduleName], [GradeLevelDescriptorId], [SchoolId], [Date])
REFERENCES [edfi].[BellSchedule] ([BellScheduleName], [GradeLevelDescriptorId], [SchoolId], [Date])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_BellScheduleMeetingTime_BellSchedule]
ON [edfi].[BellScheduleMeetingTime] ([BellScheduleName] ASC, [GradeLevelDescriptorId] ASC, [SchoolId] ASC, [Date] ASC)
GO

ALTER TABLE [edfi].[BellScheduleMeetingTime] WITH CHECK ADD CONSTRAINT [FK_BellScheduleMeetingTime_ClassPeriod] FOREIGN KEY ([SchoolId], [ClassPeriodName])
REFERENCES [edfi].[ClassPeriod] ([SchoolId], [ClassPeriodName])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_BellScheduleMeetingTime_ClassPeriod]
ON [edfi].[BellScheduleMeetingTime] ([SchoolId] ASC, [ClassPeriodName] ASC)
GO

ALTER TABLE [edfi].[Budget] WITH CHECK ADD CONSTRAINT [FK_Budget_Account] FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
REFERENCES [edfi].[Account] ([EducationOrganizationId], [AccountNumber], [FiscalYear])
GO

CREATE NONCLUSTERED INDEX [FK_Budget_Account]
ON [edfi].[Budget] ([EducationOrganizationId] ASC, [AccountNumber] ASC, [FiscalYear] ASC)
GO

ALTER TABLE [edfi].[CalendarDate] WITH CHECK ADD CONSTRAINT [FK_CalendarDate_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_CalendarDate_School]
ON [edfi].[CalendarDate] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[CalendarDateCalendarEvent] WITH CHECK ADD CONSTRAINT [FK_CalendarDateCalendarEvent_CalendarDate] FOREIGN KEY ([SchoolId], [Date])
REFERENCES [edfi].[CalendarDate] ([SchoolId], [Date])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CalendarDateCalendarEvent_CalendarDate]
ON [edfi].[CalendarDateCalendarEvent] ([SchoolId] ASC, [Date] ASC)
GO

ALTER TABLE [edfi].[CalendarDateCalendarEvent] WITH CHECK ADD CONSTRAINT [FK_CalendarDateCalendarEvent_CalendarEventDescriptor] FOREIGN KEY ([CalendarEventDescriptorId])
REFERENCES [edfi].[CalendarEventDescriptor] ([CalendarEventDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CalendarDateCalendarEvent_CalendarEventDescriptor]
ON [edfi].[CalendarDateCalendarEvent] ([CalendarEventDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CalendarEventDescriptor] WITH CHECK ADD CONSTRAINT [FK_CalendarEventDescriptor_CalendarEventType] FOREIGN KEY ([CalendarEventTypeId])
REFERENCES [edfi].[CalendarEventType] ([CalendarEventTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CalendarEventDescriptor_CalendarEventType]
ON [edfi].[CalendarEventDescriptor] ([CalendarEventTypeId] ASC)
GO

ALTER TABLE [edfi].[CalendarEventDescriptor] WITH CHECK ADD CONSTRAINT [FK_CalendarEventDescriptor_Descriptor] FOREIGN KEY ([CalendarEventDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CalendarEventDescriptor_Descriptor]
ON [edfi].[CalendarEventDescriptor] ([CalendarEventDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ClassPeriod] WITH CHECK ADD CONSTRAINT [FK_ClassPeriod_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_ClassPeriod_School]
ON [edfi].[ClassPeriod] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[ClassroomPositionDescriptor] WITH CHECK ADD CONSTRAINT [FK_ClassroomPositionDescriptor_ClassroomPositionType] FOREIGN KEY ([ClassroomPositionTypeId])
REFERENCES [edfi].[ClassroomPositionType] ([ClassroomPositionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ClassroomPositionDescriptor_ClassroomPositionType]
ON [edfi].[ClassroomPositionDescriptor] ([ClassroomPositionTypeId] ASC)
GO

ALTER TABLE [edfi].[ClassroomPositionDescriptor] WITH CHECK ADD CONSTRAINT [FK_ClassroomPositionDescriptor_Descriptor] FOREIGN KEY ([ClassroomPositionDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ClassroomPositionDescriptor_Descriptor]
ON [edfi].[ClassroomPositionDescriptor] ([ClassroomPositionDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Cohort] WITH CHECK ADD CONSTRAINT [FK_Cohort_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Cohort_AcademicSubjectDescriptor]
ON [edfi].[Cohort] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Cohort] WITH CHECK ADD CONSTRAINT [FK_Cohort_CohortScopeType] FOREIGN KEY ([CohortScopeTypeId])
REFERENCES [edfi].[CohortScopeType] ([CohortScopeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Cohort_CohortScopeType]
ON [edfi].[Cohort] ([CohortScopeTypeId] ASC)
GO

ALTER TABLE [edfi].[Cohort] WITH CHECK ADD CONSTRAINT [FK_Cohort_CohortType] FOREIGN KEY ([CohortTypeId])
REFERENCES [edfi].[CohortType] ([CohortTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Cohort_CohortType]
ON [edfi].[Cohort] ([CohortTypeId] ASC)
GO

ALTER TABLE [edfi].[Cohort] WITH CHECK ADD CONSTRAINT [FK_Cohort_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_Cohort_EducationOrganization]
ON [edfi].[Cohort] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[CohortProgram] WITH CHECK ADD CONSTRAINT [FK_CohortProgram_Cohort] FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId])
REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CohortProgram_Cohort]
ON [edfi].[CohortProgram] ([CohortIdentifier] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[CohortProgram] WITH CHECK ADD CONSTRAINT [FK_CohortProgram_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
GO

CREATE NONCLUSTERED INDEX [FK_CohortProgram_Program]
ON [edfi].[CohortProgram] ([ProgramEducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[CompetencyLevelDescriptor] WITH CHECK ADD CONSTRAINT [FK_CompetencyLevelDescriptor_Descriptor] FOREIGN KEY ([CompetencyLevelDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CompetencyLevelDescriptor_Descriptor]
ON [edfi].[CompetencyLevelDescriptor] ([CompetencyLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CompetencyLevelDescriptor] WITH CHECK ADD CONSTRAINT [FK_CompetencyLevelDescriptor_PerformanceBaseConversionType] FOREIGN KEY ([PerformanceBaseConversionTypeId])
REFERENCES [edfi].[PerformanceBaseConversionType] ([PerformanceBaseConversionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CompetencyLevelDescriptor_PerformanceBaseConversionType]
ON [edfi].[CompetencyLevelDescriptor] ([PerformanceBaseConversionTypeId] ASC)
GO

ALTER TABLE [edfi].[CompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_CompetencyObjective_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_CompetencyObjective_EducationOrganization]
ON [edfi].[CompetencyObjective] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[CompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_CompetencyObjective_GradeLevelDescriptor] FOREIGN KEY ([ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CompetencyObjective_GradeLevelDescriptor]
ON [edfi].[CompetencyObjective] ([ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ContinuationOfServicesReasonDescriptor] WITH CHECK ADD CONSTRAINT [FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType] FOREIGN KEY ([ContinuationOfServicesReasonTypeId])
REFERENCES [edfi].[ContinuationOfServicesReasonType] ([ContinuationOfServicesReasonTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ContinuationOfServicesReasonDescriptor_ContinuationOfServicesReasonType]
ON [edfi].[ContinuationOfServicesReasonDescriptor] ([ContinuationOfServicesReasonTypeId] ASC)
GO

ALTER TABLE [edfi].[ContinuationOfServicesReasonDescriptor] WITH CHECK ADD CONSTRAINT [FK_ContinuationOfServicesReasonDescriptor_Descriptor] FOREIGN KEY ([ContinuationOfServicesReasonDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ContinuationOfServicesReasonDescriptor_Descriptor]
ON [edfi].[ContinuationOfServicesReasonDescriptor] ([ContinuationOfServicesReasonDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ContractedStaff] WITH CHECK ADD CONSTRAINT [FK_ContractedStaff_Account] FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
REFERENCES [edfi].[Account] ([EducationOrganizationId], [AccountNumber], [FiscalYear])
GO

CREATE NONCLUSTERED INDEX [FK_ContractedStaff_Account]
ON [edfi].[ContractedStaff] ([EducationOrganizationId] ASC, [AccountNumber] ASC, [FiscalYear] ASC)
GO

ALTER TABLE [edfi].[ContractedStaff] WITH CHECK ADD CONSTRAINT [FK_ContractedStaff_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_ContractedStaff_Staff]
ON [edfi].[ContractedStaff] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[CountryDescriptor] WITH CHECK ADD CONSTRAINT [FK_CountryDescriptor_Descriptor] FOREIGN KEY ([CountryDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CountryDescriptor_Descriptor]
ON [edfi].[CountryDescriptor] ([CountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Course] WITH CHECK ADD CONSTRAINT [FK_Course_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Course_AcademicSubjectDescriptor]
ON [edfi].[Course] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Course] WITH CHECK ADD CONSTRAINT [FK_Course_CareerPathwayType] FOREIGN KEY ([CareerPathwayTypeId])
REFERENCES [edfi].[CareerPathwayType] ([CareerPathwayTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Course_CareerPathwayType]
ON [edfi].[Course] ([CareerPathwayTypeId] ASC)
GO

ALTER TABLE [edfi].[Course] WITH CHECK ADD CONSTRAINT [FK_Course_CourseDefinedByType] FOREIGN KEY ([CourseDefinedByTypeId])
REFERENCES [edfi].[CourseDefinedByType] ([CourseDefinedByTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Course_CourseDefinedByType]
ON [edfi].[Course] ([CourseDefinedByTypeId] ASC)
GO

ALTER TABLE [edfi].[Course] WITH CHECK ADD CONSTRAINT [FK_Course_CourseGPAApplicabilityType] FOREIGN KEY ([CourseGPAApplicabilityTypeId])
REFERENCES [edfi].[CourseGPAApplicabilityType] ([CourseGPAApplicabilityTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Course_CourseGPAApplicabilityType]
ON [edfi].[Course] ([CourseGPAApplicabilityTypeId] ASC)
GO

ALTER TABLE [edfi].[Course] WITH CHECK ADD CONSTRAINT [FK_Course_CreditType] FOREIGN KEY ([MinimumAvailableCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Course_CreditType]
ON [edfi].[Course] ([MinimumAvailableCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[Course] WITH CHECK ADD CONSTRAINT [FK_Course_CreditType1] FOREIGN KEY ([MaximumAvailableCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Course_CreditType1]
ON [edfi].[Course] ([MaximumAvailableCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[Course] WITH CHECK ADD CONSTRAINT [FK_Course_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_Course_EducationOrganization]
ON [edfi].[Course] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[CourseCompetencyLevel] WITH CHECK ADD CONSTRAINT [FK_CourseCompetencyLevel_CompetencyLevelDescriptor] FOREIGN KEY ([CompetencyLevelDescriptorId])
REFERENCES [edfi].[CompetencyLevelDescriptor] ([CompetencyLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseCompetencyLevel_CompetencyLevelDescriptor]
ON [edfi].[CourseCompetencyLevel] ([CompetencyLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseCompetencyLevel] WITH CHECK ADD CONSTRAINT [FK_CourseCompetencyLevel_Course] FOREIGN KEY ([EducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseCompetencyLevel_Course]
ON [edfi].[CourseCompetencyLevel] ([EducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_CourseIdentificationCode_Course] FOREIGN KEY ([EducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseIdentificationCode_Course]
ON [edfi].[CourseIdentificationCode] ([EducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor] FOREIGN KEY ([CourseIdentificationSystemDescriptorId])
REFERENCES [edfi].[CourseIdentificationSystemDescriptor] ([CourseIdentificationSystemDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseIdentificationCode_CourseIdentificationSystemDescriptor]
ON [edfi].[CourseIdentificationCode] ([CourseIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType] FOREIGN KEY ([CourseIdentificationSystemTypeId])
REFERENCES [edfi].[CourseIdentificationSystemType] ([CourseIdentificationSystemTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseIdentificationSystemDescriptor_CourseIdentificationSystemType]
ON [edfi].[CourseIdentificationSystemDescriptor] ([CourseIdentificationSystemTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_CourseIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([CourseIdentificationSystemDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseIdentificationSystemDescriptor_Descriptor]
ON [edfi].[CourseIdentificationSystemDescriptor] ([CourseIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseLearningObjective] WITH CHECK ADD CONSTRAINT [FK_CourseLearningObjective_Course] FOREIGN KEY ([EducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseLearningObjective_Course]
ON [edfi].[CourseLearningObjective] ([EducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseLearningObjective] WITH CHECK ADD CONSTRAINT [FK_CourseLearningObjective_LearningObjective] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseLearningObjective_LearningObjective]
ON [edfi].[CourseLearningObjective] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseLearningStandard] WITH CHECK ADD CONSTRAINT [FK_CourseLearningStandard_Course] FOREIGN KEY ([EducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseLearningStandard_Course]
ON [edfi].[CourseLearningStandard] ([EducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseLearningStandard] WITH CHECK ADD CONSTRAINT [FK_CourseLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseLearningStandard_LearningStandard]
ON [edfi].[CourseLearningStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[CourseLevelCharacteristic] WITH CHECK ADD CONSTRAINT [FK_CourseLevelCharacteristic_Course] FOREIGN KEY ([EducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseLevelCharacteristic_Course]
ON [edfi].[CourseLevelCharacteristic] ([EducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseLevelCharacteristic] WITH CHECK ADD CONSTRAINT [FK_CourseLevelCharacteristic_CourseLevelCharacteristicType] FOREIGN KEY ([CourseLevelCharacteristicTypeId])
REFERENCES [edfi].[CourseLevelCharacteristicType] ([CourseLevelCharacteristicTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseLevelCharacteristic_CourseLevelCharacteristicType]
ON [edfi].[CourseLevelCharacteristic] ([CourseLevelCharacteristicTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseOfferedGradeLevel] WITH CHECK ADD CONSTRAINT [FK_CourseOfferedGradeLevel_Course] FOREIGN KEY ([EducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseOfferedGradeLevel_Course]
ON [edfi].[CourseOfferedGradeLevel] ([EducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseOfferedGradeLevel] WITH CHECK ADD CONSTRAINT [FK_CourseOfferedGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseOfferedGradeLevel_GradeLevelDescriptor]
ON [edfi].[CourseOfferedGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseOffering] WITH CHECK ADD CONSTRAINT [FK_CourseOffering_Course] FOREIGN KEY ([EducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
GO

CREATE NONCLUSTERED INDEX [FK_CourseOffering_Course]
ON [edfi].[CourseOffering] ([EducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseOffering] WITH CHECK ADD CONSTRAINT [FK_CourseOffering_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseOffering_School]
ON [edfi].[CourseOffering] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[CourseOffering] WITH CHECK ADD CONSTRAINT [FK_CourseOffering_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [TermDescriptorId])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseOffering_Session]
ON [edfi].[CourseOffering] ([SchoolId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] WITH CHECK ADD CONSTRAINT [FK_CourseOfferingCurriculumUsed_CourseOffering] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[CourseOffering] ([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CourseOfferingCurriculumUsed_CourseOffering]
ON [edfi].[CourseOfferingCurriculumUsed] ([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseOfferingCurriculumUsed] WITH CHECK ADD CONSTRAINT [FK_CourseOfferingCurriculumUsed_CurriculumUsedType] FOREIGN KEY ([CurriculumUsedTypeId])
REFERENCES [edfi].[CurriculumUsedType] ([CurriculumUsedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseOfferingCurriculumUsed_CurriculumUsedType]
ON [edfi].[CourseOfferingCurriculumUsed] ([CurriculumUsedTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_Course] FOREIGN KEY ([CourseEducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_Course]
ON [edfi].[CourseTranscript] ([CourseEducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_CourseAttemptResultType] FOREIGN KEY ([CourseAttemptResultTypeId])
REFERENCES [edfi].[CourseAttemptResultType] ([CourseAttemptResultTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CourseAttemptResultType]
ON [edfi].[CourseTranscript] ([CourseAttemptResultTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_CourseRepeatCodeType] FOREIGN KEY ([CourseRepeatCodeTypeId])
REFERENCES [edfi].[CourseRepeatCodeType] ([CourseRepeatCodeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CourseRepeatCodeType]
ON [edfi].[CourseTranscript] ([CourseRepeatCodeTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_CreditType] FOREIGN KEY ([AttemptedCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CreditType]
ON [edfi].[CourseTranscript] ([AttemptedCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_CreditType1] FOREIGN KEY ([EarnedCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_CreditType1]
ON [edfi].[CourseTranscript] ([EarnedCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_GradeLevelDescriptor] FOREIGN KEY ([WhenTakenGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_GradeLevelDescriptor]
ON [edfi].[CourseTranscript] ([WhenTakenGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_MethodCreditEarnedType] FOREIGN KEY ([MethodCreditEarnedTypeId])
REFERENCES [edfi].[MethodCreditEarnedType] ([MethodCreditEarnedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_MethodCreditEarnedType]
ON [edfi].[CourseTranscript] ([MethodCreditEarnedTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_School]
ON [edfi].[CourseTranscript] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscript] WITH CHECK ADD CONSTRAINT [FK_CourseTranscript_StudentAcademicRecord] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[StudentAcademicRecord] ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscript_StudentAcademicRecord]
ON [edfi].[CourseTranscript] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] WITH CHECK ADD CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType] FOREIGN KEY ([AdditionalCreditTypeId])
REFERENCES [edfi].[AdditionalCreditType] ([AdditionalCreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscriptEarnedAdditionalCredits_AdditionalCreditType]
ON [edfi].[CourseTranscriptEarnedAdditionalCredits] ([AdditionalCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[CourseTranscriptEarnedAdditionalCredits] WITH CHECK ADD CONSTRAINT [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript] FOREIGN KEY ([CourseAttemptResultTypeId], [StudentUSI], [EducationOrganizationId], [CourseEducationOrganizationId], [SchoolYear], [TermDescriptorId], [CourseCode])
REFERENCES [edfi].[CourseTranscript] ([CourseAttemptResultTypeId], [StudentUSI], [EducationOrganizationId], [CourseEducationOrganizationId], [SchoolYear], [TermDescriptorId], [CourseCode])
GO

CREATE NONCLUSTERED INDEX [FK_CourseTranscriptEarnedAdditionalCredits_CourseTranscript]
ON [edfi].[CourseTranscriptEarnedAdditionalCredits] ([CourseAttemptResultTypeId] ASC, [StudentUSI] ASC, [EducationOrganizationId] ASC, [CourseEducationOrganizationId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[CredentialFieldDescriptor] WITH CHECK ADD CONSTRAINT [FK_CredentialFieldDescriptor_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_CredentialFieldDescriptor_AcademicSubjectDescriptor]
ON [edfi].[CredentialFieldDescriptor] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[CredentialFieldDescriptor] WITH CHECK ADD CONSTRAINT [FK_CredentialFieldDescriptor_Descriptor] FOREIGN KEY ([CredentialFieldDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_CredentialFieldDescriptor_Descriptor]
ON [edfi].[CredentialFieldDescriptor] ([CredentialFieldDescriptorId] ASC)
GO

ALTER TABLE [edfi].[DiagnosisDescriptor] WITH CHECK ADD CONSTRAINT [FK_DiagnosisDescriptor_Descriptor] FOREIGN KEY ([DiagnosisDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DiagnosisDescriptor_Descriptor]
ON [edfi].[DiagnosisDescriptor] ([DiagnosisDescriptorId] ASC)
GO

ALTER TABLE [edfi].[DiagnosisDescriptor] WITH CHECK ADD CONSTRAINT [FK_DiagnosisDescriptor_DiagnosisType] FOREIGN KEY ([DiagnosisTypeId])
REFERENCES [edfi].[DiagnosisType] ([DiagnosisTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_DiagnosisDescriptor_DiagnosisType]
ON [edfi].[DiagnosisDescriptor] ([DiagnosisTypeId] ASC)
GO

ALTER TABLE [edfi].[DisabilityDescriptor] WITH CHECK ADD CONSTRAINT [FK_DisabilityDescriptor_Descriptor] FOREIGN KEY ([DisabilityDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DisabilityDescriptor_Descriptor]
ON [edfi].[DisabilityDescriptor] ([DisabilityDescriptorId] ASC)
GO

ALTER TABLE [edfi].[DisabilityDescriptor] WITH CHECK ADD CONSTRAINT [FK_DisabilityDescriptor_DisabilityCategoryType] FOREIGN KEY ([DisabilityCategoryTypeId])
REFERENCES [edfi].[DisabilityCategoryType] ([DisabilityCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_DisabilityDescriptor_DisabilityCategoryType]
ON [edfi].[DisabilityDescriptor] ([DisabilityCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[DisabilityDescriptor] WITH CHECK ADD CONSTRAINT [FK_DisabilityDescriptor_DisabilityType] FOREIGN KEY ([DisabilityTypeId])
REFERENCES [edfi].[DisabilityType] ([DisabilityTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_DisabilityDescriptor_DisabilityType]
ON [edfi].[DisabilityDescriptor] ([DisabilityTypeId] ASC)
GO

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK ADD CONSTRAINT [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType] FOREIGN KEY ([DisciplineActionLengthDifferenceReasonTypeId])
REFERENCES [edfi].[DisciplineActionLengthDifferenceReasonType] ([DisciplineActionLengthDifferenceReasonTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineAction_DisciplineActionLengthDifferenceReasonType]
ON [edfi].[DisciplineAction] ([DisciplineActionLengthDifferenceReasonTypeId] ASC)
GO

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK ADD CONSTRAINT [FK_DisciplineAction_School] FOREIGN KEY ([ResponsibilitySchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineAction_School]
ON [edfi].[DisciplineAction] ([ResponsibilitySchoolId] ASC)
GO

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK ADD CONSTRAINT [FK_DisciplineAction_School1] FOREIGN KEY ([AssignmentSchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineAction_School1]
ON [edfi].[DisciplineAction] ([AssignmentSchoolId] ASC)
GO

ALTER TABLE [edfi].[DisciplineAction] WITH CHECK ADD CONSTRAINT [FK_DisciplineAction_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineAction_Student]
ON [edfi].[DisciplineAction] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[DisciplineActionDiscipline] WITH CHECK ADD CONSTRAINT [FK_DisciplineActionDiscipline_DisciplineAction] FOREIGN KEY ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
REFERENCES [edfi].[DisciplineAction] ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineActionDiscipline_DisciplineAction]
ON [edfi].[DisciplineActionDiscipline] ([DisciplineActionIdentifier] ASC, [StudentUSI] ASC, [DisciplineDate] ASC)
GO

ALTER TABLE [edfi].[DisciplineActionDiscipline] WITH CHECK ADD CONSTRAINT [FK_DisciplineActionDiscipline_DisciplineDescriptor] FOREIGN KEY ([DisciplineDescriptorId])
REFERENCES [edfi].[DisciplineDescriptor] ([DisciplineDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineActionDiscipline_DisciplineDescriptor]
ON [edfi].[DisciplineActionDiscipline] ([DisciplineDescriptorId] ASC)
GO

ALTER TABLE [edfi].[DisciplineActionDisciplineIncident] WITH CHECK ADD CONSTRAINT [FK_DisciplineActionDisciplineIncident_DisciplineAction] FOREIGN KEY ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
REFERENCES [edfi].[DisciplineAction] ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineActionDisciplineIncident_DisciplineAction]
ON [edfi].[DisciplineActionDisciplineIncident] ([DisciplineActionIdentifier] ASC, [StudentUSI] ASC, [DisciplineDate] ASC)
GO

ALTER TABLE [edfi].[DisciplineActionDisciplineIncident] WITH CHECK ADD CONSTRAINT [FK_DisciplineActionDisciplineIncident_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId])
REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineActionDisciplineIncident_DisciplineIncident]
ON [edfi].[DisciplineActionDisciplineIncident] ([IncidentIdentifier] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[DisciplineActionStaff] WITH CHECK ADD CONSTRAINT [FK_DisciplineActionStaff_DisciplineAction] FOREIGN KEY ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
REFERENCES [edfi].[DisciplineAction] ([DisciplineActionIdentifier], [StudentUSI], [DisciplineDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineActionStaff_DisciplineAction]
ON [edfi].[DisciplineActionStaff] ([DisciplineActionIdentifier] ASC, [StudentUSI] ASC, [DisciplineDate] ASC)
GO

ALTER TABLE [edfi].[DisciplineActionStaff] WITH CHECK ADD CONSTRAINT [FK_DisciplineActionStaff_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineActionStaff_Staff]
ON [edfi].[DisciplineActionStaff] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[DisciplineDescriptor] WITH CHECK ADD CONSTRAINT [FK_DisciplineDescriptor_Descriptor] FOREIGN KEY ([DisciplineDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineDescriptor_Descriptor]
ON [edfi].[DisciplineDescriptor] ([DisciplineDescriptorId] ASC)
GO

ALTER TABLE [edfi].[DisciplineDescriptor] WITH CHECK ADD CONSTRAINT [FK_DisciplineDescriptor_DisciplineType] FOREIGN KEY ([DisciplineTypeId])
REFERENCES [edfi].[DisciplineType] ([DisciplineTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineDescriptor_DisciplineType]
ON [edfi].[DisciplineDescriptor] ([DisciplineTypeId] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncident] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncident_IncidentLocationType] FOREIGN KEY ([IncidentLocationTypeId])
REFERENCES [edfi].[IncidentLocationType] ([IncidentLocationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncident_IncidentLocationType]
ON [edfi].[DisciplineIncident] ([IncidentLocationTypeId] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncident] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncident_ReporterDescriptionDescriptor] FOREIGN KEY ([ReporterDescriptionDescriptorId])
REFERENCES [edfi].[ReporterDescriptionDescriptor] ([ReporterDescriptionDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncident_ReporterDescriptionDescriptor]
ON [edfi].[DisciplineIncident] ([ReporterDescriptionDescriptorId] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncident] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncident_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncident_School]
ON [edfi].[DisciplineIncident] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncident] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncident_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncident_Staff]
ON [edfi].[DisciplineIncident] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncidentBehavior] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncidentBehavior_BehaviorDescriptor] FOREIGN KEY ([BehaviorDescriptorId])
REFERENCES [edfi].[BehaviorDescriptor] ([BehaviorDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncidentBehavior_BehaviorDescriptor]
ON [edfi].[DisciplineIncidentBehavior] ([BehaviorDescriptorId] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncidentBehavior] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncidentBehavior_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId])
REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncidentBehavior_DisciplineIncident]
ON [edfi].[DisciplineIncidentBehavior] ([IncidentIdentifier] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncidentWeapon] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncidentWeapon_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId])
REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncidentWeapon_DisciplineIncident]
ON [edfi].[DisciplineIncidentWeapon] ([IncidentIdentifier] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[DisciplineIncidentWeapon] WITH CHECK ADD CONSTRAINT [FK_DisciplineIncidentWeapon_WeaponDescriptor] FOREIGN KEY ([WeaponDescriptorId])
REFERENCES [edfi].[WeaponDescriptor] ([WeaponDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_DisciplineIncidentWeapon_WeaponDescriptor]
ON [edfi].[DisciplineIncidentWeapon] ([WeaponDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EducationContent] WITH CHECK ADD CONSTRAINT [FK_EducationContent_ContentClassType] FOREIGN KEY ([ContentClassTypeId])
REFERENCES [edfi].[ContentClassType] ([ContentClassTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContent_ContentClassType]
ON [edfi].[EducationContent] ([ContentClassTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationContent] WITH CHECK ADD CONSTRAINT [FK_EducationContent_CostRateType] FOREIGN KEY ([CostRateTypeId])
REFERENCES [edfi].[CostRateType] ([CostRateTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContent_CostRateType]
ON [edfi].[EducationContent] ([CostRateTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationContent] WITH CHECK ADD CONSTRAINT [FK_EducationContent_InteractivityStyleType] FOREIGN KEY ([InteractivityStyleTypeId])
REFERENCES [edfi].[InteractivityStyleType] ([InteractivityStyleTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContent_InteractivityStyleType]
ON [edfi].[EducationContent] ([InteractivityStyleTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationContent] WITH CHECK ADD CONSTRAINT [FK_EducationContent_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContent_LearningStandard]
ON [edfi].[EducationContent] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_EducationContentAppropriateGradeLevel_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentAppropriateGradeLevel_EducationContent]
ON [edfi].[EducationContentAppropriateGradeLevel] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentAppropriateGradeLevel_GradeLevelDescriptor]
ON [edfi].[EducationContentAppropriateGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EducationContentAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_EducationContentAppropriateSex_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentAppropriateSex_EducationContent]
ON [edfi].[EducationContentAppropriateSex] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_EducationContentAppropriateSex_SexType] FOREIGN KEY ([SexTypeId])
REFERENCES [edfi].[SexType] ([SexTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentAppropriateSex_SexType]
ON [edfi].[EducationContentAppropriateSex] ([SexTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationContentAuthor] WITH CHECK ADD CONSTRAINT [FK_EducationContentAuthor_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentAuthor_EducationContent]
ON [edfi].[EducationContentAuthor] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] WITH CHECK ADD CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentDerivativeSourceEducationContent_EducationContent]
ON [edfi].[EducationContentDerivativeSourceEducationContent] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentDerivativeSourceEducationContent] WITH CHECK ADD CONSTRAINT [FK_EducationContentDerivativeSourceEducationContent_EducationContent1] FOREIGN KEY ([DerivativeSourceContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentDerivativeSourceEducationContent_EducationContent1]
ON [edfi].[EducationContentDerivativeSourceEducationContent] ([DerivativeSourceContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] WITH CHECK ADD CONSTRAINT [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentDerivativeSourceLearningResourceMetadataURI_EducationContent]
ON [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentDerivativeSourceURI] WITH CHECK ADD CONSTRAINT [FK_EducationContentDerivativeSourceURI_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentDerivativeSourceURI_EducationContent]
ON [edfi].[EducationContentDerivativeSourceURI] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentLanguage] WITH CHECK ADD CONSTRAINT [FK_EducationContentLanguage_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentLanguage_EducationContent]
ON [edfi].[EducationContentLanguage] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[EducationContentLanguage] WITH CHECK ADD CONSTRAINT [FK_EducationContentLanguage_LanguageDescriptor] FOREIGN KEY ([LanguageDescriptorId])
REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationContentLanguage_LanguageDescriptor]
ON [edfi].[EducationContentLanguage] ([LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganization] WITH CHECK ADD CONSTRAINT [FK_EducationOrganization_OperationalStatusType] FOREIGN KEY ([OperationalStatusTypeId])
REFERENCES [edfi].[OperationalStatusType] ([OperationalStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganization_OperationalStatusType]
ON [edfi].[EducationOrganization] ([OperationalStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationAddress] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationAddress_AddressType]
ON [edfi].[EducationOrganizationAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationAddress] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationAddress_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationAddress_EducationOrganization]
ON [edfi].[EducationOrganizationAddress] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationAddress] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationAddress_StateAbbreviationType] FOREIGN KEY ([StateAbbreviationTypeId])
REFERENCES [edfi].[StateAbbreviationType] ([StateAbbreviationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationAddress_StateAbbreviationType]
ON [edfi].[EducationOrganizationAddress] ([StateAbbreviationTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationCategory] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationCategory_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationCategory_EducationOrganization]
ON [edfi].[EducationOrganizationCategory] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationCategory] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationCategory_EducationOrganizationCategoryType] FOREIGN KEY ([EducationOrganizationCategoryTypeId])
REFERENCES [edfi].[EducationOrganizationCategoryType] ([EducationOrganizationCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationCategory_EducationOrganizationCategoryType]
ON [edfi].[EducationOrganizationCategory] ([EducationOrganizationCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationIdentificationCode_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationIdentificationCode_EducationOrganization]
ON [edfi].[EducationOrganizationIdentificationCode] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor] FOREIGN KEY ([EducationOrganizationIdentificationSystemDescriptorId])
REFERENCES [edfi].[EducationOrganizationIdentificationSystemDescriptor] ([EducationOrganizationIdentificationSystemDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationIdentificationCode_EducationOrganizationIdentificationSystemDescriptor]
ON [edfi].[EducationOrganizationIdentificationCode] ([EducationOrganizationIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([EducationOrganizationIdentificationSystemDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationIdentificationSystemDescriptor_Descriptor]
ON [edfi].[EducationOrganizationIdentificationSystemDescriptor] ([EducationOrganizationIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType] FOREIGN KEY ([EducationOrganizationIdentificationSystemTypeId])
REFERENCES [edfi].[EducationOrganizationIdentificationSystemType] ([EducationOrganizationIdentificationSystemTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationIdentificationSystemDescriptor_EducationOrganizationIdentificationSystemType]
ON [edfi].[EducationOrganizationIdentificationSystemDescriptor] ([EducationOrganizationIdentificationSystemTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInstitutionTelephone_EducationOrganization]
ON [edfi].[EducationOrganizationInstitutionTelephone] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationInstitutionTelephone] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType] FOREIGN KEY ([InstitutionTelephoneNumberTypeId])
REFERENCES [edfi].[InstitutionTelephoneNumberType] ([InstitutionTelephoneNumberTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInstitutionTelephone_InstitutionTelephoneNumberType]
ON [edfi].[EducationOrganizationInstitutionTelephone] ([InstitutionTelephoneNumberTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInternationalAddress_AddressType]
ON [edfi].[EducationOrganizationInternationalAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_CountryDescriptor] FOREIGN KEY ([CountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInternationalAddress_CountryDescriptor]
ON [edfi].[EducationOrganizationInternationalAddress] ([CountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationInternationalAddress_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInternationalAddress_EducationOrganization]
ON [edfi].[EducationOrganizationInternationalAddress] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInterventionPrescriptionAssociation_EducationOrganization]
ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationInterventionPrescriptionAssociation] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationInterventionPrescriptionAssociation_InterventionPrescription]
ON [edfi].[EducationOrganizationInterventionPrescriptionAssociation] ([InterventionPrescriptionIdentificationCode] ASC, [InterventionPrescriptionEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationNetwork] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationNetwork_EducationOrganization] FOREIGN KEY ([EducationOrganizationNetworkId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationNetwork_EducationOrganization]
ON [edfi].[EducationOrganizationNetwork] ([EducationOrganizationNetworkId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationNetwork] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationNetwork_NetworkPurposeType] FOREIGN KEY ([NetworkPurposeTypeId])
REFERENCES [edfi].[NetworkPurposeType] ([NetworkPurposeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationNetwork_NetworkPurposeType]
ON [edfi].[EducationOrganizationNetwork] ([NetworkPurposeTypeId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganization] FOREIGN KEY ([MemberEducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationNetworkAssociation_EducationOrganization]
ON [edfi].[EducationOrganizationNetworkAssociation] ([MemberEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationNetworkAssociation] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork] FOREIGN KEY ([EducationOrganizationNetworkId])
REFERENCES [edfi].[EducationOrganizationNetwork] ([EducationOrganizationNetworkId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationNetworkAssociation_EducationOrganizationNetwork]
ON [edfi].[EducationOrganizationNetworkAssociation] ([EducationOrganizationNetworkId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationPeerAssociation_EducationOrganization]
ON [edfi].[EducationOrganizationPeerAssociation] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationOrganizationPeerAssociation] WITH CHECK ADD CONSTRAINT [FK_EducationOrganizationPeerAssociation_EducationOrganization1] FOREIGN KEY ([PeerEducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationOrganizationPeerAssociation_EducationOrganization1]
ON [edfi].[EducationOrganizationPeerAssociation] ([PeerEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[EducationServiceCenter] WITH CHECK ADD CONSTRAINT [FK_EducationServiceCenter_EducationOrganization] FOREIGN KEY ([EducationServiceCenterId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EducationServiceCenter_EducationOrganization]
ON [edfi].[EducationServiceCenter] ([EducationServiceCenterId] ASC)
GO

ALTER TABLE [edfi].[EducationServiceCenter] WITH CHECK ADD CONSTRAINT [FK_EducationServiceCenter_StateEducationAgency] FOREIGN KEY ([StateEducationAgencyId])
REFERENCES [edfi].[StateEducationAgency] ([StateEducationAgencyId])
GO

CREATE NONCLUSTERED INDEX [FK_EducationServiceCenter_StateEducationAgency]
ON [edfi].[EducationServiceCenter] ([StateEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[EmploymentStatusDescriptor] WITH CHECK ADD CONSTRAINT [FK_EmploymentStatusDescriptor_Descriptor] FOREIGN KEY ([EmploymentStatusDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EmploymentStatusDescriptor_Descriptor]
ON [edfi].[EmploymentStatusDescriptor] ([EmploymentStatusDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EmploymentStatusDescriptor] WITH CHECK ADD CONSTRAINT [FK_EmploymentStatusDescriptor_EmploymentStatusType] FOREIGN KEY ([EmploymentStatusTypeId])
REFERENCES [edfi].[EmploymentStatusType] ([EmploymentStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EmploymentStatusDescriptor_EmploymentStatusType]
ON [edfi].[EmploymentStatusDescriptor] ([EmploymentStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[EntryTypeDescriptor] WITH CHECK ADD CONSTRAINT [FK_EntryTypeDescriptor_Descriptor] FOREIGN KEY ([EntryTypeDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_EntryTypeDescriptor_Descriptor]
ON [edfi].[EntryTypeDescriptor] ([EntryTypeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[EntryTypeDescriptor] WITH CHECK ADD CONSTRAINT [FK_EntryTypeDescriptor_EntryType] FOREIGN KEY ([EntryTypeId])
REFERENCES [edfi].[EntryType] ([EntryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_EntryTypeDescriptor_EntryType]
ON [edfi].[EntryTypeDescriptor] ([EntryTypeId] ASC)
GO

ALTER TABLE [edfi].[ExitWithdrawTypeDescriptor] WITH CHECK ADD CONSTRAINT [FK_ExitWithdrawTypeDescriptor_Descriptor] FOREIGN KEY ([ExitWithdrawTypeDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ExitWithdrawTypeDescriptor_Descriptor]
ON [edfi].[ExitWithdrawTypeDescriptor] ([ExitWithdrawTypeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ExitWithdrawTypeDescriptor] WITH CHECK ADD CONSTRAINT [FK_ExitWithdrawTypeDescriptor_ExitWithdrawType] FOREIGN KEY ([ExitWithdrawTypeId])
REFERENCES [edfi].[ExitWithdrawType] ([ExitWithdrawTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ExitWithdrawTypeDescriptor_ExitWithdrawType]
ON [edfi].[ExitWithdrawTypeDescriptor] ([ExitWithdrawTypeId] ASC)
GO

ALTER TABLE [edfi].[FeederSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_FeederSchoolAssociation_School] FOREIGN KEY ([FeederSchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_FeederSchoolAssociation_School]
ON [edfi].[FeederSchoolAssociation] ([FeederSchoolId] ASC)
GO

ALTER TABLE [edfi].[FeederSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_FeederSchoolAssociation_School1] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_FeederSchoolAssociation_School1]
ON [edfi].[FeederSchoolAssociation] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[Grade] WITH CHECK ADD CONSTRAINT [FK_Grade_GradeType] FOREIGN KEY ([GradeTypeId])
REFERENCES [edfi].[GradeType] ([GradeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Grade_GradeType]
ON [edfi].[Grade] ([GradeTypeId] ASC)
GO

ALTER TABLE [edfi].[Grade] WITH CHECK ADD CONSTRAINT [FK_Grade_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_Grade_GradingPeriod]
ON [edfi].[Grade] ([GradingPeriodDescriptorId] ASC, [SchoolId] ASC, [GradingPeriodBeginDate] ASC)
GO

ALTER TABLE [edfi].[Grade] WITH CHECK ADD CONSTRAINT [FK_Grade_PerformanceBaseConversionType] FOREIGN KEY ([PerformanceBaseConversionTypeId])
REFERENCES [edfi].[PerformanceBaseConversionType] ([PerformanceBaseConversionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Grade_PerformanceBaseConversionType]
ON [edfi].[Grade] ([PerformanceBaseConversionTypeId] ASC)
GO

ALTER TABLE [edfi].[Grade] WITH CHECK ADD CONSTRAINT [FK_Grade_StudentSectionAssociation] FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
REFERENCES [edfi].[StudentSectionAssociation] ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_Grade_StudentSectionAssociation]
ON [edfi].[Grade] ([StudentUSI] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[GradebookEntry] WITH CHECK ADD CONSTRAINT [FK_GradebookEntry_GradebookEntryType] FOREIGN KEY ([GradebookEntryTypeId])
REFERENCES [edfi].[GradebookEntryType] ([GradebookEntryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GradebookEntry_GradebookEntryType]
ON [edfi].[GradebookEntry] ([GradebookEntryTypeId] ASC)
GO

ALTER TABLE [edfi].[GradebookEntry] WITH CHECK ADD CONSTRAINT [FK_GradebookEntry_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_GradebookEntry_GradingPeriod]
ON [edfi].[GradebookEntry] ([GradingPeriodDescriptorId] ASC, [SchoolId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[GradebookEntry] WITH CHECK ADD CONSTRAINT [FK_GradebookEntry_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GradebookEntry_Section]
ON [edfi].[GradebookEntry] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[GradebookEntryLearningObjective] WITH CHECK ADD CONSTRAINT [FK_GradebookEntryLearningObjective_GradebookEntry] FOREIGN KEY ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
REFERENCES [edfi].[GradebookEntry] ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GradebookEntryLearningObjective_GradebookEntry]
ON [edfi].[GradebookEntryLearningObjective] ([GradebookEntryTitle] ASC, [ClassroomIdentificationCode] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [LocalCourseCode] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [DateAssigned] ASC)
GO

ALTER TABLE [edfi].[GradebookEntryLearningObjective] WITH CHECK ADD CONSTRAINT [FK_GradebookEntryLearningObjective_LearningObjective] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_GradebookEntryLearningObjective_LearningObjective]
ON [edfi].[GradebookEntryLearningObjective] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GradebookEntryLearningStandard] WITH CHECK ADD CONSTRAINT [FK_GradebookEntryLearningStandard_GradebookEntry] FOREIGN KEY ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
REFERENCES [edfi].[GradebookEntry] ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
ON DELETE CASCADE
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GradebookEntryLearningStandard_GradebookEntry]
ON [edfi].[GradebookEntryLearningStandard] ([GradebookEntryTitle] ASC, [ClassroomIdentificationCode] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [LocalCourseCode] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [DateAssigned] ASC)
GO

ALTER TABLE [edfi].[GradebookEntryLearningStandard] WITH CHECK ADD CONSTRAINT [FK_GradebookEntryLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_GradebookEntryLearningStandard_LearningStandard]
ON [edfi].[GradebookEntryLearningStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[GradeLevelDescriptor] WITH CHECK ADD CONSTRAINT [FK_GradeLevelDescriptor_Descriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GradeLevelDescriptor_Descriptor]
ON [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GradeLevelDescriptor] WITH CHECK ADD CONSTRAINT [FK_GradeLevelDescriptor_GradeLevelType] FOREIGN KEY ([GradeLevelTypeId])
REFERENCES [edfi].[GradeLevelType] ([GradeLevelTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GradeLevelDescriptor_GradeLevelType]
ON [edfi].[GradeLevelDescriptor] ([GradeLevelTypeId] ASC)
GO

ALTER TABLE [edfi].[GradingPeriod] WITH CHECK ADD CONSTRAINT [FK_GradingPeriod_GradingPeriodDescriptor] FOREIGN KEY ([GradingPeriodDescriptorId])
REFERENCES [edfi].[GradingPeriodDescriptor] ([GradingPeriodDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_GradingPeriod_GradingPeriodDescriptor]
ON [edfi].[GradingPeriod] ([GradingPeriodDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GradingPeriod] WITH CHECK ADD CONSTRAINT [FK_GradingPeriod_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_GradingPeriod_School]
ON [edfi].[GradingPeriod] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[GradingPeriodDescriptor] WITH CHECK ADD CONSTRAINT [FK_GradingPeriodDescriptor_Descriptor] FOREIGN KEY ([GradingPeriodDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GradingPeriodDescriptor_Descriptor]
ON [edfi].[GradingPeriodDescriptor] ([GradingPeriodDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GradingPeriodDescriptor] WITH CHECK ADD CONSTRAINT [FK_GradingPeriodDescriptor_GradingPeriodType] FOREIGN KEY ([GradingPeriodTypeId])
REFERENCES [edfi].[GradingPeriodType] ([GradingPeriodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GradingPeriodDescriptor_GradingPeriodType]
ON [edfi].[GradingPeriodDescriptor] ([GradingPeriodTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK ADD CONSTRAINT [FK_GraduationPlan_CreditType] FOREIGN KEY ([TotalRequiredCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlan_CreditType]
ON [edfi].[GraduationPlan] ([TotalRequiredCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK ADD CONSTRAINT [FK_GraduationPlan_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlan_EducationOrganization]
ON [edfi].[GraduationPlan] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK ADD CONSTRAINT [FK_GraduationPlan_GraduationPlanTypeDescriptor] FOREIGN KEY ([GraduationPlanTypeDescriptorId])
REFERENCES [edfi].[GraduationPlanTypeDescriptor] ([GraduationPlanTypeDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlan_GraduationPlanTypeDescriptor]
ON [edfi].[GraduationPlan] ([GraduationPlanTypeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlan] WITH CHECK ADD CONSTRAINT [FK_GraduationPlan_SchoolYearType] FOREIGN KEY ([GraduationSchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlan_SchoolYearType]
ON [edfi].[GraduationPlan] ([GraduationSchoolYear] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_CreditType] FOREIGN KEY ([CreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsByCourse_CreditType]
ON [edfi].[GraduationPlanCreditsByCourse] ([CreditTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor] FOREIGN KEY ([WhenTakenGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsByCourse_GradeLevelDescriptor]
ON [edfi].[GraduationPlanCreditsByCourse] ([WhenTakenGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsByCourse] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsByCourse_GraduationPlan] FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
REFERENCES [edfi].[GraduationPlan] ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsByCourse_GraduationPlan]
ON [edfi].[GraduationPlanCreditsByCourse] ([GraduationPlanTypeDescriptorId] ASC, [EducationOrganizationId] ASC, [GraduationSchoolYear] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_Course] FOREIGN KEY ([CourseEducationOrganizationId], [CourseCode])
REFERENCES [edfi].[Course] ([EducationOrganizationId], [CourseCode])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsByCourseCourse_Course]
ON [edfi].[GraduationPlanCreditsByCourseCourse] ([CourseEducationOrganizationId] ASC, [CourseCode] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsByCourseCourse] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse] FOREIGN KEY ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [CourseSetName])
REFERENCES [edfi].[GraduationPlanCreditsByCourse] ([EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear], [CourseSetName])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsByCourseCourse_GraduationPlanCreditsByCourse]
ON [edfi].[GraduationPlanCreditsByCourseCourse] ([EducationOrganizationId] ASC, [GraduationPlanTypeDescriptorId] ASC, [GraduationSchoolYear] ASC, [CourseSetName] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsBySubject_AcademicSubjectDescriptor]
ON [edfi].[GraduationPlanCreditsBySubject] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_CreditType] FOREIGN KEY ([CreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsBySubject_CreditType]
ON [edfi].[GraduationPlanCreditsBySubject] ([CreditTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanCreditsBySubject] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanCreditsBySubject_GraduationPlan] FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
REFERENCES [edfi].[GraduationPlan] ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanCreditsBySubject_GraduationPlan]
ON [edfi].[GraduationPlanCreditsBySubject] ([GraduationPlanTypeDescriptorId] ASC, [EducationOrganizationId] ASC, [GraduationSchoolYear] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessment_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessment_Assessment]
ON [edfi].[GraduationPlanRequiredAssessment] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessment] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessment_GraduationPlan] FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
REFERENCES [edfi].[GraduationPlan] ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessment_GraduationPlan]
ON [edfi].[GraduationPlanRequiredAssessment] ([GraduationPlanTypeDescriptorId] ASC, [EducationOrganizationId] ASC, [GraduationSchoolYear] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_AssessmentReportingMethodType]
ON [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
REFERENCES [edfi].[GraduationPlanRequiredAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_GraduationPlanRequiredAssessment]
ON [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [EducationOrganizationId] ASC, [GraduationPlanTypeDescriptorId] ASC, [GraduationSchoolYear] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor] FOREIGN KEY ([PerformanceLevelDescriptorId])
REFERENCES [edfi].[PerformanceLevelDescriptor] ([PerformanceLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_PerformanceLevelDescriptor]
ON [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ([PerformanceLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentAssessmentPerformanceLevel_ResultDatatypeType]
ON [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentScore_AssessmentReportingMethodType]
ON [edfi].[GraduationPlanRequiredAssessmentScore] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
REFERENCES [edfi].[GraduationPlanRequiredAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [EducationOrganizationId], [GraduationPlanTypeDescriptorId], [GraduationSchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentScore_GraduationPlanRequiredAssessment]
ON [edfi].[GraduationPlanRequiredAssessmentScore] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [EducationOrganizationId] ASC, [GraduationPlanTypeDescriptorId] ASC, [GraduationSchoolYear] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanRequiredAssessmentScore] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanRequiredAssessmentScore_ResultDatatypeType]
ON [edfi].[GraduationPlanRequiredAssessmentScore] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanTypeDescriptor] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanTypeDescriptor_Descriptor] FOREIGN KEY ([GraduationPlanTypeDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanTypeDescriptor_Descriptor]
ON [edfi].[GraduationPlanTypeDescriptor] ([GraduationPlanTypeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[GraduationPlanTypeDescriptor] WITH CHECK ADD CONSTRAINT [FK_GraduationPlanTypeDescriptor_GraduationPlanType] FOREIGN KEY ([GraduationPlanTypeId])
REFERENCES [edfi].[GraduationPlanType] ([GraduationPlanTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_GraduationPlanTypeDescriptor_GraduationPlanType]
ON [edfi].[GraduationPlanTypeDescriptor] ([GraduationPlanTypeId] ASC)
GO

ALTER TABLE [edfi].[Intervention] WITH CHECK ADD CONSTRAINT [FK_Intervention_DeliveryMethodType] FOREIGN KEY ([DeliveryMethodTypeId])
REFERENCES [edfi].[DeliveryMethodType] ([DeliveryMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Intervention_DeliveryMethodType]
ON [edfi].[Intervention] ([DeliveryMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[Intervention] WITH CHECK ADD CONSTRAINT [FK_Intervention_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_Intervention_EducationOrganization]
ON [edfi].[Intervention] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[Intervention] WITH CHECK ADD CONSTRAINT [FK_Intervention_InterventionClassType] FOREIGN KEY ([InterventionClassTypeId])
REFERENCES [edfi].[InterventionClassType] ([InterventionClassTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Intervention_InterventionClassType]
ON [edfi].[Intervention] ([InterventionClassTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionAppropriateGradeLevel_GradeLevelDescriptor]
ON [edfi].[InterventionAppropriateGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[InterventionAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_InterventionAppropriateGradeLevel_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionAppropriateGradeLevel_Intervention]
ON [edfi].[InterventionAppropriateGradeLevel] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_InterventionAppropriateSex_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionAppropriateSex_Intervention]
ON [edfi].[InterventionAppropriateSex] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_InterventionAppropriateSex_SexType] FOREIGN KEY ([SexTypeId])
REFERENCES [edfi].[SexType] ([SexTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionAppropriateSex_SexType]
ON [edfi].[InterventionAppropriateSex] ([SexTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionDiagnosis] WITH CHECK ADD CONSTRAINT [FK_InterventionDiagnosis_DiagnosisDescriptor] FOREIGN KEY ([DiagnosisDescriptorId])
REFERENCES [edfi].[DiagnosisDescriptor] ([DiagnosisDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionDiagnosis_DiagnosisDescriptor]
ON [edfi].[InterventionDiagnosis] ([DiagnosisDescriptorId] ASC)
GO

ALTER TABLE [edfi].[InterventionDiagnosis] WITH CHECK ADD CONSTRAINT [FK_InterventionDiagnosis_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionDiagnosis_Intervention]
ON [edfi].[InterventionDiagnosis] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionEducationContent] WITH CHECK ADD CONSTRAINT [FK_InterventionEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionEducationContent_EducationContent]
ON [edfi].[InterventionEducationContent] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[InterventionEducationContent] WITH CHECK ADD CONSTRAINT [FK_InterventionEducationContent_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionEducationContent_Intervention]
ON [edfi].[InterventionEducationContent] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionInterventionPrescription] WITH CHECK ADD CONSTRAINT [FK_InterventionInterventionPrescription_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionInterventionPrescription_Intervention]
ON [edfi].[InterventionInterventionPrescription] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionInterventionPrescription] WITH CHECK ADD CONSTRAINT [FK_InterventionInterventionPrescription_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionInterventionPrescription_InterventionPrescription]
ON [edfi].[InterventionInterventionPrescription] ([InterventionPrescriptionIdentificationCode] ASC, [InterventionPrescriptionEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionLearningResourceMetadataURI] WITH CHECK ADD CONSTRAINT [FK_InterventionLearningResourceMetadataURI_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionLearningResourceMetadataURI_Intervention]
ON [edfi].[InterventionLearningResourceMetadataURI] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionMeetingTime] WITH CHECK ADD CONSTRAINT [FK_InterventionMeetingTime_ClassPeriod] FOREIGN KEY ([SchoolId], [ClassPeriodName])
REFERENCES [edfi].[ClassPeriod] ([SchoolId], [ClassPeriodName])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionMeetingTime_ClassPeriod]
ON [edfi].[InterventionMeetingTime] ([SchoolId] ASC, [ClassPeriodName] ASC)
GO

ALTER TABLE [edfi].[InterventionMeetingTime] WITH CHECK ADD CONSTRAINT [FK_InterventionMeetingTime_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionMeetingTime_Intervention]
ON [edfi].[InterventionMeetingTime] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPopulationServed] WITH CHECK ADD CONSTRAINT [FK_InterventionPopulationServed_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPopulationServed_Intervention]
ON [edfi].[InterventionPopulationServed] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPopulationServed] WITH CHECK ADD CONSTRAINT [FK_InterventionPopulationServed_PopulationServedType] FOREIGN KEY ([PopulationServedTypeId])
REFERENCES [edfi].[PopulationServedType] ([PopulationServedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPopulationServed_PopulationServedType]
ON [edfi].[InterventionPopulationServed] ([PopulationServedTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescription] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescription_DeliveryMethodType] FOREIGN KEY ([DeliveryMethodTypeId])
REFERENCES [edfi].[DeliveryMethodType] ([DeliveryMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescription_DeliveryMethodType]
ON [edfi].[InterventionPrescription] ([DeliveryMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescription] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescription_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescription_EducationOrganization]
ON [edfi].[InterventionPrescription] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescription] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescription_InterventionClassType] FOREIGN KEY ([InterventionClassTypeId])
REFERENCES [edfi].[InterventionClassType] ([InterventionClassTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescription_InterventionClassType]
ON [edfi].[InterventionPrescription] ([InterventionClassTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionAppropriateGradeLevel_GradeLevelDescriptor]
ON [edfi].[InterventionPrescriptionAppropriateGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionAppropriateGradeLevel_InterventionPrescription]
ON [edfi].[InterventionPrescriptionAppropriateGradeLevel] ([InterventionPrescriptionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionAppropriateSex_InterventionPrescription]
ON [edfi].[InterventionPrescriptionAppropriateSex] ([InterventionPrescriptionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionAppropriateSex_SexType] FOREIGN KEY ([SexTypeId])
REFERENCES [edfi].[SexType] ([SexTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionAppropriateSex_SexType]
ON [edfi].[InterventionPrescriptionAppropriateSex] ([SexTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor] FOREIGN KEY ([DiagnosisDescriptorId])
REFERENCES [edfi].[DiagnosisDescriptor] ([DiagnosisDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionDiagnosis_DiagnosisDescriptor]
ON [edfi].[InterventionPrescriptionDiagnosis] ([DiagnosisDescriptorId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionDiagnosis] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionDiagnosis_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionDiagnosis_InterventionPrescription]
ON [edfi].[InterventionPrescriptionDiagnosis] ([InterventionPrescriptionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionEducationContent_EducationContent]
ON [edfi].[InterventionPrescriptionEducationContent] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionEducationContent] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionEducationContent_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionEducationContent_InterventionPrescription]
ON [edfi].[InterventionPrescriptionEducationContent] ([InterventionPrescriptionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionLearningResourceMetadataURI] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionLearningResourceMetadataURI_InterventionPrescription]
ON [edfi].[InterventionPrescriptionLearningResourceMetadataURI] ([InterventionPrescriptionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionPopulationServed_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionPopulationServed_InterventionPrescription]
ON [edfi].[InterventionPrescriptionPopulationServed] ([InterventionPrescriptionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionPopulationServed] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionPopulationServed_PopulationServedType] FOREIGN KEY ([PopulationServedTypeId])
REFERENCES [edfi].[PopulationServedType] ([PopulationServedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionPopulationServed_PopulationServedType]
ON [edfi].[InterventionPrescriptionPopulationServed] ([PopulationServedTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionPrescriptionURI] WITH CHECK ADD CONSTRAINT [FK_InterventionPrescriptionURI_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionPrescriptionURI_InterventionPrescription]
ON [edfi].[InterventionPrescriptionURI] ([InterventionPrescriptionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStaff] WITH CHECK ADD CONSTRAINT [FK_InterventionStaff_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStaff_Intervention]
ON [edfi].[InterventionStaff] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStaff] WITH CHECK ADD CONSTRAINT [FK_InterventionStaff_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStaff_Staff]
ON [edfi].[InterventionStaff] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK ADD CONSTRAINT [FK_InterventionStudy_DeliveryMethodType] FOREIGN KEY ([DeliveryMethodTypeId])
REFERENCES [edfi].[DeliveryMethodType] ([DeliveryMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudy_DeliveryMethodType]
ON [edfi].[InterventionStudy] ([DeliveryMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK ADD CONSTRAINT [FK_InterventionStudy_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudy_EducationOrganization]
ON [edfi].[InterventionStudy] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK ADD CONSTRAINT [FK_InterventionStudy_InterventionClassType] FOREIGN KEY ([InterventionClassTypeId])
REFERENCES [edfi].[InterventionClassType] ([InterventionClassTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudy_InterventionClassType]
ON [edfi].[InterventionStudy] ([InterventionClassTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudy] WITH CHECK ADD CONSTRAINT [FK_InterventionStudy_InterventionPrescription] FOREIGN KEY ([InterventionPrescriptionIdentificationCode], [InterventionPrescriptionEducationOrganizationId])
REFERENCES [edfi].[InterventionPrescription] ([InterventionPrescriptionIdentificationCode], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudy_InterventionPrescription]
ON [edfi].[InterventionStudy] ([InterventionPrescriptionIdentificationCode] ASC, [InterventionPrescriptionEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyAppropriateGradeLevel_GradeLevelDescriptor]
ON [edfi].[InterventionStudyAppropriateGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyAppropriateGradeLevel] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyAppropriateGradeLevel_InterventionStudy]
ON [edfi].[InterventionStudyAppropriateGradeLevel] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyAppropriateSex_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyAppropriateSex_InterventionStudy]
ON [edfi].[InterventionStudyAppropriateSex] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyAppropriateSex] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyAppropriateSex_SexType] FOREIGN KEY ([SexTypeId])
REFERENCES [edfi].[SexType] ([SexTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyAppropriateSex_SexType]
ON [edfi].[InterventionStudyAppropriateSex] ([SexTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyEducationContent] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyEducationContent_EducationContent] FOREIGN KEY ([ContentIdentifier])
REFERENCES [edfi].[EducationContent] ([ContentIdentifier])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyEducationContent_EducationContent]
ON [edfi].[InterventionStudyEducationContent] ([ContentIdentifier] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyEducationContent] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyEducationContent_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyEducationContent_InterventionStudy]
ON [edfi].[InterventionStudyEducationContent] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor] FOREIGN KEY ([DiagnosisDescriptorId])
REFERENCES [edfi].[DiagnosisDescriptor] ([DiagnosisDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyInterventionEffectiveness_DiagnosisDescriptor]
ON [edfi].[InterventionStudyInterventionEffectiveness] ([DiagnosisDescriptorId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyInterventionEffectiveness_GradeLevelDescriptor]
ON [edfi].[InterventionStudyInterventionEffectiveness] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType] FOREIGN KEY ([InterventionEffectivenessRatingTypeId])
REFERENCES [edfi].[InterventionEffectivenessRatingType] ([InterventionEffectivenessRatingTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyInterventionEffectiveness_InterventionEffectivenessRatingType]
ON [edfi].[InterventionStudyInterventionEffectiveness] ([InterventionEffectivenessRatingTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyInterventionEffectiveness_InterventionStudy]
ON [edfi].[InterventionStudyInterventionEffectiveness] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyInterventionEffectiveness_PopulationServedType] FOREIGN KEY ([PopulationServedTypeId])
REFERENCES [edfi].[PopulationServedType] ([PopulationServedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyInterventionEffectiveness_PopulationServedType]
ON [edfi].[InterventionStudyInterventionEffectiveness] ([PopulationServedTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyLearningResourceMetadataURI] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyLearningResourceMetadataURI_InterventionStudy]
ON [edfi].[InterventionStudyLearningResourceMetadataURI] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyPopulationServed] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyPopulationServed_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyPopulationServed_InterventionStudy]
ON [edfi].[InterventionStudyPopulationServed] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyPopulationServed] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyPopulationServed_PopulationServedType] FOREIGN KEY ([PopulationServedTypeId])
REFERENCES [edfi].[PopulationServedType] ([PopulationServedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyPopulationServed_PopulationServedType]
ON [edfi].[InterventionStudyPopulationServed] ([PopulationServedTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyStateAbbreviation_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyStateAbbreviation_InterventionStudy]
ON [edfi].[InterventionStudyStateAbbreviation] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyStateAbbreviation] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyStateAbbreviation_StateAbbreviationType] FOREIGN KEY ([StateAbbreviationTypeId])
REFERENCES [edfi].[StateAbbreviationType] ([StateAbbreviationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyStateAbbreviation_StateAbbreviationType]
ON [edfi].[InterventionStudyStateAbbreviation] ([StateAbbreviationTypeId] ASC)
GO

ALTER TABLE [edfi].[InterventionStudyURI] WITH CHECK ADD CONSTRAINT [FK_InterventionStudyURI_InterventionStudy] FOREIGN KEY ([InterventionStudyIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[InterventionStudy] ([InterventionStudyIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionStudyURI_InterventionStudy]
ON [edfi].[InterventionStudyURI] ([InterventionStudyIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[InterventionURI] WITH CHECK ADD CONSTRAINT [FK_InterventionURI_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_InterventionURI_Intervention]
ON [edfi].[InterventionURI] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[LanguageDescriptor] WITH CHECK ADD CONSTRAINT [FK_LanguageDescriptor_Descriptor] FOREIGN KEY ([LanguageDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LanguageDescriptor_Descriptor]
ON [edfi].[LanguageDescriptor] ([LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LanguageDescriptor] WITH CHECK ADD CONSTRAINT [FK_LanguageDescriptor_LanguageType] FOREIGN KEY ([LanguageTypeId])
REFERENCES [edfi].[LanguageType] ([LanguageTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LanguageDescriptor_LanguageType]
ON [edfi].[LanguageDescriptor] ([LanguageTypeId] ASC)
GO

ALTER TABLE [edfi].[LearningObjective] WITH CHECK ADD CONSTRAINT [FK_LearningObjective_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjective_AcademicSubjectDescriptor]
ON [edfi].[LearningObjective] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningObjective] WITH CHECK ADD CONSTRAINT [FK_LearningObjective_GradeLevelDescriptor] FOREIGN KEY ([ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjective_GradeLevelDescriptor]
ON [edfi].[LearningObjective] ([ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningObjective] WITH CHECK ADD CONSTRAINT [FK_LearningObjective_LearningObjective] FOREIGN KEY ([ParentObjective], [ParentAcademicSubjectDescriptorId], [ParentObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjective_LearningObjective]
ON [edfi].[LearningObjective] ([ParentObjective] ASC, [ParentAcademicSubjectDescriptorId] ASC, [ParentObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningObjectiveContentStandard] WITH CHECK ADD CONSTRAINT [FK_LearningObjectiveContentStandard_EducationOrganization] FOREIGN KEY ([MandatingEducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjectiveContentStandard_EducationOrganization]
ON [edfi].[LearningObjectiveContentStandard] ([MandatingEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[LearningObjectiveContentStandard] WITH CHECK ADD CONSTRAINT [FK_LearningObjectiveContentStandard_LearningObjective] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjectiveContentStandard_LearningObjective]
ON [edfi].[LearningObjectiveContentStandard] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningObjectiveContentStandard] WITH CHECK ADD CONSTRAINT [FK_LearningObjectiveContentStandard_PublicationStatusType] FOREIGN KEY ([PublicationStatusTypeId])
REFERENCES [edfi].[PublicationStatusType] ([PublicationStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjectiveContentStandard_PublicationStatusType]
ON [edfi].[LearningObjectiveContentStandard] ([PublicationStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[LearningObjectiveContentStandardAuthor] WITH CHECK ADD CONSTRAINT [FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjectiveContentStandard] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjectiveContentStandardAuthor_LearningObjectiveContentStandard]
ON [edfi].[LearningObjectiveContentStandardAuthor] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningObjectiveLearningStandard] WITH CHECK ADD CONSTRAINT [FK_LearningObjectiveLearningStandard_LearningObjective] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjectiveLearningStandard_LearningObjective]
ON [edfi].[LearningObjectiveLearningStandard] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningObjectiveLearningStandard] WITH CHECK ADD CONSTRAINT [FK_LearningObjectiveLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningObjectiveLearningStandard_LearningStandard]
ON [edfi].[LearningObjectiveLearningStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LearningStandard] WITH CHECK ADD CONSTRAINT [FK_LearningStandard_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandard_AcademicSubjectDescriptor]
ON [edfi].[LearningStandard] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningStandard] WITH CHECK ADD CONSTRAINT [FK_LearningStandard_LearningStandard] FOREIGN KEY ([ParentLearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandard_LearningStandard]
ON [edfi].[LearningStandard] ([ParentLearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardContentStandard] WITH CHECK ADD CONSTRAINT [FK_LearningStandardContentStandard_EducationOrganization] FOREIGN KEY ([MandatingEducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardContentStandard_EducationOrganization]
ON [edfi].[LearningStandardContentStandard] ([MandatingEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardContentStandard] WITH CHECK ADD CONSTRAINT [FK_LearningStandardContentStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardContentStandard_LearningStandard]
ON [edfi].[LearningStandardContentStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardContentStandard] WITH CHECK ADD CONSTRAINT [FK_LearningStandardContentStandard_PublicationStatusType] FOREIGN KEY ([PublicationStatusTypeId])
REFERENCES [edfi].[PublicationStatusType] ([PublicationStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardContentStandard_PublicationStatusType]
ON [edfi].[LearningStandardContentStandard] ([PublicationStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardContentStandardAuthor] WITH CHECK ADD CONSTRAINT [FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandardContentStandard] ([LearningStandardId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardContentStandardAuthor_LearningStandardContentStandard]
ON [edfi].[LearningStandardContentStandardAuthor] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardGradeLevel] WITH CHECK ADD CONSTRAINT [FK_LearningStandardGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardGradeLevel_GradeLevelDescriptor]
ON [edfi].[LearningStandardGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardGradeLevel] WITH CHECK ADD CONSTRAINT [FK_LearningStandardGradeLevel_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardGradeLevel_LearningStandard]
ON [edfi].[LearningStandardGradeLevel] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_LearningStandardIdentificationCode_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardIdentificationCode_LearningStandard]
ON [edfi].[LearningStandardIdentificationCode] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardPrerequisiteLearningStandard] WITH CHECK ADD CONSTRAINT [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard]
ON [edfi].[LearningStandardPrerequisiteLearningStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LearningStandardPrerequisiteLearningStandard] WITH CHECK ADD CONSTRAINT [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1] FOREIGN KEY ([PrerequisiteLearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_LearningStandardPrerequisiteLearningStandard_LearningStandard1]
ON [edfi].[LearningStandardPrerequisiteLearningStandard] ([PrerequisiteLearningStandardId] ASC)
GO

ALTER TABLE [edfi].[LeaveEvent] WITH CHECK ADD CONSTRAINT [FK_LeaveEvent_LeaveEventCategoryType] FOREIGN KEY ([LeaveEventCategoryTypeId])
REFERENCES [edfi].[LeaveEventCategoryType] ([LeaveEventCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LeaveEvent_LeaveEventCategoryType]
ON [edfi].[LeaveEvent] ([LeaveEventCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[LeaveEvent] WITH CHECK ADD CONSTRAINT [FK_LeaveEvent_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_LeaveEvent_Staff]
ON [edfi].[LeaveEvent] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[LevelDescriptor] WITH CHECK ADD CONSTRAINT [FK_LevelDescriptor_Descriptor] FOREIGN KEY ([LevelDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LevelDescriptor_Descriptor]
ON [edfi].[LevelDescriptor] ([LevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LevelDescriptorGradeLevel] WITH CHECK ADD CONSTRAINT [FK_LevelDescriptorGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_LevelDescriptorGradeLevel_GradeLevelDescriptor]
ON [edfi].[LevelDescriptorGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LevelDescriptorGradeLevel] WITH CHECK ADD CONSTRAINT [FK_LevelDescriptorGradeLevel_LevelDescriptor] FOREIGN KEY ([LevelDescriptorId])
REFERENCES [edfi].[LevelDescriptor] ([LevelDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LevelDescriptorGradeLevel_LevelDescriptor]
ON [edfi].[LevelDescriptorGradeLevel] ([LevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LevelOfEducationDescriptor] WITH CHECK ADD CONSTRAINT [FK_LevelOfEducationDescriptor_Descriptor] FOREIGN KEY ([LevelOfEducationDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LevelOfEducationDescriptor_Descriptor]
ON [edfi].[LevelOfEducationDescriptor] ([LevelOfEducationDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LevelOfEducationDescriptor] WITH CHECK ADD CONSTRAINT [FK_LevelOfEducationDescriptor_LevelOfEducationType] FOREIGN KEY ([LevelOfEducationTypeId])
REFERENCES [edfi].[LevelOfEducationType] ([LevelOfEducationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LevelOfEducationDescriptor_LevelOfEducationType]
ON [edfi].[LevelOfEducationDescriptor] ([LevelOfEducationTypeId] ASC)
GO

ALTER TABLE [edfi].[LimitedEnglishProficiencyDescriptor] WITH CHECK ADD CONSTRAINT [FK_LimitedEnglishProficiencyDescriptor_Descriptor] FOREIGN KEY ([LimitedEnglishProficiencyDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LimitedEnglishProficiencyDescriptor_Descriptor]
ON [edfi].[LimitedEnglishProficiencyDescriptor] ([LimitedEnglishProficiencyDescriptorId] ASC)
GO

ALTER TABLE [edfi].[LimitedEnglishProficiencyDescriptor] WITH CHECK ADD CONSTRAINT [FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType] FOREIGN KEY ([LimitedEnglishProficiencyTypeId])
REFERENCES [edfi].[LimitedEnglishProficiencyType] ([LimitedEnglishProficiencyTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LimitedEnglishProficiencyDescriptor_LimitedEnglishProficiencyType]
ON [edfi].[LimitedEnglishProficiencyDescriptor] ([LimitedEnglishProficiencyTypeId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgency] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgency_CharterStatusType] FOREIGN KEY ([CharterStatusTypeId])
REFERENCES [edfi].[CharterStatusType] ([CharterStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgency_CharterStatusType]
ON [edfi].[LocalEducationAgency] ([CharterStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgency] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgency_EducationOrganization] FOREIGN KEY ([LocalEducationAgencyId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgency_EducationOrganization]
ON [edfi].[LocalEducationAgency] ([LocalEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgency] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgency_EducationServiceCenter] FOREIGN KEY ([EducationServiceCenterId])
REFERENCES [edfi].[EducationServiceCenter] ([EducationServiceCenterId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgency_EducationServiceCenter]
ON [edfi].[LocalEducationAgency] ([EducationServiceCenterId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgency] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgency_LocalEducationAgency] FOREIGN KEY ([ParentLocalEducationAgencyId])
REFERENCES [edfi].[LocalEducationAgency] ([LocalEducationAgencyId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgency_LocalEducationAgency]
ON [edfi].[LocalEducationAgency] ([ParentLocalEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgency] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgency_LocalEducationAgencyCategoryType] FOREIGN KEY ([LocalEducationAgencyCategoryTypeId])
REFERENCES [edfi].[LocalEducationAgencyCategoryType] ([LocalEducationAgencyCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgency_LocalEducationAgencyCategoryType]
ON [edfi].[LocalEducationAgency] ([LocalEducationAgencyCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgency] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgency_StateEducationAgency] FOREIGN KEY ([StateEducationAgencyId])
REFERENCES [edfi].[StateEducationAgency] ([StateEducationAgencyId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgency_StateEducationAgency]
ON [edfi].[LocalEducationAgency] ([StateEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType] FOREIGN KEY ([GunFreeSchoolsActReportingStatusTypeId])
REFERENCES [edfi].[GunFreeSchoolsActReportingStatusType] ([GunFreeSchoolsActReportingStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgencyAccountability_GunFreeSchoolsActReportingStatusType]
ON [edfi].[LocalEducationAgencyAccountability] ([GunFreeSchoolsActReportingStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_LocalEducationAgency] FOREIGN KEY ([LocalEducationAgencyId])
REFERENCES [edfi].[LocalEducationAgency] ([LocalEducationAgencyId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgencyAccountability_LocalEducationAgency]
ON [edfi].[LocalEducationAgencyAccountability] ([LocalEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType] FOREIGN KEY ([SchoolChoiceImplementStatusTypeId])
REFERENCES [edfi].[SchoolChoiceImplementStatusType] ([SchoolChoiceImplementStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgencyAccountability_SchoolChoiceImplementStatusType]
ON [edfi].[LocalEducationAgencyAccountability] ([SchoolChoiceImplementStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgencyAccountability] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgencyAccountability_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgencyAccountability_SchoolYearType]
ON [edfi].[LocalEducationAgencyAccountability] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[LocalEducationAgencyFederalFunds] WITH CHECK ADD CONSTRAINT [FK_LocalEducationAgencyFederalFunds_LocalEducationAgency] FOREIGN KEY ([LocalEducationAgencyId])
REFERENCES [edfi].[LocalEducationAgency] ([LocalEducationAgencyId])
GO

CREATE NONCLUSTERED INDEX [FK_LocalEducationAgencyFederalFunds_LocalEducationAgency]
ON [edfi].[LocalEducationAgencyFederalFunds] ([LocalEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[Location] WITH CHECK ADD CONSTRAINT [FK_Location_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_Location_School]
ON [edfi].[Location] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessment] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessment_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessment_Assessment]
ON [edfi].[ObjectiveAssessment] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessment] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessment_ObjectiveAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [ParentIdentificationCode])
REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessment_ObjectiveAssessment]
ON [edfi].[ObjectiveAssessment] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [ParentIdentificationCode] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AssessmentItemIdentificationCode])
REFERENCES [edfi].[AssessmentItem] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentAssessmentItem_AssessmentItem]
ON [edfi].[ObjectiveAssessmentAssessmentItem] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [AssessmentItemIdentificationCode] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentAssessmentItem] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentAssessmentItem_ObjectiveAssessment]
ON [edfi].[ObjectiveAssessmentAssessmentItem] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentLearningObjective_LearningObjective] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentLearningObjective_LearningObjective]
ON [edfi].[ObjectiveAssessmentLearningObjective] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentLearningObjective_ObjectiveAssessment]
ON [edfi].[ObjectiveAssessmentLearningObjective] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentLearningStandard_LearningStandard]
ON [edfi].[ObjectiveAssessmentLearningStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentLearningStandard] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentLearningStandard_ObjectiveAssessment]
ON [edfi].[ObjectiveAssessmentLearningStandard] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentPerformanceLevel_AssessmentReportingMethodType]
ON [edfi].[ObjectiveAssessmentPerformanceLevel] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentPerformanceLevel_ObjectiveAssessment]
ON [edfi].[ObjectiveAssessmentPerformanceLevel] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor] FOREIGN KEY ([PerformanceLevelDescriptorId])
REFERENCES [edfi].[PerformanceLevelDescriptor] ([PerformanceLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor]
ON [edfi].[ObjectiveAssessmentPerformanceLevel] ([PerformanceLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentPerformanceLevel_ResultDatatypeType]
ON [edfi].[ObjectiveAssessmentPerformanceLevel] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentScore] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentScore_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentScore_AssessmentReportingMethodType]
ON [edfi].[ObjectiveAssessmentScore] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentScore] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentScore_ObjectiveAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentScore_ObjectiveAssessment]
ON [edfi].[ObjectiveAssessmentScore] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[ObjectiveAssessmentScore] WITH CHECK ADD CONSTRAINT [FK_ObjectiveAssessmentScore_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ObjectiveAssessmentScore_ResultDatatypeType]
ON [edfi].[ObjectiveAssessmentScore] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPosition_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_EducationOrganization]
ON [edfi].[OpenStaffPosition] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPosition_EmploymentStatusDescriptor] FOREIGN KEY ([EmploymentStatusDescriptorId])
REFERENCES [edfi].[EmploymentStatusDescriptor] ([EmploymentStatusDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_EmploymentStatusDescriptor]
ON [edfi].[OpenStaffPosition] ([EmploymentStatusDescriptorId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPosition_PostingResultType] FOREIGN KEY ([PostingResultTypeId])
REFERENCES [edfi].[PostingResultType] ([PostingResultTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_PostingResultType]
ON [edfi].[OpenStaffPosition] ([PostingResultTypeId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPosition_ProgramAssignmentDescriptor] FOREIGN KEY ([ProgramAssignmentDescriptorId])
REFERENCES [edfi].[ProgramAssignmentDescriptor] ([ProgramAssignmentDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_ProgramAssignmentDescriptor]
ON [edfi].[OpenStaffPosition] ([ProgramAssignmentDescriptorId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPosition] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPosition_StaffClassificationDescriptor] FOREIGN KEY ([StaffClassificationDescriptorId])
REFERENCES [edfi].[StaffClassificationDescriptor] ([StaffClassificationDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPosition_StaffClassificationDescriptor]
ON [edfi].[OpenStaffPosition] ([StaffClassificationDescriptorId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPositionAcademicSubject_AcademicSubjectDescriptor]
ON [edfi].[OpenStaffPositionAcademicSubject] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPositionAcademicSubject] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPositionAcademicSubject_OpenStaffPosition] FOREIGN KEY ([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted])
REFERENCES [edfi].[OpenStaffPosition] ([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPositionAcademicSubject_OpenStaffPosition]
ON [edfi].[OpenStaffPositionAcademicSubject] ([EducationOrganizationId] ASC, [EmploymentStatusDescriptorId] ASC, [StaffClassificationDescriptorId] ASC, [RequisitionNumber] ASC, [DatePosted] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPositionInstructionalGradeLevel_GradeLevelDescriptor]
ON [edfi].[OpenStaffPositionInstructionalGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[OpenStaffPositionInstructionalGradeLevel] WITH CHECK ADD CONSTRAINT [FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition] FOREIGN KEY ([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted])
REFERENCES [edfi].[OpenStaffPosition] ([EducationOrganizationId], [EmploymentStatusDescriptorId], [StaffClassificationDescriptorId], [RequisitionNumber], [DatePosted])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_OpenStaffPositionInstructionalGradeLevel_OpenStaffPosition]
ON [edfi].[OpenStaffPositionInstructionalGradeLevel] ([EducationOrganizationId] ASC, [EmploymentStatusDescriptorId] ASC, [StaffClassificationDescriptorId] ASC, [RequisitionNumber] ASC, [DatePosted] ASC)
GO

ALTER TABLE [edfi].[Parent] WITH CHECK ADD CONSTRAINT [FK_Parent_SexType] FOREIGN KEY ([SexTypeId])
REFERENCES [edfi].[SexType] ([SexTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Parent_SexType]
ON [edfi].[Parent] ([SexTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentAddress] WITH CHECK ADD CONSTRAINT [FK_ParentAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentAddress_AddressType]
ON [edfi].[ParentAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentAddress] WITH CHECK ADD CONSTRAINT [FK_ParentAddress_Parent] FOREIGN KEY ([ParentUSI])
REFERENCES [edfi].[Parent] ([ParentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ParentAddress_Parent]
ON [edfi].[ParentAddress] ([ParentUSI] ASC)
GO

ALTER TABLE [edfi].[ParentAddress] WITH CHECK ADD CONSTRAINT [FK_ParentAddress_StateAbbreviationType] FOREIGN KEY ([StateAbbreviationTypeId])
REFERENCES [edfi].[StateAbbreviationType] ([StateAbbreviationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentAddress_StateAbbreviationType]
ON [edfi].[ParentAddress] ([StateAbbreviationTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentElectronicMail] WITH CHECK ADD CONSTRAINT [FK_ParentElectronicMail_ElectronicMailType] FOREIGN KEY ([ElectronicMailTypeId])
REFERENCES [edfi].[ElectronicMailType] ([ElectronicMailTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentElectronicMail_ElectronicMailType]
ON [edfi].[ParentElectronicMail] ([ElectronicMailTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentElectronicMail] WITH CHECK ADD CONSTRAINT [FK_ParentElectronicMail_Parent] FOREIGN KEY ([ParentUSI])
REFERENCES [edfi].[Parent] ([ParentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ParentElectronicMail_Parent]
ON [edfi].[ParentElectronicMail] ([ParentUSI] ASC)
GO

ALTER TABLE [edfi].[ParentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_ParentIdentificationDocument_CountryDescriptor] FOREIGN KEY ([IssuerCountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentIdentificationDocument_CountryDescriptor]
ON [edfi].[ParentIdentificationDocument] ([IssuerCountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ParentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_ParentIdentificationDocument_IdentificationDocumentUseType] FOREIGN KEY ([IdentificationDocumentUseTypeId])
REFERENCES [edfi].[IdentificationDocumentUseType] ([IdentificationDocumentUseTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentIdentificationDocument_IdentificationDocumentUseType]
ON [edfi].[ParentIdentificationDocument] ([IdentificationDocumentUseTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_ParentIdentificationDocument_Parent] FOREIGN KEY ([ParentUSI])
REFERENCES [edfi].[Parent] ([ParentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ParentIdentificationDocument_Parent]
ON [edfi].[ParentIdentificationDocument] ([ParentUSI] ASC)
GO

ALTER TABLE [edfi].[ParentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_ParentIdentificationDocument_PersonalInformationVerificationType] FOREIGN KEY ([PersonalInformationVerificationTypeId])
REFERENCES [edfi].[PersonalInformationVerificationType] ([PersonalInformationVerificationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentIdentificationDocument_PersonalInformationVerificationType]
ON [edfi].[ParentIdentificationDocument] ([PersonalInformationVerificationTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_ParentInternationalAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentInternationalAddress_AddressType]
ON [edfi].[ParentInternationalAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_ParentInternationalAddress_CountryDescriptor] FOREIGN KEY ([CountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentInternationalAddress_CountryDescriptor]
ON [edfi].[ParentInternationalAddress] ([CountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ParentInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_ParentInternationalAddress_Parent] FOREIGN KEY ([ParentUSI])
REFERENCES [edfi].[Parent] ([ParentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ParentInternationalAddress_Parent]
ON [edfi].[ParentInternationalAddress] ([ParentUSI] ASC)
GO

ALTER TABLE [edfi].[ParentOtherName] WITH CHECK ADD CONSTRAINT [FK_ParentOtherName_OtherNameType] FOREIGN KEY ([OtherNameTypeId])
REFERENCES [edfi].[OtherNameType] ([OtherNameTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentOtherName_OtherNameType]
ON [edfi].[ParentOtherName] ([OtherNameTypeId] ASC)
GO

ALTER TABLE [edfi].[ParentOtherName] WITH CHECK ADD CONSTRAINT [FK_ParentOtherName_Parent] FOREIGN KEY ([ParentUSI])
REFERENCES [edfi].[Parent] ([ParentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ParentOtherName_Parent]
ON [edfi].[ParentOtherName] ([ParentUSI] ASC)
GO

ALTER TABLE [edfi].[ParentTelephone] WITH CHECK ADD CONSTRAINT [FK_ParentTelephone_Parent] FOREIGN KEY ([ParentUSI])
REFERENCES [edfi].[Parent] ([ParentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ParentTelephone_Parent]
ON [edfi].[ParentTelephone] ([ParentUSI] ASC)
GO

ALTER TABLE [edfi].[ParentTelephone] WITH CHECK ADD CONSTRAINT [FK_ParentTelephone_TelephoneNumberType] FOREIGN KEY ([TelephoneNumberTypeId])
REFERENCES [edfi].[TelephoneNumberType] ([TelephoneNumberTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ParentTelephone_TelephoneNumberType]
ON [edfi].[ParentTelephone] ([TelephoneNumberTypeId] ASC)
GO

ALTER TABLE [edfi].[Payroll] WITH CHECK ADD CONSTRAINT [FK_Payroll_Account] FOREIGN KEY ([EducationOrganizationId], [AccountNumber], [FiscalYear])
REFERENCES [edfi].[Account] ([EducationOrganizationId], [AccountNumber], [FiscalYear])
GO

CREATE NONCLUSTERED INDEX [FK_Payroll_Account]
ON [edfi].[Payroll] ([EducationOrganizationId] ASC, [AccountNumber] ASC, [FiscalYear] ASC)
GO

ALTER TABLE [edfi].[Payroll] WITH CHECK ADD CONSTRAINT [FK_Payroll_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_Payroll_Staff]
ON [edfi].[Payroll] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[PerformanceLevelDescriptor] WITH CHECK ADD CONSTRAINT [FK_PerformanceLevelDescriptor_Descriptor] FOREIGN KEY ([PerformanceLevelDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_PerformanceLevelDescriptor_Descriptor]
ON [edfi].[PerformanceLevelDescriptor] ([PerformanceLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[PerformanceLevelDescriptor] WITH CHECK ADD CONSTRAINT [FK_PerformanceLevelDescriptor_PerformanceBaseConversionType] FOREIGN KEY ([PerformanceBaseConversionTypeId])
REFERENCES [edfi].[PerformanceBaseConversionType] ([PerformanceBaseConversionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_PerformanceLevelDescriptor_PerformanceBaseConversionType]
ON [edfi].[PerformanceLevelDescriptor] ([PerformanceBaseConversionTypeId] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEvent] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEvent_PostSecondaryEventCategoryType] FOREIGN KEY ([PostSecondaryEventCategoryTypeId])
REFERENCES [edfi].[PostSecondaryEventCategoryType] ([PostSecondaryEventCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEvent_PostSecondaryEventCategoryType]
ON [edfi].[PostSecondaryEvent] ([PostSecondaryEventCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEvent] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEvent_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEvent_Student]
ON [edfi].[PostSecondaryEvent] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptor] FOREIGN KEY ([AdministrativeFundingControlDescriptorId])
REFERENCES [edfi].[AdministrativeFundingControlDescriptor] ([AdministrativeFundingControlDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEventPostSecondaryInstitution_AdministrativeFundingControlDescriptor]
ON [edfi].[PostSecondaryEventPostSecondaryInstitution] ([AdministrativeFundingControlDescriptorId] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent] FOREIGN KEY ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
REFERENCES [edfi].[PostSecondaryEvent] ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryEvent]
ON [edfi].[PostSecondaryEventPostSecondaryInstitution] ([StudentUSI] ASC, [PostSecondaryEventCategoryTypeId] ASC, [EventDate] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitution] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType] FOREIGN KEY ([PostSecondaryInstitutionLevelTypeId])
REFERENCES [edfi].[PostSecondaryInstitutionLevelType] ([PostSecondaryInstitutionLevelTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEventPostSecondaryInstitution_PostSecondaryInstitutionLevelType]
ON [edfi].[PostSecondaryEventPostSecondaryInstitution] ([PostSecondaryInstitutionLevelTypeId] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_EducationOrganizationIdentificationSystemDescriptor] FOREIGN KEY ([EducationOrganizationIdentificationSystemDescriptorId])
REFERENCES [edfi].[EducationOrganizationIdentificationSystemDescriptor] ([EducationOrganizationIdentificationSystemDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_EducationOrganizationIdentificationSystemDescriptor]
ON [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ([EducationOrganizationIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution] FOREIGN KEY ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
REFERENCES [edfi].[PostSecondaryEventPostSecondaryInstitution] ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEventPostSecondaryInstitutionIdentificationCode_PostSecondaryEventPostSecondaryInstitution]
ON [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] ([StudentUSI] ASC, [PostSecondaryEventCategoryTypeId] ASC, [EventDate] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType] FOREIGN KEY ([MediumOfInstructionTypeId])
REFERENCES [edfi].[MediumOfInstructionType] ([MediumOfInstructionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_MediumOfInstructionType]
ON [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ([MediumOfInstructionTypeId] ASC)
GO

ALTER TABLE [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] WITH CHECK ADD CONSTRAINT [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution] FOREIGN KEY ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
REFERENCES [edfi].[PostSecondaryEventPostSecondaryInstitution] ([StudentUSI], [PostSecondaryEventCategoryTypeId], [EventDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction_PostSecondaryEventPostSecondaryInstitution]
ON [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] ([StudentUSI] ASC, [PostSecondaryEventCategoryTypeId] ASC, [EventDate] ASC)
GO

ALTER TABLE [edfi].[Program] WITH CHECK ADD CONSTRAINT [FK_Program_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_Program_EducationOrganization]
ON [edfi].[Program] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[Program] WITH CHECK ADD CONSTRAINT [FK_Program_ProgramSponsorType] FOREIGN KEY ([ProgramSponsorTypeId])
REFERENCES [edfi].[ProgramSponsorType] ([ProgramSponsorTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Program_ProgramSponsorType]
ON [edfi].[Program] ([ProgramSponsorTypeId] ASC)
GO

ALTER TABLE [edfi].[Program] WITH CHECK ADD CONSTRAINT [FK_Program_ProgramType] FOREIGN KEY ([ProgramTypeId])
REFERENCES [edfi].[ProgramType] ([ProgramTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Program_ProgramType]
ON [edfi].[Program] ([ProgramTypeId] ASC)
GO

ALTER TABLE [edfi].[ProgramAssignmentDescriptor] WITH CHECK ADD CONSTRAINT [FK_ProgramAssignmentDescriptor_Descriptor] FOREIGN KEY ([ProgramAssignmentDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ProgramAssignmentDescriptor_Descriptor]
ON [edfi].[ProgramAssignmentDescriptor] ([ProgramAssignmentDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ProgramAssignmentDescriptor] WITH CHECK ADD CONSTRAINT [FK_ProgramAssignmentDescriptor_ProgramAssignmentType] FOREIGN KEY ([ProgramAssignmentTypeId])
REFERENCES [edfi].[ProgramAssignmentType] ([ProgramAssignmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ProgramAssignmentDescriptor_ProgramAssignmentType]
ON [edfi].[ProgramAssignmentDescriptor] ([ProgramAssignmentTypeId] ASC)
GO

ALTER TABLE [edfi].[ProgramCharacteristic] WITH CHECK ADD CONSTRAINT [FK_ProgramCharacteristic_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ProgramCharacteristic_Program]
ON [edfi].[ProgramCharacteristic] ([EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[ProgramCharacteristic] WITH CHECK ADD CONSTRAINT [FK_ProgramCharacteristic_ProgramCharacteristicDescriptor] FOREIGN KEY ([ProgramCharacteristicDescriptorId])
REFERENCES [edfi].[ProgramCharacteristicDescriptor] ([ProgramCharacteristicDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_ProgramCharacteristic_ProgramCharacteristicDescriptor]
ON [edfi].[ProgramCharacteristic] ([ProgramCharacteristicDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ProgramCharacteristicDescriptor] WITH CHECK ADD CONSTRAINT [FK_ProgramCharacteristicDescriptor_Descriptor] FOREIGN KEY ([ProgramCharacteristicDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ProgramCharacteristicDescriptor_Descriptor]
ON [edfi].[ProgramCharacteristicDescriptor] ([ProgramCharacteristicDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ProgramCharacteristicDescriptor] WITH CHECK ADD CONSTRAINT [FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType] FOREIGN KEY ([ProgramCharacteristicTypeId])
REFERENCES [edfi].[ProgramCharacteristicType] ([ProgramCharacteristicTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ProgramCharacteristicDescriptor_ProgramCharacteristicType]
ON [edfi].[ProgramCharacteristicDescriptor] ([ProgramCharacteristicTypeId] ASC)
GO

ALTER TABLE [edfi].[ProgramLearningObjective] WITH CHECK ADD CONSTRAINT [FK_ProgramLearningObjective_LearningObjective] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_ProgramLearningObjective_LearningObjective]
ON [edfi].[ProgramLearningObjective] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ProgramLearningObjective] WITH CHECK ADD CONSTRAINT [FK_ProgramLearningObjective_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ProgramLearningObjective_Program]
ON [edfi].[ProgramLearningObjective] ([EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[ProgramLearningStandard] WITH CHECK ADD CONSTRAINT [FK_ProgramLearningStandard_LearningStandard] FOREIGN KEY ([LearningStandardId])
REFERENCES [edfi].[LearningStandard] ([LearningStandardId])
GO

CREATE NONCLUSTERED INDEX [FK_ProgramLearningStandard_LearningStandard]
ON [edfi].[ProgramLearningStandard] ([LearningStandardId] ASC)
GO

ALTER TABLE [edfi].[ProgramLearningStandard] WITH CHECK ADD CONSTRAINT [FK_ProgramLearningStandard_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ProgramLearningStandard_Program]
ON [edfi].[ProgramLearningStandard] ([EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[ProgramService] WITH CHECK ADD CONSTRAINT [FK_ProgramService_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ProgramService_Program]
ON [edfi].[ProgramService] ([EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[ProgramService] WITH CHECK ADD CONSTRAINT [FK_ProgramService_ServiceDescriptor] FOREIGN KEY ([ServiceDescriptorId])
REFERENCES [edfi].[ServiceDescriptor] ([ServiceDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_ProgramService_ServiceDescriptor]
ON [edfi].[ProgramService] ([ServiceDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ReasonExitedDescriptor] WITH CHECK ADD CONSTRAINT [FK_ReasonExitedDescriptor_Descriptor] FOREIGN KEY ([ReasonExitedDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ReasonExitedDescriptor_Descriptor]
ON [edfi].[ReasonExitedDescriptor] ([ReasonExitedDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ReasonExitedDescriptor] WITH CHECK ADD CONSTRAINT [FK_ReasonExitedDescriptor_ReasonExitedType] FOREIGN KEY ([ReasonExitedTypeId])
REFERENCES [edfi].[ReasonExitedType] ([ReasonExitedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ReasonExitedDescriptor_ReasonExitedType]
ON [edfi].[ReasonExitedDescriptor] ([ReasonExitedTypeId] ASC)
GO

ALTER TABLE [edfi].[ReportCard] WITH CHECK ADD CONSTRAINT [FK_ReportCard_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_ReportCard_EducationOrganization]
ON [edfi].[ReportCard] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[ReportCard] WITH CHECK ADD CONSTRAINT [FK_ReportCard_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_ReportCard_GradingPeriod]
ON [edfi].[ReportCard] ([GradingPeriodDescriptorId] ASC, [SchoolId] ASC, [GradingPeriodBeginDate] ASC)
GO

ALTER TABLE [edfi].[ReportCard] WITH CHECK ADD CONSTRAINT [FK_ReportCard_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_ReportCard_Student]
ON [edfi].[ReportCard] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[ReportCardGrade] WITH CHECK ADD CONSTRAINT [FK_ReportCardGrade_Grade] FOREIGN KEY ([GradingPeriodDescriptorId], [GradingPeriodBeginDate], [GradeTypeId], [StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
REFERENCES [edfi].[Grade] ([GradingPeriodDescriptorId], [GradingPeriodBeginDate], [GradeTypeId], [StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ReportCardGrade_Grade]
ON [edfi].[ReportCardGrade] ([GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC, [GradeTypeId] ASC, [StudentUSI] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[ReportCardGrade] WITH CHECK ADD CONSTRAINT [FK_ReportCardGrade_ReportCard] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
REFERENCES [edfi].[ReportCard] ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_ReportCardGrade_ReportCard]
ON [edfi].[ReportCardGrade] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_ReportCardStudentCompetencyObjective_ReportCard] FOREIGN KEY ([StudentUSI], [ReportCardEducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
REFERENCES [edfi].[ReportCard] ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_ReportCardStudentCompetencyObjective_ReportCard]
ON [edfi].[ReportCardStudentCompetencyObjective] ([StudentUSI] ASC, [ReportCardEducationOrganizationId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[ReportCardStudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective] FOREIGN KEY ([StudentUSI], [Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId], [SchoolId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate])
REFERENCES [edfi].[StudentCompetencyObjective] ([StudentUSI], [Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId], [SchoolId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_ReportCardStudentCompetencyObjective_StudentCompetencyObjective]
ON [edfi].[ReportCardStudentCompetencyObjective] ([StudentUSI] ASC, [Objective] ASC, [ObjectiveGradeLevelDescriptorId] ASC, [ObjectiveEducationOrganizationId] ASC, [SchoolId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC)
GO

ALTER TABLE [edfi].[ReportCardStudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_ReportCardStudentLearningObjective_ReportCard] FOREIGN KEY ([StudentUSI], [ReportCardEducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
REFERENCES [edfi].[ReportCard] ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ReportCardStudentLearningObjective_ReportCard]
ON [edfi].[ReportCardStudentLearningObjective] ([StudentUSI] ASC, [ReportCardEducationOrganizationId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[ReportCardStudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_ReportCardStudentLearningObjective_StudentLearningObjective] FOREIGN KEY ([StudentUSI], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
REFERENCES [edfi].[StudentLearningObjective] ([StudentUSI], [Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_ReportCardStudentLearningObjective_StudentLearningObjective]
ON [edfi].[ReportCardStudentLearningObjective] ([StudentUSI] ASC, [Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[ReporterDescriptionDescriptor] WITH CHECK ADD CONSTRAINT [FK_ReporterDescriptionDescriptor_Descriptor] FOREIGN KEY ([ReporterDescriptionDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ReporterDescriptionDescriptor_Descriptor]
ON [edfi].[ReporterDescriptionDescriptor] ([ReporterDescriptionDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ReporterDescriptionDescriptor] WITH CHECK ADD CONSTRAINT [FK_ReporterDescriptionDescriptor_ReporterDescriptionType] FOREIGN KEY ([ReporterDescriptionTypeId])
REFERENCES [edfi].[ReporterDescriptionType] ([ReporterDescriptionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ReporterDescriptionDescriptor_ReporterDescriptionType]
ON [edfi].[ReporterDescriptionDescriptor] ([ReporterDescriptionTypeId] ASC)
GO

ALTER TABLE [edfi].[ResidencyStatusDescriptor] WITH CHECK ADD CONSTRAINT [FK_ResidencyStatusDescriptor_Descriptor] FOREIGN KEY ([ResidencyStatusDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ResidencyStatusDescriptor_Descriptor]
ON [edfi].[ResidencyStatusDescriptor] ([ResidencyStatusDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ResidencyStatusDescriptor] WITH CHECK ADD CONSTRAINT [FK_ResidencyStatusDescriptor_ResidencyStatusType] FOREIGN KEY ([ResidencyStatusTypeId])
REFERENCES [edfi].[ResidencyStatusType] ([ResidencyStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ResidencyStatusDescriptor_ResidencyStatusType]
ON [edfi].[ResidencyStatusDescriptor] ([ResidencyStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[ResponsibilityDescriptor] WITH CHECK ADD CONSTRAINT [FK_ResponsibilityDescriptor_Descriptor] FOREIGN KEY ([ResponsibilityDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ResponsibilityDescriptor_Descriptor]
ON [edfi].[ResponsibilityDescriptor] ([ResponsibilityDescriptorId] ASC)
GO

ALTER TABLE [edfi].[ResponsibilityDescriptor] WITH CHECK ADD CONSTRAINT [FK_ResponsibilityDescriptor_ResponsibilityType] FOREIGN KEY ([ResponsibilityTypeId])
REFERENCES [edfi].[ResponsibilityType] ([ResponsibilityTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_ResponsibilityDescriptor_ResponsibilityType]
ON [edfi].[ResponsibilityDescriptor] ([ResponsibilityTypeId] ASC)
GO

ALTER TABLE [edfi].[RestraintEvent] WITH CHECK ADD CONSTRAINT [FK_RestraintEvent_EducationalEnvironmentType] FOREIGN KEY ([EducationalEnvironmentTypeId])
REFERENCES [edfi].[EducationalEnvironmentType] ([EducationalEnvironmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_RestraintEvent_EducationalEnvironmentType]
ON [edfi].[RestraintEvent] ([EducationalEnvironmentTypeId] ASC)
GO

ALTER TABLE [edfi].[RestraintEvent] WITH CHECK ADD CONSTRAINT [FK_RestraintEvent_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_RestraintEvent_School]
ON [edfi].[RestraintEvent] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[RestraintEvent] WITH CHECK ADD CONSTRAINT [FK_RestraintEvent_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_RestraintEvent_Student]
ON [edfi].[RestraintEvent] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[RestraintEventProgram] WITH CHECK ADD CONSTRAINT [FK_RestraintEventProgram_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
GO

CREATE NONCLUSTERED INDEX [FK_RestraintEventProgram_Program]
ON [edfi].[RestraintEventProgram] ([EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[RestraintEventProgram] WITH CHECK ADD CONSTRAINT [FK_RestraintEventProgram_RestraintEvent] FOREIGN KEY ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate])
REFERENCES [edfi].[RestraintEvent] ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_RestraintEventProgram_RestraintEvent]
ON [edfi].[RestraintEventProgram] ([StudentUSI] ASC, [SchoolId] ASC, [RestraintEventIdentifier] ASC, [EventDate] ASC)
GO

ALTER TABLE [edfi].[RestraintEventReason] WITH CHECK ADD CONSTRAINT [FK_RestraintEventReason_RestraintEvent] FOREIGN KEY ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate])
REFERENCES [edfi].[RestraintEvent] ([StudentUSI], [SchoolId], [RestraintEventIdentifier], [EventDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_RestraintEventReason_RestraintEvent]
ON [edfi].[RestraintEventReason] ([StudentUSI] ASC, [SchoolId] ASC, [RestraintEventIdentifier] ASC, [EventDate] ASC)
GO

ALTER TABLE [edfi].[RestraintEventReason] WITH CHECK ADD CONSTRAINT [FK_RestraintEventReason_RestraintEventReasonType] FOREIGN KEY ([RestraintEventReasonTypeId])
REFERENCES [edfi].[RestraintEventReasonType] ([RestraintEventReasonTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_RestraintEventReason_RestraintEventReasonType]
ON [edfi].[RestraintEventReason] ([RestraintEventReasonTypeId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_AdministrativeFundingControlDescriptor] FOREIGN KEY ([AdministrativeFundingControlDescriptorId])
REFERENCES [edfi].[AdministrativeFundingControlDescriptor] ([AdministrativeFundingControlDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_School_AdministrativeFundingControlDescriptor]
ON [edfi].[School] ([AdministrativeFundingControlDescriptorId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_CharterApprovalAgencyType] FOREIGN KEY ([CharterApprovalAgencyTypeId])
REFERENCES [edfi].[CharterApprovalAgencyType] ([CharterApprovalAgencyTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_School_CharterApprovalAgencyType]
ON [edfi].[School] ([CharterApprovalAgencyTypeId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_CharterStatusType] FOREIGN KEY ([CharterStatusTypeId])
REFERENCES [edfi].[CharterStatusType] ([CharterStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_School_CharterStatusType]
ON [edfi].[School] ([CharterStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_EducationOrganization] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_School_EducationOrganization]
ON [edfi].[School] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_InternetAccessType] FOREIGN KEY ([InternetAccessTypeId])
REFERENCES [edfi].[InternetAccessType] ([InternetAccessTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_School_InternetAccessType]
ON [edfi].[School] ([InternetAccessTypeId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_LocalEducationAgency] FOREIGN KEY ([LocalEducationAgencyId])
REFERENCES [edfi].[LocalEducationAgency] ([LocalEducationAgencyId])
GO

CREATE NONCLUSTERED INDEX [FK_School_LocalEducationAgency]
ON [edfi].[School] ([LocalEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_MagnetSpecialProgramEmphasisSchoolType] FOREIGN KEY ([MagnetSpecialProgramEmphasisSchoolTypeId])
REFERENCES [edfi].[MagnetSpecialProgramEmphasisSchoolType] ([MagnetSpecialProgramEmphasisSchoolTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_School_MagnetSpecialProgramEmphasisSchoolType]
ON [edfi].[School] ([MagnetSpecialProgramEmphasisSchoolTypeId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_SchoolType] FOREIGN KEY ([SchoolTypeId])
REFERENCES [edfi].[SchoolType] ([SchoolTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_School_SchoolType]
ON [edfi].[School] ([SchoolTypeId] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_SchoolYearType] FOREIGN KEY ([CharterApprovalSchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_School_SchoolYearType]
ON [edfi].[School] ([CharterApprovalSchoolYear] ASC)
GO

ALTER TABLE [edfi].[School] WITH CHECK ADD CONSTRAINT [FK_School_TitleIPartASchoolDesignationType] FOREIGN KEY ([TitleIPartASchoolDesignationTypeId])
REFERENCES [edfi].[TitleIPartASchoolDesignationType] ([TitleIPartASchoolDesignationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_School_TitleIPartASchoolDesignationType]
ON [edfi].[School] ([TitleIPartASchoolDesignationTypeId] ASC)
GO

ALTER TABLE [edfi].[SchoolCategory] WITH CHECK ADD CONSTRAINT [FK_SchoolCategory_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SchoolCategory_School]
ON [edfi].[SchoolCategory] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[SchoolCategory] WITH CHECK ADD CONSTRAINT [FK_SchoolCategory_SchoolCategoryType] FOREIGN KEY ([SchoolCategoryTypeId])
REFERENCES [edfi].[SchoolCategoryType] ([SchoolCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_SchoolCategory_SchoolCategoryType]
ON [edfi].[SchoolCategory] ([SchoolCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[SchoolFoodServicesEligibilityDescriptor] WITH CHECK ADD CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptor_Descriptor] FOREIGN KEY ([SchoolFoodServicesEligibilityDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SchoolFoodServicesEligibilityDescriptor_Descriptor]
ON [edfi].[SchoolFoodServicesEligibilityDescriptor] ([SchoolFoodServicesEligibilityDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SchoolFoodServicesEligibilityDescriptor] WITH CHECK ADD CONSTRAINT [FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType] FOREIGN KEY ([SchoolFoodServicesEligibilityTypeId])
REFERENCES [edfi].[SchoolFoodServicesEligibilityType] ([SchoolFoodServicesEligibilityTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_SchoolFoodServicesEligibilityDescriptor_SchoolFoodServicesEligibilityType]
ON [edfi].[SchoolFoodServicesEligibilityDescriptor] ([SchoolFoodServicesEligibilityTypeId] ASC)
GO

ALTER TABLE [edfi].[SchoolGradeLevel] WITH CHECK ADD CONSTRAINT [FK_SchoolGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_SchoolGradeLevel_GradeLevelDescriptor]
ON [edfi].[SchoolGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SchoolGradeLevel] WITH CHECK ADD CONSTRAINT [FK_SchoolGradeLevel_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SchoolGradeLevel_School]
ON [edfi].[SchoolGradeLevel] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_ClassPeriod] FOREIGN KEY ([SchoolId], [ClassPeriodName])
REFERENCES [edfi].[ClassPeriod] ([SchoolId], [ClassPeriodName])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_Section_ClassPeriod]
ON [edfi].[Section] ([SchoolId] ASC, [ClassPeriodName] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_CourseOffering] FOREIGN KEY ([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[CourseOffering] ([LocalCourseCode], [SchoolId], [SchoolYear], [TermDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Section_CourseOffering]
ON [edfi].[Section] ([LocalCourseCode] ASC, [SchoolId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_CreditType] FOREIGN KEY ([AvailableCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Section_CreditType]
ON [edfi].[Section] ([AvailableCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_EducationalEnvironmentType] FOREIGN KEY ([EducationalEnvironmentTypeId])
REFERENCES [edfi].[EducationalEnvironmentType] ([EducationalEnvironmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Section_EducationalEnvironmentType]
ON [edfi].[Section] ([EducationalEnvironmentTypeId] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_LanguageDescriptor] FOREIGN KEY ([InstructionLanguageDescriptorId])
REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Section_LanguageDescriptor]
ON [edfi].[Section] ([InstructionLanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_Location] FOREIGN KEY ([SchoolId], [ClassroomIdentificationCode])
REFERENCES [edfi].[Location] ([SchoolId], [ClassroomIdentificationCode])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_Section_Location]
ON [edfi].[Section] ([SchoolId] ASC, [ClassroomIdentificationCode] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_MediumOfInstructionType] FOREIGN KEY ([MediumOfInstructionTypeId])
REFERENCES [edfi].[MediumOfInstructionType] ([MediumOfInstructionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Section_MediumOfInstructionType]
ON [edfi].[Section] ([MediumOfInstructionTypeId] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_PopulationServedType] FOREIGN KEY ([PopulationServedTypeId])
REFERENCES [edfi].[PopulationServedType] ([PopulationServedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Section_PopulationServedType]
ON [edfi].[Section] ([PopulationServedTypeId] ASC)
GO

ALTER TABLE [edfi].[Section] WITH CHECK ADD CONSTRAINT [FK_Section_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_Section_School]
ON [edfi].[Section] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH CHECK ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_CalendarDate] FOREIGN KEY ([SchoolId], [Date])
REFERENCES [edfi].[CalendarDate] ([SchoolId], [Date])
GO

CREATE NONCLUSTERED INDEX [FK_SectionAttendanceTakenEvent_CalendarDate]
ON [edfi].[SectionAttendanceTakenEvent] ([SchoolId] ASC, [Date] ASC)
GO

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH CHECK ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SectionAttendanceTakenEvent_Section]
ON [edfi].[SectionAttendanceTakenEvent] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[SectionAttendanceTakenEvent] WITH CHECK ADD CONSTRAINT [FK_SectionAttendanceTakenEvent_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_SectionAttendanceTakenEvent_Staff]
ON [edfi].[SectionAttendanceTakenEvent] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[SectionCharacteristic] WITH CHECK ADD CONSTRAINT [FK_SectionCharacteristic_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON DELETE CASCADE
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SectionCharacteristic_Section]
ON [edfi].[SectionCharacteristic] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[SectionCharacteristic] WITH CHECK ADD CONSTRAINT [FK_SectionCharacteristic_SectionCharacteristicDescriptor] FOREIGN KEY ([SectionCharacteristicDescriptorId])
REFERENCES [edfi].[SectionCharacteristicDescriptor] ([SectionCharacteristicDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_SectionCharacteristic_SectionCharacteristicDescriptor]
ON [edfi].[SectionCharacteristic] ([SectionCharacteristicDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SectionCharacteristicDescriptor] WITH CHECK ADD CONSTRAINT [FK_SectionCharacteristicDescriptor_Descriptor] FOREIGN KEY ([SectionCharacteristicDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SectionCharacteristicDescriptor_Descriptor]
ON [edfi].[SectionCharacteristicDescriptor] ([SectionCharacteristicDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SectionCharacteristicDescriptor] WITH CHECK ADD CONSTRAINT [FK_SectionCharacteristicDescriptor_SectionCharacteristicType] FOREIGN KEY ([SectionCharacteristicTypeId])
REFERENCES [edfi].[SectionCharacteristicType] ([SectionCharacteristicTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_SectionCharacteristicDescriptor_SectionCharacteristicType]
ON [edfi].[SectionCharacteristicDescriptor] ([SectionCharacteristicTypeId] ASC)
GO

ALTER TABLE [edfi].[SectionProgram] WITH CHECK ADD CONSTRAINT [FK_SectionProgram_Program] FOREIGN KEY ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
GO

CREATE NONCLUSTERED INDEX [FK_SectionProgram_Program]
ON [edfi].[SectionProgram] ([EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[SectionProgram] WITH CHECK ADD CONSTRAINT [FK_SectionProgram_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON DELETE CASCADE
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SectionProgram_Section]
ON [edfi].[SectionProgram] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[SeparationReasonDescriptor] WITH CHECK ADD CONSTRAINT [FK_SeparationReasonDescriptor_Descriptor] FOREIGN KEY ([SeparationReasonDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SeparationReasonDescriptor_Descriptor]
ON [edfi].[SeparationReasonDescriptor] ([SeparationReasonDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SeparationReasonDescriptor] WITH CHECK ADD CONSTRAINT [FK_SeparationReasonDescriptor_SeparationReasonType] FOREIGN KEY ([SeparationReasonTypeId])
REFERENCES [edfi].[SeparationReasonType] ([SeparationReasonTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_SeparationReasonDescriptor_SeparationReasonType]
ON [edfi].[SeparationReasonDescriptor] ([SeparationReasonTypeId] ASC)
GO

ALTER TABLE [edfi].[ServiceDescriptor] WITH CHECK ADD CONSTRAINT [FK_ServiceDescriptor_Descriptor] FOREIGN KEY ([ServiceDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_ServiceDescriptor_Descriptor]
ON [edfi].[ServiceDescriptor] ([ServiceDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Session] WITH CHECK ADD CONSTRAINT [FK_Session_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_Session_School]
ON [edfi].[Session] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[Session] WITH CHECK ADD CONSTRAINT [FK_Session_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_Session_SchoolYearType]
ON [edfi].[Session] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[Session] WITH CHECK ADD CONSTRAINT [FK_Session_TermDescriptor] FOREIGN KEY ([TermDescriptorId])
REFERENCES [edfi].[TermDescriptor] ([TermDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Session_TermDescriptor]
ON [edfi].[Session] ([TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SessionAcademicWeek] WITH CHECK ADD CONSTRAINT [FK_SessionAcademicWeek_AcademicWeek] FOREIGN KEY ([WeekIdentifier], [SchoolId])
REFERENCES [edfi].[AcademicWeek] ([WeekIdentifier], [SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_SessionAcademicWeek_AcademicWeek]
ON [edfi].[SessionAcademicWeek] ([WeekIdentifier] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[SessionAcademicWeek] WITH CHECK ADD CONSTRAINT [FK_SessionAcademicWeek_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [TermDescriptorId])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SessionAcademicWeek_Session]
ON [edfi].[SessionAcademicWeek] ([SchoolId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SessionGradingPeriod] WITH CHECK ADD CONSTRAINT [FK_SessionGradingPeriod_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_SessionGradingPeriod_GradingPeriod]
ON [edfi].[SessionGradingPeriod] ([GradingPeriodDescriptorId] ASC, [SchoolId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[SessionGradingPeriod] WITH CHECK ADD CONSTRAINT [FK_SessionGradingPeriod_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [TermDescriptorId])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SessionGradingPeriod_Session]
ON [edfi].[SessionGradingPeriod] ([SchoolId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SpecialEducationSettingDescriptor] WITH CHECK ADD CONSTRAINT [FK_SpecialEducationSettingDescriptor_Descriptor] FOREIGN KEY ([SpecialEducationSettingDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_SpecialEducationSettingDescriptor_Descriptor]
ON [edfi].[SpecialEducationSettingDescriptor] ([SpecialEducationSettingDescriptorId] ASC)
GO

ALTER TABLE [edfi].[SpecialEducationSettingDescriptor] WITH CHECK ADD CONSTRAINT [FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType] FOREIGN KEY ([SpecialEducationSettingTypeId])
REFERENCES [edfi].[SpecialEducationSettingType] ([SpecialEducationSettingTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_SpecialEducationSettingDescriptor_SpecialEducationSettingType]
ON [edfi].[SpecialEducationSettingDescriptor] ([SpecialEducationSettingTypeId] ASC)
GO

ALTER TABLE [edfi].[Staff] WITH CHECK ADD CONSTRAINT [FK_Staff_CitizenshipStatusType] FOREIGN KEY ([CitizenshipStatusTypeId])
REFERENCES [edfi].[CitizenshipStatusType] ([CitizenshipStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Staff_CitizenshipStatusType]
ON [edfi].[Staff] ([CitizenshipStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[Staff] WITH CHECK ADD CONSTRAINT [FK_Staff_LevelOfEducationDescriptor] FOREIGN KEY ([HighestCompletedLevelOfEducationDescriptorId])
REFERENCES [edfi].[LevelOfEducationDescriptor] ([LevelOfEducationDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Staff_LevelOfEducationDescriptor]
ON [edfi].[Staff] ([HighestCompletedLevelOfEducationDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Staff] WITH CHECK ADD CONSTRAINT [FK_Staff_OldEthnicityType] FOREIGN KEY ([OldEthnicityTypeId])
REFERENCES [edfi].[OldEthnicityType] ([OldEthnicityTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Staff_OldEthnicityType]
ON [edfi].[Staff] ([OldEthnicityTypeId] ASC)
GO

ALTER TABLE [edfi].[Staff] WITH CHECK ADD CONSTRAINT [FK_Staff_SexType] FOREIGN KEY ([SexTypeId])
REFERENCES [edfi].[SexType] ([SexTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Staff_SexType]
ON [edfi].[Staff] ([SexTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffAddress] WITH CHECK ADD CONSTRAINT [FK_StaffAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffAddress_AddressType]
ON [edfi].[StaffAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffAddress] WITH CHECK ADD CONSTRAINT [FK_StaffAddress_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffAddress_Staff]
ON [edfi].[StaffAddress] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffAddress] WITH CHECK ADD CONSTRAINT [FK_StaffAddress_StateAbbreviationType] FOREIGN KEY ([StateAbbreviationTypeId])
REFERENCES [edfi].[StateAbbreviationType] ([StateAbbreviationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffAddress_StateAbbreviationType]
ON [edfi].[StaffAddress] ([StateAbbreviationTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffClassificationDescriptor] WITH CHECK ADD CONSTRAINT [FK_StaffClassificationDescriptor_Descriptor] FOREIGN KEY ([StaffClassificationDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffClassificationDescriptor_Descriptor]
ON [edfi].[StaffClassificationDescriptor] ([StaffClassificationDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffClassificationDescriptor] WITH CHECK ADD CONSTRAINT [FK_StaffClassificationDescriptor_StaffClassificationType] FOREIGN KEY ([StaffClassificationTypeId])
REFERENCES [edfi].[StaffClassificationType] ([StaffClassificationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffClassificationDescriptor_StaffClassificationType]
ON [edfi].[StaffClassificationDescriptor] ([StaffClassificationTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffCohortAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffCohortAssociation_Cohort] FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId])
REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCohortAssociation_Cohort]
ON [edfi].[StaffCohortAssociation] ([CohortIdentifier] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StaffCohortAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffCohortAssociation_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCohortAssociation_Staff]
ON [edfi].[StaffCohortAssociation] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffCredential] WITH CHECK ADD CONSTRAINT [FK_StaffCredential_CredentialFieldDescriptor] FOREIGN KEY ([CredentialFieldDescriptorId])
REFERENCES [edfi].[CredentialFieldDescriptor] ([CredentialFieldDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCredential_CredentialFieldDescriptor]
ON [edfi].[StaffCredential] ([CredentialFieldDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffCredential] WITH CHECK ADD CONSTRAINT [FK_StaffCredential_CredentialType] FOREIGN KEY ([CredentialTypeId])
REFERENCES [edfi].[CredentialType] ([CredentialTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCredential_CredentialType]
ON [edfi].[StaffCredential] ([CredentialTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffCredential] WITH CHECK ADD CONSTRAINT [FK_StaffCredential_LevelDescriptor] FOREIGN KEY ([LevelDescriptorId])
REFERENCES [edfi].[LevelDescriptor] ([LevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCredential_LevelDescriptor]
ON [edfi].[StaffCredential] ([LevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffCredential] WITH CHECK ADD CONSTRAINT [FK_StaffCredential_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffCredential_Staff]
ON [edfi].[StaffCredential] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffCredential] WITH CHECK ADD CONSTRAINT [FK_StaffCredential_StateAbbreviationType] FOREIGN KEY ([StateOfIssueStateAbbreviationTypeId])
REFERENCES [edfi].[StateAbbreviationType] ([StateAbbreviationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCredential_StateAbbreviationType]
ON [edfi].[StaffCredential] ([StateOfIssueStateAbbreviationTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffCredential] WITH CHECK ADD CONSTRAINT [FK_StaffCredential_TeachingCredentialBasisType] FOREIGN KEY ([TeachingCredentialBasisTypeId])
REFERENCES [edfi].[TeachingCredentialBasisType] ([TeachingCredentialBasisTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCredential_TeachingCredentialBasisType]
ON [edfi].[StaffCredential] ([TeachingCredentialBasisTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffCredential] WITH CHECK ADD CONSTRAINT [FK_StaffCredential_TeachingCredentialDescriptor] FOREIGN KEY ([TeachingCredentialDescriptorId])
REFERENCES [edfi].[TeachingCredentialDescriptor] ([TeachingCredentialDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffCredential_TeachingCredentialDescriptor]
ON [edfi].[StaffCredential] ([TeachingCredentialDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationAssignmentAssociation_EducationOrganization]
ON [edfi].[StaffEducationOrganizationAssignmentAssociation] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationAssignmentAssociation_Staff]
ON [edfi].[StaffEducationOrganizationAssignmentAssociation] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor] FOREIGN KEY ([StaffClassificationDescriptorId])
REFERENCES [edfi].[StaffClassificationDescriptor] ([StaffClassificationDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationAssignmentAssociation_StaffClassificationDescriptor]
ON [edfi].[StaffEducationOrganizationAssignmentAssociation] ([StaffClassificationDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationAssignmentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation] FOREIGN KEY ([EmploymentEducationOrganizationId], [StaffUSI], [EmploymentStatusDescriptorId], [EmploymentHireDate])
REFERENCES [edfi].[StaffEducationOrganizationEmploymentAssociation] ([EducationOrganizationId], [StaffUSI], [EmploymentStatusDescriptorId], [HireDate])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationAssignmentAssociation_StaffEducationOrganizationEmploymentAssociation]
ON [edfi].[StaffEducationOrganizationAssignmentAssociation] ([EmploymentEducationOrganizationId] ASC, [StaffUSI] ASC, [EmploymentStatusDescriptorId] ASC, [EmploymentHireDate] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_EducationOrganization]
ON [edfi].[StaffEducationOrganizationEmploymentAssociation] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor] FOREIGN KEY ([EmploymentStatusDescriptorId])
REFERENCES [edfi].[EmploymentStatusDescriptor] ([EmploymentStatusDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_EmploymentStatusDescriptor]
ON [edfi].[StaffEducationOrganizationEmploymentAssociation] ([EmploymentStatusDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor] FOREIGN KEY ([SeparationReasonDescriptorId])
REFERENCES [edfi].[SeparationReasonDescriptor] ([SeparationReasonDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_SeparationReasonDescriptor]
ON [edfi].[StaffEducationOrganizationEmploymentAssociation] ([SeparationReasonDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_SeparationType] FOREIGN KEY ([SeparationTypeId])
REFERENCES [edfi].[SeparationType] ([SeparationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_SeparationType]
ON [edfi].[StaffEducationOrganizationEmploymentAssociation] ([SeparationTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffEducationOrganizationEmploymentAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffEducationOrganizationEmploymentAssociation_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StaffEducationOrganizationEmploymentAssociation_Staff]
ON [edfi].[StaffEducationOrganizationEmploymentAssociation] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffElectronicMail] WITH CHECK ADD CONSTRAINT [FK_StaffElectronicMail_ElectronicMailType] FOREIGN KEY ([ElectronicMailTypeId])
REFERENCES [edfi].[ElectronicMailType] ([ElectronicMailTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffElectronicMail_ElectronicMailType]
ON [edfi].[StaffElectronicMail] ([ElectronicMailTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffElectronicMail] WITH CHECK ADD CONSTRAINT [FK_StaffElectronicMail_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffElectronicMail_Staff]
ON [edfi].[StaffElectronicMail] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationCode_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationCode_Staff]
ON [edfi].[StaffIdentificationCode] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor] FOREIGN KEY ([StaffIdentificationSystemDescriptorId])
REFERENCES [edfi].[StaffIdentificationSystemDescriptor] ([StaffIdentificationSystemDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationCode_StaffIdentificationSystemDescriptor]
ON [edfi].[StaffIdentificationCode] ([StaffIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationDocument_CountryDescriptor] FOREIGN KEY ([IssuerCountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationDocument_CountryDescriptor]
ON [edfi].[StaffIdentificationDocument] ([IssuerCountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationDocument_IdentificationDocumentUseType] FOREIGN KEY ([IdentificationDocumentUseTypeId])
REFERENCES [edfi].[IdentificationDocumentUseType] ([IdentificationDocumentUseTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationDocument_IdentificationDocumentUseType]
ON [edfi].[StaffIdentificationDocument] ([IdentificationDocumentUseTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationDocument_PersonalInformationVerificationType] FOREIGN KEY ([PersonalInformationVerificationTypeId])
REFERENCES [edfi].[PersonalInformationVerificationType] ([PersonalInformationVerificationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationDocument_PersonalInformationVerificationType]
ON [edfi].[StaffIdentificationDocument] ([PersonalInformationVerificationTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationDocument_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationDocument_Staff]
ON [edfi].[StaffIdentificationDocument] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([StaffIdentificationSystemDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationSystemDescriptor_Descriptor]
ON [edfi].[StaffIdentificationSystemDescriptor] ([StaffIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType] FOREIGN KEY ([StaffIdentificationSystemTypeId])
REFERENCES [edfi].[StaffIdentificationSystemType] ([StaffIdentificationSystemTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffIdentificationSystemDescriptor_StaffIdentificationSystemType]
ON [edfi].[StaffIdentificationSystemDescriptor] ([StaffIdentificationSystemTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_StaffInternationalAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffInternationalAddress_AddressType]
ON [edfi].[StaffInternationalAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_StaffInternationalAddress_CountryDescriptor] FOREIGN KEY ([CountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffInternationalAddress_CountryDescriptor]
ON [edfi].[StaffInternationalAddress] ([CountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_StaffInternationalAddress_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffInternationalAddress_Staff]
ON [edfi].[StaffInternationalAddress] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffLanguage] WITH CHECK ADD CONSTRAINT [FK_StaffLanguage_LanguageDescriptor] FOREIGN KEY ([LanguageDescriptorId])
REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffLanguage_LanguageDescriptor]
ON [edfi].[StaffLanguage] ([LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffLanguage] WITH CHECK ADD CONSTRAINT [FK_StaffLanguage_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffLanguage_Staff]
ON [edfi].[StaffLanguage] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffLanguageUse] WITH CHECK ADD CONSTRAINT [FK_StaffLanguageUse_LanguageUseType] FOREIGN KEY ([LanguageUseTypeId])
REFERENCES [edfi].[LanguageUseType] ([LanguageUseTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffLanguageUse_LanguageUseType]
ON [edfi].[StaffLanguageUse] ([LanguageUseTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffLanguageUse] WITH CHECK ADD CONSTRAINT [FK_StaffLanguageUse_StaffLanguage] FOREIGN KEY ([StaffUSI], [LanguageDescriptorId])
REFERENCES [edfi].[StaffLanguage] ([StaffUSI], [LanguageDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffLanguageUse_StaffLanguage]
ON [edfi].[StaffLanguageUse] ([StaffUSI] ASC, [LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffOtherName] WITH CHECK ADD CONSTRAINT [FK_StaffOtherName_OtherNameType] FOREIGN KEY ([OtherNameTypeId])
REFERENCES [edfi].[OtherNameType] ([OtherNameTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffOtherName_OtherNameType]
ON [edfi].[StaffOtherName] ([OtherNameTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffOtherName] WITH CHECK ADD CONSTRAINT [FK_StaffOtherName_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffOtherName_Staff]
ON [edfi].[StaffOtherName] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffProgramAssociation_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
GO

CREATE NONCLUSTERED INDEX [FK_StaffProgramAssociation_Program]
ON [edfi].[StaffProgramAssociation] ([ProgramEducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[StaffProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffProgramAssociation_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StaffProgramAssociation_Staff]
ON [edfi].[StaffProgramAssociation] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffRace] WITH CHECK ADD CONSTRAINT [FK_StaffRace_RaceType] FOREIGN KEY ([RaceTypeId])
REFERENCES [edfi].[RaceType] ([RaceTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffRace_RaceType]
ON [edfi].[StaffRace] ([RaceTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffRace] WITH CHECK ADD CONSTRAINT [FK_StaffRace_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffRace_Staff]
ON [edfi].[StaffRace] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociation_ProgramAssignmentDescriptor] FOREIGN KEY ([ProgramAssignmentDescriptorId])
REFERENCES [edfi].[ProgramAssignmentDescriptor] ([ProgramAssignmentDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociation_ProgramAssignmentDescriptor]
ON [edfi].[StaffSchoolAssociation] ([ProgramAssignmentDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociation_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociation_School]
ON [edfi].[StaffSchoolAssociation] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociation_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociation_SchoolYearType]
ON [edfi].[StaffSchoolAssociation] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociation_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociation_Staff]
ON [edfi].[StaffSchoolAssociation] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor] FOREIGN KEY ([AcademicSubjectDescriptorId])
REFERENCES [edfi].[AcademicSubjectDescriptor] ([AcademicSubjectDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociationAcademicSubject_AcademicSubjectDescriptor]
ON [edfi].[StaffSchoolAssociationAcademicSubject] ([AcademicSubjectDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociationAcademicSubject] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation] FOREIGN KEY ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId])
REFERENCES [edfi].[StaffSchoolAssociation] ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociationAcademicSubject_StaffSchoolAssociation]
ON [edfi].[StaffSchoolAssociationAcademicSubject] ([StaffUSI] ASC, [ProgramAssignmentDescriptorId] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociationGradeLevel_GradeLevelDescriptor]
ON [edfi].[StaffSchoolAssociationGradeLevel] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffSchoolAssociationGradeLevel] WITH CHECK ADD CONSTRAINT [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation] FOREIGN KEY ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId])
REFERENCES [edfi].[StaffSchoolAssociation] ([StaffUSI], [ProgramAssignmentDescriptorId], [SchoolId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffSchoolAssociationGradeLevel_StaffSchoolAssociation]
ON [edfi].[StaffSchoolAssociationGradeLevel] ([StaffUSI] ASC, [ProgramAssignmentDescriptorId] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[StaffSectionAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffSectionAssociation_ClassroomPositionDescriptor] FOREIGN KEY ([ClassroomPositionDescriptorId])
REFERENCES [edfi].[ClassroomPositionDescriptor] ([ClassroomPositionDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSectionAssociation_ClassroomPositionDescriptor]
ON [edfi].[StaffSectionAssociation] ([ClassroomPositionDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StaffSectionAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffSectionAssociation_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffSectionAssociation_Section]
ON [edfi].[StaffSectionAssociation] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[StaffSectionAssociation] WITH CHECK ADD CONSTRAINT [FK_StaffSectionAssociation_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StaffSectionAssociation_Staff]
ON [edfi].[StaffSectionAssociation] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffTelephone] WITH CHECK ADD CONSTRAINT [FK_StaffTelephone_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffTelephone_Staff]
ON [edfi].[StaffTelephone] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffTelephone] WITH CHECK ADD CONSTRAINT [FK_StaffTelephone_TelephoneNumberType] FOREIGN KEY ([TelephoneNumberTypeId])
REFERENCES [edfi].[TelephoneNumberType] ([TelephoneNumberTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffTelephone_TelephoneNumberType]
ON [edfi].[StaffTelephone] ([TelephoneNumberTypeId] ASC)
GO

ALTER TABLE [edfi].[StaffVisa] WITH CHECK ADD CONSTRAINT [FK_StaffVisa_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StaffVisa_Staff]
ON [edfi].[StaffVisa] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StaffVisa] WITH CHECK ADD CONSTRAINT [FK_StaffVisa_VisaType] FOREIGN KEY ([VisaTypeId])
REFERENCES [edfi].[VisaType] ([VisaTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StaffVisa_VisaType]
ON [edfi].[StaffVisa] ([VisaTypeId] ASC)
GO

ALTER TABLE [edfi].[StateEducationAgency] WITH CHECK ADD CONSTRAINT [FK_StateEducationAgency_EducationOrganization] FOREIGN KEY ([StateEducationAgencyId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StateEducationAgency_EducationOrganization]
ON [edfi].[StateEducationAgency] ([StateEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[StateEducationAgencyAccountability] WITH CHECK ADD CONSTRAINT [FK_StateEducationAgencyAccountability_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_StateEducationAgencyAccountability_SchoolYearType]
ON [edfi].[StateEducationAgencyAccountability] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[StateEducationAgencyAccountability] WITH CHECK ADD CONSTRAINT [FK_StateEducationAgencyAccountability_StateEducationAgency] FOREIGN KEY ([StateEducationAgencyId])
REFERENCES [edfi].[StateEducationAgency] ([StateEducationAgencyId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StateEducationAgencyAccountability_StateEducationAgency]
ON [edfi].[StateEducationAgencyAccountability] ([StateEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[StateEducationAgencyFederalFunds] WITH CHECK ADD CONSTRAINT [FK_StateEducationAgencyFederalFunds_StateEducationAgency] FOREIGN KEY ([StateEducationAgencyId])
REFERENCES [edfi].[StateEducationAgency] ([StateEducationAgencyId])
GO

CREATE NONCLUSTERED INDEX [FK_StateEducationAgencyFederalFunds_StateEducationAgency]
ON [edfi].[StateEducationAgencyFederalFunds] ([StateEducationAgencyId] ASC)
GO

ALTER TABLE [edfi].[Student] WITH CHECK ADD CONSTRAINT [FK_Student_CitizenshipStatusType] FOREIGN KEY ([CitizenshipStatusTypeId])
REFERENCES [edfi].[CitizenshipStatusType] ([CitizenshipStatusTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Student_CitizenshipStatusType]
ON [edfi].[Student] ([CitizenshipStatusTypeId] ASC)
GO

ALTER TABLE [edfi].[Student] WITH CHECK ADD CONSTRAINT [FK_Student_CountryDescriptor] FOREIGN KEY ([BirthCountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Student_CountryDescriptor]
ON [edfi].[Student] ([BirthCountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Student] WITH CHECK ADD CONSTRAINT [FK_Student_LimitedEnglishProficiencyDescriptor] FOREIGN KEY ([LimitedEnglishProficiencyDescriptorId])
REFERENCES [edfi].[LimitedEnglishProficiencyDescriptor] ([LimitedEnglishProficiencyDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Student_LimitedEnglishProficiencyDescriptor]
ON [edfi].[Student] ([LimitedEnglishProficiencyDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Student] WITH CHECK ADD CONSTRAINT [FK_Student_OldEthnicityType] FOREIGN KEY ([OldEthnicityTypeId])
REFERENCES [edfi].[OldEthnicityType] ([OldEthnicityTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Student_OldEthnicityType]
ON [edfi].[Student] ([OldEthnicityTypeId] ASC)
GO

ALTER TABLE [edfi].[Student] WITH CHECK ADD CONSTRAINT [FK_Student_SchoolFoodServicesEligibilityDescriptor] FOREIGN KEY ([SchoolFoodServicesEligibilityDescriptorId])
REFERENCES [edfi].[SchoolFoodServicesEligibilityDescriptor] ([SchoolFoodServicesEligibilityDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_Student_SchoolFoodServicesEligibilityDescriptor]
ON [edfi].[Student] ([SchoolFoodServicesEligibilityDescriptorId] ASC)
GO

ALTER TABLE [edfi].[Student] WITH CHECK ADD CONSTRAINT [FK_Student_SexType] FOREIGN KEY ([SexTypeId])
REFERENCES [edfi].[SexType] ([SexTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Student_SexType]
ON [edfi].[Student] ([SexTypeId] ASC)
GO

ALTER TABLE [edfi].[Student] WITH CHECK ADD CONSTRAINT [FK_Student_StateAbbreviationType] FOREIGN KEY ([BirthStateAbbreviationTypeId])
REFERENCES [edfi].[StateAbbreviationType] ([StateAbbreviationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_Student_StateAbbreviationType]
ON [edfi].[Student] ([BirthStateAbbreviationTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType] FOREIGN KEY ([CumulativeEarnedCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditType]
ON [edfi].[StudentAcademicRecord] ([CumulativeEarnedCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType1] FOREIGN KEY ([CumulativeAttemptedCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditType1]
ON [edfi].[StudentAcademicRecord] ([CumulativeAttemptedCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType2] FOREIGN KEY ([SessionEarnedCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditType2]
ON [edfi].[StudentAcademicRecord] ([SessionEarnedCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_CreditType3] FOREIGN KEY ([SessionAttemptedCreditTypeId])
REFERENCES [edfi].[CreditType] ([CreditTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_CreditType3]
ON [edfi].[StudentAcademicRecord] ([SessionAttemptedCreditTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_EducationOrganization]
ON [edfi].[StudentAcademicRecord] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_SchoolYearType]
ON [edfi].[StudentAcademicRecord] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_Student]
ON [edfi].[StudentAcademicRecord] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecord] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecord_TermDescriptor] FOREIGN KEY ([TermDescriptorId])
REFERENCES [edfi].[TermDescriptor] ([TermDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecord_TermDescriptor]
ON [edfi].[StudentAcademicRecord] ([TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType] FOREIGN KEY ([AcademicHonorCategoryTypeId])
REFERENCES [edfi].[AcademicHonorCategoryType] ([AcademicHonorCategoryTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordAcademicHonor_AcademicHonorCategoryType]
ON [edfi].[StudentAcademicRecordAcademicHonor] ([AcademicHonorCategoryTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor] FOREIGN KEY ([AchievementCategoryDescriptorId])
REFERENCES [edfi].[AchievementCategoryDescriptor] ([AchievementCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordAcademicHonor_AchievementCategoryDescriptor]
ON [edfi].[StudentAcademicRecordAcademicHonor] ([AchievementCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordAcademicHonor] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[StudentAcademicRecord] ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordAcademicHonor_StudentAcademicRecord]
ON [edfi].[StudentAcademicRecordAcademicHonor] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordClassRanking] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[StudentAcademicRecord] ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordClassRanking_StudentAcademicRecord]
ON [edfi].[StudentAcademicRecordClassRanking] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor] FOREIGN KEY ([AchievementCategoryDescriptorId])
REFERENCES [edfi].[AchievementCategoryDescriptor] ([AchievementCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordDiploma_AchievementCategoryDescriptor]
ON [edfi].[StudentAcademicRecordDiploma] ([AchievementCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_DiplomaLevelType] FOREIGN KEY ([DiplomaLevelTypeId])
REFERENCES [edfi].[DiplomaLevelType] ([DiplomaLevelTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordDiploma_DiplomaLevelType]
ON [edfi].[StudentAcademicRecordDiploma] ([DiplomaLevelTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_DiplomaType] FOREIGN KEY ([DiplomaTypeId])
REFERENCES [edfi].[DiplomaType] ([DiplomaTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordDiploma_DiplomaType]
ON [edfi].[StudentAcademicRecordDiploma] ([DiplomaTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordDiploma] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordDiploma_StudentAcademicRecord] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[StudentAcademicRecord] ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordDiploma_StudentAcademicRecord]
ON [edfi].[StudentAcademicRecordDiploma] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordRecognition] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor] FOREIGN KEY ([AchievementCategoryDescriptorId])
REFERENCES [edfi].[AchievementCategoryDescriptor] ([AchievementCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordRecognition_AchievementCategoryDescriptor]
ON [edfi].[StudentAcademicRecordRecognition] ([AchievementCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordRecognition] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_RecognitionType] FOREIGN KEY ([RecognitionTypeId])
REFERENCES [edfi].[RecognitionType] ([RecognitionTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordRecognition_RecognitionType]
ON [edfi].[StudentAcademicRecordRecognition] ([RecognitionTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordRecognition] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordRecognition_StudentAcademicRecord] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[StudentAcademicRecord] ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordRecognition_StudentAcademicRecord]
ON [edfi].[StudentAcademicRecordRecognition] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordReportCard] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordReportCard_ReportCard] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
REFERENCES [edfi].[ReportCard] ([StudentUSI], [EducationOrganizationId], [GradingPeriodDescriptorId], [GradingPeriodBeginDate], [SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordReportCard_ReportCard]
ON [edfi].[StudentAcademicRecordReportCard] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [GradingPeriodDescriptorId] ASC, [GradingPeriodBeginDate] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[StudentAcademicRecordReportCard] WITH CHECK ADD CONSTRAINT [FK_StudentAcademicRecordReportCard_StudentAcademicRecord] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[StudentAcademicRecord] ([StudentUSI], [EducationOrganizationId], [SchoolYear], [TermDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAcademicRecordReportCard_StudentAcademicRecord]
ON [edfi].[StudentAcademicRecordReportCard] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAddress] WITH CHECK ADD CONSTRAINT [FK_StudentAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAddress_AddressType]
ON [edfi].[StudentAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAddress] WITH CHECK ADD CONSTRAINT [FK_StudentAddress_StateAbbreviationType] FOREIGN KEY ([StateAbbreviationTypeId])
REFERENCES [edfi].[StateAbbreviationType] ([StateAbbreviationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAddress_StateAbbreviationType]
ON [edfi].[StudentAddress] ([StateAbbreviationTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAddress] WITH CHECK ADD CONSTRAINT [FK_StudentAddress_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAddress_Student]
ON [edfi].[StudentAddress] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_AdministrationEnvironmentType] FOREIGN KEY ([AdministrationEnvironmentTypeId])
REFERENCES [edfi].[AdministrationEnvironmentType] ([AdministrationEnvironmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_AdministrationEnvironmentType]
ON [edfi].[StudentAssessment] ([AdministrationEnvironmentTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_Assessment] FOREIGN KEY ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
REFERENCES [edfi].[Assessment] ([AssessmentTitle], [AssessedGradeLevelDescriptorId], [AcademicSubjectDescriptorId], [Version])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_Assessment]
ON [edfi].[StudentAssessment] ([AssessmentTitle] ASC, [AssessedGradeLevelDescriptorId] ASC, [AcademicSubjectDescriptorId] ASC, [Version] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_EventCircumstanceType] FOREIGN KEY ([EventCircumstanceTypeId])
REFERENCES [edfi].[EventCircumstanceType] ([EventCircumstanceTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_EventCircumstanceType]
ON [edfi].[StudentAssessment] ([EventCircumstanceTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_GradeLevelDescriptor] FOREIGN KEY ([WhenAssessedGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_GradeLevelDescriptor]
ON [edfi].[StudentAssessment] ([WhenAssessedGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_LanguageDescriptor] FOREIGN KEY ([AdministrationLanguageDescriptorId])
REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_LanguageDescriptor]
ON [edfi].[StudentAssessment] ([AdministrationLanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_ReasonNotTestedType] FOREIGN KEY ([ReasonNotTestedTypeId])
REFERENCES [edfi].[ReasonNotTestedType] ([ReasonNotTestedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_ReasonNotTestedType]
ON [edfi].[StudentAssessment] ([ReasonNotTestedTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_RetestIndicatorType] FOREIGN KEY ([RetestIndicatorTypeId])
REFERENCES [edfi].[RetestIndicatorType] ([RetestIndicatorTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_RetestIndicatorType]
ON [edfi].[StudentAssessment] ([RetestIndicatorTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessment_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessment_Student]
ON [edfi].[StudentAssessment] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentAccommodation] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentAccommodation_AccommodationDescriptor] FOREIGN KEY ([AccommodationDescriptorId])
REFERENCES [edfi].[AccommodationDescriptor] ([AccommodationDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentAccommodation_AccommodationDescriptor]
ON [edfi].[StudentAssessmentAccommodation] ([AccommodationDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentAccommodation] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentAccommodation_StudentAssessment] FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
REFERENCES [edfi].[StudentAssessment] ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentAccommodation_StudentAssessment]
ON [edfi].[StudentAssessmentAccommodation] ([StudentUSI] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [AdministrationDate] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentItem] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentItem_AssessmentItem] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[AssessmentItem] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentItem_AssessmentItem]
ON [edfi].[StudentAssessmentItem] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentItem] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentItem_AssessmentItemResultType] FOREIGN KEY ([AssessmentItemResultTypeId])
REFERENCES [edfi].[AssessmentItemResultType] ([AssessmentItemResultTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentItem_AssessmentItemResultType]
ON [edfi].[StudentAssessmentItem] ([AssessmentItemResultTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentItem] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentItem_ResponseIndicatorType] FOREIGN KEY ([ResponseIndicatorTypeId])
REFERENCES [edfi].[ResponseIndicatorType] ([ResponseIndicatorTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentItem_ResponseIndicatorType]
ON [edfi].[StudentAssessmentItem] ([ResponseIndicatorTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentItem] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentItem_StudentAssessment] FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
REFERENCES [edfi].[StudentAssessment] ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentItem_StudentAssessment]
ON [edfi].[StudentAssessmentItem] ([StudentUSI] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [AdministrationDate] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor] FOREIGN KEY ([PerformanceLevelDescriptorId])
REFERENCES [edfi].[PerformanceLevelDescriptor] ([PerformanceLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentPerformanceLevel_PerformanceLevelDescriptor]
ON [edfi].[StudentAssessmentPerformanceLevel] ([PerformanceLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentPerformanceLevel_StudentAssessment] FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
REFERENCES [edfi].[StudentAssessment] ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentPerformanceLevel_StudentAssessment]
ON [edfi].[StudentAssessmentPerformanceLevel] ([StudentUSI] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [AdministrationDate] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentScoreResult] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentScoreResult_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentScoreResult_AssessmentReportingMethodType]
ON [edfi].[StudentAssessmentScoreResult] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentScoreResult] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentScoreResult_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentScoreResult_ResultDatatypeType]
ON [edfi].[StudentAssessmentScoreResult] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentScoreResult] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentScoreResult_StudentAssessment] FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
REFERENCES [edfi].[StudentAssessment] ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentScoreResult_StudentAssessment]
ON [edfi].[StudentAssessmentScoreResult] ([StudentUSI] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [AdministrationDate] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment] FOREIGN KEY ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
REFERENCES [edfi].[ObjectiveAssessment] ([AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentStudentObjectiveAssessment_ObjectiveAssessment]
ON [edfi].[StudentAssessmentStudentObjectiveAssessment] ([AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessment] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment] FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
REFERENCES [edfi].[StudentAssessment] ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [AdministrationDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentStudentObjectiveAssessment_StudentAssessment]
ON [edfi].[StudentAssessmentStudentObjectiveAssessment] ([StudentUSI] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [AdministrationDate] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor] FOREIGN KEY ([PerformanceLevelDescriptorId])
REFERENCES [edfi].[PerformanceLevelDescriptor] ([PerformanceLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_PerformanceLevelDescriptor]
ON [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ([PerformanceLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment] FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
REFERENCES [edfi].[StudentAssessmentStudentObjectiveAssessment] ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentStudentObjectiveAssessmentPerformanceLevel_StudentAssessmentStudentObjectiveAssessment]
ON [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] ([StudentUSI] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC, [AdministrationDate] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodType] FOREIGN KEY ([AssessmentReportingMethodTypeId])
REFERENCES [edfi].[AssessmentReportingMethodType] ([AssessmentReportingMethodTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_AssessmentReportingMethodType]
ON [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ([AssessmentReportingMethodTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeType] FOREIGN KEY ([ResultDatatypeTypeId])
REFERENCES [edfi].[ResultDatatypeType] ([ResultDatatypeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_ResultDatatypeType]
ON [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ([ResultDatatypeTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] WITH CHECK ADD CONSTRAINT [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment] FOREIGN KEY ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
REFERENCES [edfi].[StudentAssessmentStudentObjectiveAssessment] ([StudentUSI], [AssessmentTitle], [AcademicSubjectDescriptorId], [AssessedGradeLevelDescriptorId], [Version], [IdentificationCode], [AdministrationDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentAssessmentStudentObjectiveAssessmentScoreResult_StudentAssessmentStudentObjectiveAssessment]
ON [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] ([StudentUSI] ASC, [AssessmentTitle] ASC, [AcademicSubjectDescriptorId] ASC, [AssessedGradeLevelDescriptorId] ASC, [Version] ASC, [IdentificationCode] ASC, [AdministrationDate] ASC)
GO

ALTER TABLE [edfi].[StudentCharacteristic] WITH CHECK ADD CONSTRAINT [FK_StudentCharacteristic_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCharacteristic_Student]
ON [edfi].[StudentCharacteristic] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentCharacteristic] WITH CHECK ADD CONSTRAINT [FK_StudentCharacteristic_StudentCharacteristicDescriptor] FOREIGN KEY ([StudentCharacteristicDescriptorId])
REFERENCES [edfi].[StudentCharacteristicDescriptor] ([StudentCharacteristicDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCharacteristic_StudentCharacteristicDescriptor]
ON [edfi].[StudentCharacteristic] ([StudentCharacteristicDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentCharacteristicDescriptor] WITH CHECK ADD CONSTRAINT [FK_StudentCharacteristicDescriptor_Descriptor] FOREIGN KEY ([StudentCharacteristicDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCharacteristicDescriptor_Descriptor]
ON [edfi].[StudentCharacteristicDescriptor] ([StudentCharacteristicDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentCharacteristicDescriptor] WITH CHECK ADD CONSTRAINT [FK_StudentCharacteristicDescriptor_StudentCharacteristicType] FOREIGN KEY ([StudentCharacteristicTypeId])
REFERENCES [edfi].[StudentCharacteristicType] ([StudentCharacteristicTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCharacteristicDescriptor_StudentCharacteristicType]
ON [edfi].[StudentCharacteristicDescriptor] ([StudentCharacteristicTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentCohortAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentCohortAssociation_Cohort] FOREIGN KEY ([CohortIdentifier], [EducationOrganizationId])
REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCohortAssociation_Cohort]
ON [edfi].[StudentCohortAssociation] ([CohortIdentifier] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentCohortAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentCohortAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCohortAssociation_Student]
ON [edfi].[StudentCohortAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentCohortAssociationSection] WITH CHECK ADD CONSTRAINT [FK_StudentCohortAssociationSection_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCohortAssociationSection_Section]
ON [edfi].[StudentCohortAssociationSection] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[StudentCohortAssociationSection] WITH CHECK ADD CONSTRAINT [FK_StudentCohortAssociationSection_StudentCohortAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [CohortIdentifier], [BeginDate])
REFERENCES [edfi].[StudentCohortAssociation] ([StudentUSI], [EducationOrganizationId], [CohortIdentifier], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCohortAssociationSection_StudentCohortAssociation]
ON [edfi].[StudentCohortAssociationSection] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [CohortIdentifier] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentCohortYear] WITH CHECK ADD CONSTRAINT [FK_StudentCohortYear_CohortYearType] FOREIGN KEY ([CohortYearTypeId])
REFERENCES [edfi].[CohortYearType] ([CohortYearTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCohortYear_CohortYearType]
ON [edfi].[StudentCohortYear] ([CohortYearTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentCohortYear] WITH CHECK ADD CONSTRAINT [FK_StudentCohortYear_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCohortYear_SchoolYearType]
ON [edfi].[StudentCohortYear] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[StudentCohortYear] WITH CHECK ADD CONSTRAINT [FK_StudentCohortYear_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCohortYear_Student]
ON [edfi].[StudentCohortYear] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_StudentCompetencyObjective_CompetencyLevelDescriptor] FOREIGN KEY ([CompetencyLevelDescriptorId])
REFERENCES [edfi].[CompetencyLevelDescriptor] ([CompetencyLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_CompetencyLevelDescriptor]
ON [edfi].[StudentCompetencyObjective] ([CompetencyLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_StudentCompetencyObjective_CompetencyObjective] FOREIGN KEY ([Objective], [ObjectiveGradeLevelDescriptorId], [ObjectiveEducationOrganizationId])
REFERENCES [edfi].[CompetencyObjective] ([Objective], [ObjectiveGradeLevelDescriptorId], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_CompetencyObjective]
ON [edfi].[StudentCompetencyObjective] ([Objective] ASC, [ObjectiveGradeLevelDescriptorId] ASC, [ObjectiveEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_StudentCompetencyObjective_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_GradingPeriod]
ON [edfi].[StudentCompetencyObjective] ([GradingPeriodDescriptorId] ASC, [SchoolId] ASC, [GradingPeriodBeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_StudentCompetencyObjective_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_Student]
ON [edfi].[StudentCompetencyObjective] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_StudentCompetencyObjective_StudentProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_StudentProgramAssociation]
ON [edfi].[StudentCompetencyObjective] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentCompetencyObjective] WITH CHECK ADD CONSTRAINT [FK_StudentCompetencyObjective_StudentSectionAssociation] FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
REFERENCES [edfi].[StudentSectionAssociation] ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCompetencyObjective_StudentSectionAssociation]
ON [edfi].[StudentCompetencyObjective] ([StudentUSI] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentCTEProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentCTEProgramAssociation_StudentProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCTEProgramAssociation_StudentProgramAssociation]
ON [edfi].[StudentCTEProgramAssociation] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentCTEProgramAssociationCTEProgram] WITH CHECK ADD CONSTRAINT [FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType] FOREIGN KEY ([CareerPathwayTypeId])
REFERENCES [edfi].[CareerPathwayType] ([CareerPathwayTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentCTEProgramAssociationCTEProgram_CareerPathwayType]
ON [edfi].[StudentCTEProgramAssociationCTEProgram] ([CareerPathwayTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentCTEProgramAssociationCTEProgram] WITH CHECK ADD CONSTRAINT [FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentCTEProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentCTEProgramAssociationCTEProgram_StudentCTEProgramAssociation]
ON [edfi].[StudentCTEProgramAssociationCTEProgram] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentDisability] WITH CHECK ADD CONSTRAINT [FK_StudentDisability_DisabilityDescriptor] FOREIGN KEY ([DisabilityDescriptorId])
REFERENCES [edfi].[DisabilityDescriptor] ([DisabilityDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisability_DisabilityDescriptor]
ON [edfi].[StudentDisability] ([DisabilityDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentDisability] WITH CHECK ADD CONSTRAINT [FK_StudentDisability_DisabilityDeterminationSourceType] FOREIGN KEY ([DisabilityDeterminationSourceTypeId])
REFERENCES [edfi].[DisabilityDeterminationSourceType] ([DisabilityDeterminationSourceTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisability_DisabilityDeterminationSourceType]
ON [edfi].[StudentDisability] ([DisabilityDeterminationSourceTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentDisability] WITH CHECK ADD CONSTRAINT [FK_StudentDisability_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisability_Student]
ON [edfi].[StudentDisability] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociation_DisciplineIncident] FOREIGN KEY ([IncidentIdentifier], [SchoolId])
REFERENCES [edfi].[DisciplineIncident] ([IncidentIdentifier], [SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentAssociation_DisciplineIncident]
ON [edfi].[StudentDisciplineIncidentAssociation] ([IncidentIdentifier] ASC, [SchoolId] ASC)
GO

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentAssociation_Student]
ON [edfi].[StudentDisciplineIncidentAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType] FOREIGN KEY ([StudentParticipationCodeTypeId])
REFERENCES [edfi].[StudentParticipationCodeType] ([StudentParticipationCodeTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentAssociation_StudentParticipationCodeType]
ON [edfi].[StudentDisciplineIncidentAssociation] ([StudentParticipationCodeTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociationBehavior] WITH CHECK ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor] FOREIGN KEY ([BehaviorDescriptorId])
REFERENCES [edfi].[BehaviorDescriptor] ([BehaviorDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentAssociationBehavior_BehaviorDescriptor]
ON [edfi].[StudentDisciplineIncidentAssociationBehavior] ([BehaviorDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentDisciplineIncidentAssociationBehavior] WITH CHECK ADD CONSTRAINT [FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation] FOREIGN KEY ([StudentUSI], [SchoolId], [IncidentIdentifier])
REFERENCES [edfi].[StudentDisciplineIncidentAssociation] ([StudentUSI], [SchoolId], [IncidentIdentifier])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentDisciplineIncidentAssociationBehavior_StudentDisciplineIncidentAssociation]
ON [edfi].[StudentDisciplineIncidentAssociationBehavior] ([StudentUSI] ASC, [SchoolId] ASC, [IncidentIdentifier] ASC)
GO

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_EducationOrganization]
ON [edfi].[StudentEducationOrganizationAssociation] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor] FOREIGN KEY ([ResponsibilityDescriptorId])
REFERENCES [edfi].[ResponsibilityDescriptor] ([ResponsibilityDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_ResponsibilityDescriptor]
ON [edfi].[StudentEducationOrganizationAssociation] ([ResponsibilityDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentEducationOrganizationAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentEducationOrganizationAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentEducationOrganizationAssociation_Student]
ON [edfi].[StudentEducationOrganizationAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentElectronicMail] WITH CHECK ADD CONSTRAINT [FK_StudentElectronicMail_ElectronicMailType] FOREIGN KEY ([ElectronicMailTypeId])
REFERENCES [edfi].[ElectronicMailType] ([ElectronicMailTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentElectronicMail_ElectronicMailType]
ON [edfi].[StudentElectronicMail] ([ElectronicMailTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentElectronicMail] WITH CHECK ADD CONSTRAINT [FK_StudentElectronicMail_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentElectronicMail_Student]
ON [edfi].[StudentElectronicMail] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK ADD CONSTRAINT [FK_StudentGradebookEntry_CompetencyLevelDescriptor] FOREIGN KEY ([CompetencyLevelDescriptorId])
REFERENCES [edfi].[CompetencyLevelDescriptor] ([CompetencyLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentGradebookEntry_CompetencyLevelDescriptor]
ON [edfi].[StudentGradebookEntry] ([CompetencyLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK ADD CONSTRAINT [FK_StudentGradebookEntry_GradebookEntry] FOREIGN KEY ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
REFERENCES [edfi].[GradebookEntry] ([GradebookEntryTitle], [ClassroomIdentificationCode], [SchoolId], [ClassPeriodName], [LocalCourseCode], [SchoolYear], [TermDescriptorId], [UniqueSectionCode], [SequenceOfCourse], [DateAssigned])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentGradebookEntry_GradebookEntry]
ON [edfi].[StudentGradebookEntry] ([GradebookEntryTitle] ASC, [ClassroomIdentificationCode] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [LocalCourseCode] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [DateAssigned] ASC)
GO

ALTER TABLE [edfi].[StudentGradebookEntry] WITH CHECK ADD CONSTRAINT [FK_StudentGradebookEntry_StudentSectionAssociation] FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
REFERENCES [edfi].[StudentSectionAssociation] ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentGradebookEntry_StudentSectionAssociation]
ON [edfi].[StudentGradebookEntry] ([StudentUSI] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationCode_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationCode_Student]
ON [edfi].[StudentIdentificationCode] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationCode] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor] FOREIGN KEY ([StudentIdentificationSystemDescriptorId])
REFERENCES [edfi].[StudentIdentificationSystemDescriptor] ([StudentIdentificationSystemDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationCode_StudentIdentificationSystemDescriptor]
ON [edfi].[StudentIdentificationCode] ([StudentIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationDocument_CountryDescriptor] FOREIGN KEY ([IssuerCountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationDocument_CountryDescriptor]
ON [edfi].[StudentIdentificationDocument] ([IssuerCountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationDocument_IdentificationDocumentUseType] FOREIGN KEY ([IdentificationDocumentUseTypeId])
REFERENCES [edfi].[IdentificationDocumentUseType] ([IdentificationDocumentUseTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationDocument_IdentificationDocumentUseType]
ON [edfi].[StudentIdentificationDocument] ([IdentificationDocumentUseTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationDocument_PersonalInformationVerificationType] FOREIGN KEY ([PersonalInformationVerificationTypeId])
REFERENCES [edfi].[PersonalInformationVerificationType] ([PersonalInformationVerificationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationDocument_PersonalInformationVerificationType]
ON [edfi].[StudentIdentificationDocument] ([PersonalInformationVerificationTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationDocument] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationDocument_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationDocument_Student]
ON [edfi].[StudentIdentificationDocument] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationSystemDescriptor_Descriptor] FOREIGN KEY ([StudentIdentificationSystemDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationSystemDescriptor_Descriptor]
ON [edfi].[StudentIdentificationSystemDescriptor] ([StudentIdentificationSystemDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentIdentificationSystemDescriptor] WITH CHECK ADD CONSTRAINT [FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType] FOREIGN KEY ([StudentIdentificationSystemTypeId])
REFERENCES [edfi].[StudentIdentificationSystemType] ([StudentIdentificationSystemTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentIdentificationSystemDescriptor_StudentIdentificationSystemType]
ON [edfi].[StudentIdentificationSystemDescriptor] ([StudentIdentificationSystemTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentIndicator] WITH CHECK ADD CONSTRAINT [FK_StudentIndicator_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentIndicator_Student]
ON [edfi].[StudentIndicator] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_StudentInternationalAddress_AddressType] FOREIGN KEY ([AddressTypeId])
REFERENCES [edfi].[AddressType] ([AddressTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInternationalAddress_AddressType]
ON [edfi].[StudentInternationalAddress] ([AddressTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_StudentInternationalAddress_CountryDescriptor] FOREIGN KEY ([CountryDescriptorId])
REFERENCES [edfi].[CountryDescriptor] ([CountryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInternationalAddress_CountryDescriptor]
ON [edfi].[StudentInternationalAddress] ([CountryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentInternationalAddress] WITH CHECK ADD CONSTRAINT [FK_StudentInternationalAddress_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentInternationalAddress_Student]
ON [edfi].[StudentInternationalAddress] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociation_Cohort] FOREIGN KEY ([CohortIdentifier], [CohortEducationOrganizationId])
REFERENCES [edfi].[Cohort] ([CohortIdentifier], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociation_Cohort]
ON [edfi].[StudentInterventionAssociation] ([CohortIdentifier] ASC, [CohortEducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociation_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociation_Intervention]
ON [edfi].[StudentInterventionAssociation] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociation_Student]
ON [edfi].[StudentInterventionAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor] FOREIGN KEY ([DiagnosisDescriptorId])
REFERENCES [edfi].[DiagnosisDescriptor] ([DiagnosisDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_DiagnosisDescriptor]
ON [edfi].[StudentInterventionAssociationInterventionEffectiveness] ([DiagnosisDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor] FOREIGN KEY ([GradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_GradeLevelDescriptor]
ON [edfi].[StudentInterventionAssociationInterventionEffectiveness] ([GradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType] FOREIGN KEY ([InterventionEffectivenessRatingTypeId])
REFERENCES [edfi].[InterventionEffectivenessRatingType] ([InterventionEffectivenessRatingTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_InterventionEffectivenessRatingType]
ON [edfi].[StudentInterventionAssociationInterventionEffectiveness] ([InterventionEffectivenessRatingTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType] FOREIGN KEY ([PopulationServedTypeId])
REFERENCES [edfi].[PopulationServedType] ([PopulationServedTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_PopulationServedType]
ON [edfi].[StudentInterventionAssociationInterventionEffectiveness] ([PopulationServedTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAssociationInterventionEffectiveness] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation] FOREIGN KEY ([StudentUSI], [InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[StudentInterventionAssociation] ([StudentUSI], [InterventionIdentificationCode], [EducationOrganizationId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAssociationInterventionEffectiveness_StudentInterventionAssociation]
ON [edfi].[StudentInterventionAssociationInterventionEffectiveness] ([StudentUSI] ASC, [InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAttendanceEvent_AttendanceEventCategoryDescriptor]
ON [edfi].[StudentInterventionAttendanceEvent] ([AttendanceEventCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType] FOREIGN KEY ([EducationalEnvironmentTypeId])
REFERENCES [edfi].[EducationalEnvironmentType] ([EducationalEnvironmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAttendanceEvent_EducationalEnvironmentType]
ON [edfi].[StudentInterventionAttendanceEvent] ([EducationalEnvironmentTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_Intervention] FOREIGN KEY ([InterventionIdentificationCode], [EducationOrganizationId])
REFERENCES [edfi].[Intervention] ([InterventionIdentificationCode], [EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAttendanceEvent_Intervention]
ON [edfi].[StudentInterventionAttendanceEvent] ([InterventionIdentificationCode] ASC, [EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentInterventionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentInterventionAttendanceEvent_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentInterventionAttendanceEvent_Student]
ON [edfi].[StudentInterventionAttendanceEvent] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentLanguage] WITH CHECK ADD CONSTRAINT [FK_StudentLanguage_LanguageDescriptor] FOREIGN KEY ([LanguageDescriptorId])
REFERENCES [edfi].[LanguageDescriptor] ([LanguageDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentLanguage_LanguageDescriptor]
ON [edfi].[StudentLanguage] ([LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentLanguage] WITH CHECK ADD CONSTRAINT [FK_StudentLanguage_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentLanguage_Student]
ON [edfi].[StudentLanguage] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentLanguageUse] WITH CHECK ADD CONSTRAINT [FK_StudentLanguageUse_LanguageUseType] FOREIGN KEY ([LanguageUseTypeId])
REFERENCES [edfi].[LanguageUseType] ([LanguageUseTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentLanguageUse_LanguageUseType]
ON [edfi].[StudentLanguageUse] ([LanguageUseTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentLanguageUse] WITH CHECK ADD CONSTRAINT [FK_StudentLanguageUse_StudentLanguage] FOREIGN KEY ([StudentUSI], [LanguageDescriptorId])
REFERENCES [edfi].[StudentLanguage] ([StudentUSI], [LanguageDescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentLanguageUse_StudentLanguage]
ON [edfi].[StudentLanguageUse] ([StudentUSI] ASC, [LanguageDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_StudentLearningObjective_CompetencyLevelDescriptor] FOREIGN KEY ([CompetencyLevelDescriptorId])
REFERENCES [edfi].[CompetencyLevelDescriptor] ([CompetencyLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentLearningObjective_CompetencyLevelDescriptor]
ON [edfi].[StudentLearningObjective] ([CompetencyLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_StudentLearningObjective_GradingPeriod] FOREIGN KEY ([GradingPeriodDescriptorId], [SchoolId], [GradingPeriodBeginDate])
REFERENCES [edfi].[GradingPeriod] ([GradingPeriodDescriptorId], [SchoolId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_StudentLearningObjective_GradingPeriod]
ON [edfi].[StudentLearningObjective] ([GradingPeriodDescriptorId] ASC, [SchoolId] ASC, [GradingPeriodBeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_StudentLearningObjective_LearningObjective] FOREIGN KEY ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
REFERENCES [edfi].[LearningObjective] ([Objective], [AcademicSubjectDescriptorId], [ObjectiveGradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentLearningObjective_LearningObjective]
ON [edfi].[StudentLearningObjective] ([Objective] ASC, [AcademicSubjectDescriptorId] ASC, [ObjectiveGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_StudentLearningObjective_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentLearningObjective_Student]
ON [edfi].[StudentLearningObjective] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_StudentLearningObjective_StudentProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
GO

CREATE NONCLUSTERED INDEX [FK_StudentLearningObjective_StudentProgramAssociation]
ON [edfi].[StudentLearningObjective] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentLearningObjective] WITH CHECK ADD CONSTRAINT [FK_StudentLearningObjective_StudentSectionAssociation] FOREIGN KEY ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [StudentSectionAssociationBeginDate])
REFERENCES [edfi].[StudentSectionAssociation] ([StudentUSI], [SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [UniqueSectionCode], [SequenceOfCourse], [SchoolYear], [TermDescriptorId], [BeginDate])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentLearningObjective_StudentSectionAssociation]
ON [edfi].[StudentLearningObjective] ([StudentUSI] ASC, [SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC, [StudentSectionAssociationBeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentLearningStyle] WITH CHECK ADD CONSTRAINT [FK_StudentLearningStyle_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentLearningStyle_Student]
ON [edfi].[StudentLearningStyle] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor] FOREIGN KEY ([ContinuationOfServicesReasonDescriptorId])
REFERENCES [edfi].[ContinuationOfServicesReasonDescriptor] ([ContinuationOfServicesReasonDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentMigrantEducationProgramAssociation_ContinuationOfServicesReasonDescriptor]
ON [edfi].[StudentMigrantEducationProgramAssociation] ([ContinuationOfServicesReasonDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentMigrantEducationProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentMigrantEducationProgramAssociation_StudentProgramAssociation]
ON [edfi].[StudentMigrantEducationProgramAssociation] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentOtherName] WITH CHECK ADD CONSTRAINT [FK_StudentOtherName_OtherNameType] FOREIGN KEY ([OtherNameTypeId])
REFERENCES [edfi].[OtherNameType] ([OtherNameTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentOtherName_OtherNameType]
ON [edfi].[StudentOtherName] ([OtherNameTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentOtherName] WITH CHECK ADD CONSTRAINT [FK_StudentOtherName_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentOtherName_Student]
ON [edfi].[StudentOtherName] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentParentAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentParentAssociation_Parent] FOREIGN KEY ([ParentUSI])
REFERENCES [edfi].[Parent] ([ParentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentParentAssociation_Parent]
ON [edfi].[StudentParentAssociation] ([ParentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentParentAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentParentAssociation_RelationType] FOREIGN KEY ([RelationTypeId])
REFERENCES [edfi].[RelationType] ([RelationTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentParentAssociation_RelationType]
ON [edfi].[StudentParentAssociation] ([RelationTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentParentAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentParentAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentParentAssociation_Student]
ON [edfi].[StudentParentAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAssociation_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAssociation_EducationOrganization]
ON [edfi].[StudentProgramAssociation] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAssociation_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAssociation_Program]
ON [edfi].[StudentProgramAssociation] ([ProgramEducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAssociation_ReasonExitedDescriptor] FOREIGN KEY ([ReasonExitedDescriptorId])
REFERENCES [edfi].[ReasonExitedDescriptor] ([ReasonExitedDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAssociation_ReasonExitedDescriptor]
ON [edfi].[StudentProgramAssociation] ([ReasonExitedDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAssociation_Student]
ON [edfi].[StudentProgramAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAssociationService] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAssociationService_ServiceDescriptor] FOREIGN KEY ([ServiceDescriptorId])
REFERENCES [edfi].[ServiceDescriptor] ([ServiceDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAssociationService_ServiceDescriptor]
ON [edfi].[StudentProgramAssociationService] ([ServiceDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAssociationService] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAssociationService_StudentProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAssociationService_StudentProgramAssociation]
ON [edfi].[StudentProgramAssociationService] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_AttendanceEventCategoryDescriptor]
ON [edfi].[StudentProgramAttendanceEvent] ([AttendanceEventCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationalEnvironmentType] FOREIGN KEY ([EducationalEnvironmentTypeId])
REFERENCES [edfi].[EducationalEnvironmentType] ([EducationalEnvironmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_EducationalEnvironmentType]
ON [edfi].[StudentProgramAttendanceEvent] ([EducationalEnvironmentTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_EducationOrganization] FOREIGN KEY ([EducationOrganizationId])
REFERENCES [edfi].[EducationOrganization] ([EducationOrganizationId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_EducationOrganization]
ON [edfi].[StudentProgramAttendanceEvent] ([EducationOrganizationId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_Program] FOREIGN KEY ([ProgramEducationOrganizationId], [ProgramTypeId], [ProgramName])
REFERENCES [edfi].[Program] ([EducationOrganizationId], [ProgramTypeId], [ProgramName])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_Program]
ON [edfi].[StudentProgramAttendanceEvent] ([ProgramEducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC)
GO

ALTER TABLE [edfi].[StudentProgramAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentProgramAttendanceEvent_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramAttendanceEvent_Student]
ON [edfi].[StudentProgramAttendanceEvent] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentProgramParticipation] WITH CHECK ADD CONSTRAINT [FK_StudentProgramParticipation_ProgramType] FOREIGN KEY ([ProgramTypeId])
REFERENCES [edfi].[ProgramType] ([ProgramTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramParticipation_ProgramType]
ON [edfi].[StudentProgramParticipation] ([ProgramTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramParticipation] WITH CHECK ADD CONSTRAINT [FK_StudentProgramParticipation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramParticipation_Student]
ON [edfi].[StudentProgramParticipation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentProgramParticipationProgramCharacteristic] WITH CHECK ADD CONSTRAINT [FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor] FOREIGN KEY ([ProgramCharacteristicDescriptorId])
REFERENCES [edfi].[ProgramCharacteristicDescriptor] ([ProgramCharacteristicDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramParticipationProgramCharacteristic_ProgramCharacteristicDescriptor]
ON [edfi].[StudentProgramParticipationProgramCharacteristic] ([ProgramCharacteristicDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentProgramParticipationProgramCharacteristic] WITH CHECK ADD CONSTRAINT [FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation] FOREIGN KEY ([StudentUSI], [ProgramTypeId])
REFERENCES [edfi].[StudentProgramParticipation] ([StudentUSI], [ProgramTypeId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentProgramParticipationProgramCharacteristic_StudentProgramParticipation]
ON [edfi].[StudentProgramParticipationProgramCharacteristic] ([StudentUSI] ASC, [ProgramTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentRace] WITH CHECK ADD CONSTRAINT [FK_StudentRace_RaceType] FOREIGN KEY ([RaceTypeId])
REFERENCES [edfi].[RaceType] ([RaceTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentRace_RaceType]
ON [edfi].[StudentRace] ([RaceTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentRace] WITH CHECK ADD CONSTRAINT [FK_StudentRace_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentRace_Student]
ON [edfi].[StudentRace] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_EntryGradeLevelReasonType] FOREIGN KEY ([EntryGradeLevelReasonTypeId])
REFERENCES [edfi].[EntryGradeLevelReasonType] ([EntryGradeLevelReasonTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_EntryGradeLevelReasonType]
ON [edfi].[StudentSchoolAssociation] ([EntryGradeLevelReasonTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_EntryTypeDescriptor] FOREIGN KEY ([EntryTypeDescriptorId])
REFERENCES [edfi].[EntryTypeDescriptor] ([EntryTypeDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_EntryTypeDescriptor]
ON [edfi].[StudentSchoolAssociation] ([EntryTypeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor] FOREIGN KEY ([ExitWithdrawTypeDescriptorId])
REFERENCES [edfi].[ExitWithdrawTypeDescriptor] ([ExitWithdrawTypeDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_ExitWithdrawTypeDescriptor]
ON [edfi].[StudentSchoolAssociation] ([ExitWithdrawTypeDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_GradeLevelDescriptor] FOREIGN KEY ([EntryGradeLevelDescriptorId])
REFERENCES [edfi].[GradeLevelDescriptor] ([GradeLevelDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_GradeLevelDescriptor]
ON [edfi].[StudentSchoolAssociation] ([EntryGradeLevelDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_GraduationPlan] FOREIGN KEY ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
REFERENCES [edfi].[GraduationPlan] ([GraduationPlanTypeDescriptorId], [EducationOrganizationId], [GraduationSchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_GraduationPlan]
ON [edfi].[StudentSchoolAssociation] ([GraduationPlanTypeDescriptorId] ASC, [EducationOrganizationId] ASC, [GraduationSchoolYear] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_ResidencyStatusDescriptor] FOREIGN KEY ([ResidencyStatusDescriptorId])
REFERENCES [edfi].[ResidencyStatusDescriptor] ([ResidencyStatusDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_ResidencyStatusDescriptor]
ON [edfi].[StudentSchoolAssociation] ([ResidencyStatusDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_School]
ON [edfi].[StudentSchoolAssociation] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType] FOREIGN KEY ([SchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_SchoolYearType]
ON [edfi].[StudentSchoolAssociation] ([SchoolYear] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_SchoolYearType1] FOREIGN KEY ([ClassOfSchoolYear])
REFERENCES [edfi].[SchoolYearType] ([SchoolYear])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_SchoolYearType1]
ON [edfi].[StudentSchoolAssociation] ([ClassOfSchoolYear] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociation_Student]
ON [edfi].[StudentSchoolAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociationEducationPlan_EducationPlanType] FOREIGN KEY ([EducationPlanTypeId])
REFERENCES [edfi].[EducationPlanType] ([EducationPlanTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociationEducationPlan_EducationPlanType]
ON [edfi].[StudentSchoolAssociationEducationPlan] ([EducationPlanTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAssociationEducationPlan] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation] FOREIGN KEY ([StudentUSI], [SchoolId], [EntryDate])
REFERENCES [edfi].[StudentSchoolAssociation] ([StudentUSI], [SchoolId], [EntryDate])
ON DELETE CASCADE
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAssociationEducationPlan_StudentSchoolAssociation]
ON [edfi].[StudentSchoolAssociationEducationPlan] ([StudentUSI] ASC, [SchoolId] ASC, [EntryDate] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_AttendanceEventCategoryDescriptor]
ON [edfi].[StudentSchoolAttendanceEvent] ([AttendanceEventCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType] FOREIGN KEY ([EducationalEnvironmentTypeId])
REFERENCES [edfi].[EducationalEnvironmentType] ([EducationalEnvironmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_EducationalEnvironmentType]
ON [edfi].[StudentSchoolAttendanceEvent] ([EducationalEnvironmentTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_School] FOREIGN KEY ([SchoolId])
REFERENCES [edfi].[School] ([SchoolId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_School]
ON [edfi].[StudentSchoolAttendanceEvent] ([SchoolId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_Session] FOREIGN KEY ([SchoolId], [SchoolYear], [TermDescriptorId])
REFERENCES [edfi].[Session] ([SchoolId], [SchoolYear], [TermDescriptorId])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_Session]
ON [edfi].[StudentSchoolAttendanceEvent] ([SchoolId] ASC, [SchoolYear] ASC, [TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSchoolAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSchoolAttendanceEvent_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSchoolAttendanceEvent_Student]
ON [edfi].[StudentSchoolAttendanceEvent] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSectionAssociation_RepeatIdentifierType] FOREIGN KEY ([RepeatIdentifierTypeId])
REFERENCES [edfi].[RepeatIdentifierType] ([RepeatIdentifierTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_RepeatIdentifierType]
ON [edfi].[StudentSectionAssociation] ([RepeatIdentifierTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSectionAssociation_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_Section]
ON [edfi].[StudentSectionAssociation] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[StudentSectionAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSectionAssociation_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSectionAssociation_Student]
ON [edfi].[StudentSectionAssociation] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor] FOREIGN KEY ([AttendanceEventCategoryDescriptorId])
REFERENCES [edfi].[AttendanceEventCategoryDescriptor] ([AttendanceEventCategoryDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSectionAttendanceEvent_AttendanceEventCategoryDescriptor]
ON [edfi].[StudentSectionAttendanceEvent] ([AttendanceEventCategoryDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_EducationalEnvironmentType] FOREIGN KEY ([EducationalEnvironmentTypeId])
REFERENCES [edfi].[EducationalEnvironmentType] ([EducationalEnvironmentTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSectionAttendanceEvent_EducationalEnvironmentType]
ON [edfi].[StudentSectionAttendanceEvent] ([EducationalEnvironmentTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_Section] FOREIGN KEY ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
REFERENCES [edfi].[Section] ([SchoolId], [ClassPeriodName], [ClassroomIdentificationCode], [LocalCourseCode], [TermDescriptorId], [SchoolYear], [UniqueSectionCode], [SequenceOfCourse])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentSectionAttendanceEvent_Section]
ON [edfi].[StudentSectionAttendanceEvent] ([SchoolId] ASC, [ClassPeriodName] ASC, [ClassroomIdentificationCode] ASC, [LocalCourseCode] ASC, [TermDescriptorId] ASC, [SchoolYear] ASC, [UniqueSectionCode] ASC, [SequenceOfCourse] ASC)
GO

ALTER TABLE [edfi].[StudentSectionAttendanceEvent] WITH CHECK ADD CONSTRAINT [FK_StudentSectionAttendanceEvent_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSectionAttendanceEvent_Student]
ON [edfi].[StudentSectionAttendanceEvent] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor] FOREIGN KEY ([SpecialEducationSettingDescriptorId])
REFERENCES [edfi].[SpecialEducationSettingDescriptor] ([SpecialEducationSettingDescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramAssociation_SpecialEducationSettingDescriptor]
ON [edfi].[StudentSpecialEducationProgramAssociation] ([SpecialEducationSettingDescriptorId] ASC)
GO

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramAssociation_StudentProgramAssociation]
ON [edfi].[StudentSpecialEducationProgramAssociation] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] WITH CHECK ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff] FOREIGN KEY ([StaffUSI])
REFERENCES [edfi].[Staff] ([StaffUSI])
GO

CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramAssociationServiceProvider_Staff]
ON [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ([StaffUSI] ASC)
GO

ALTER TABLE [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] WITH CHECK ADD CONSTRAINT [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentSpecialEducationProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentSpecialEducationProgramAssociationServiceProvider_StudentSpecialEducationProgramAssociation]
ON [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentTelephone] WITH CHECK ADD CONSTRAINT [FK_StudentTelephone_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentTelephone_Student]
ON [edfi].[StudentTelephone] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentTelephone] WITH CHECK ADD CONSTRAINT [FK_StudentTelephone_TelephoneNumberType] FOREIGN KEY ([TelephoneNumberTypeId])
REFERENCES [edfi].[TelephoneNumberType] ([TelephoneNumberTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentTelephone_TelephoneNumberType]
ON [edfi].[StudentTelephone] ([TelephoneNumberTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation] FOREIGN KEY ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
REFERENCES [edfi].[StudentProgramAssociation] ([StudentUSI], [EducationOrganizationId], [ProgramTypeId], [ProgramName], [ProgramEducationOrganizationId], [BeginDate])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentTitleIPartAProgramAssociation_StudentProgramAssociation]
ON [edfi].[StudentTitleIPartAProgramAssociation] ([StudentUSI] ASC, [EducationOrganizationId] ASC, [ProgramTypeId] ASC, [ProgramName] ASC, [ProgramEducationOrganizationId] ASC, [BeginDate] ASC)
GO

ALTER TABLE [edfi].[StudentTitleIPartAProgramAssociation] WITH CHECK ADD CONSTRAINT [FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType] FOREIGN KEY ([TitleIPartAParticipantTypeId])
REFERENCES [edfi].[TitleIPartAParticipantType] ([TitleIPartAParticipantTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentTitleIPartAProgramAssociation_TitleIPartAParticipantType]
ON [edfi].[StudentTitleIPartAProgramAssociation] ([TitleIPartAParticipantTypeId] ASC)
GO

ALTER TABLE [edfi].[StudentVisa] WITH CHECK ADD CONSTRAINT [FK_StudentVisa_Student] FOREIGN KEY ([StudentUSI])
REFERENCES [edfi].[Student] ([StudentUSI])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_StudentVisa_Student]
ON [edfi].[StudentVisa] ([StudentUSI] ASC)
GO

ALTER TABLE [edfi].[StudentVisa] WITH CHECK ADD CONSTRAINT [FK_StudentVisa_VisaType] FOREIGN KEY ([VisaTypeId])
REFERENCES [edfi].[VisaType] ([VisaTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_StudentVisa_VisaType]
ON [edfi].[StudentVisa] ([VisaTypeId] ASC)
GO

ALTER TABLE [edfi].[TeachingCredentialDescriptor] WITH CHECK ADD CONSTRAINT [FK_TeachingCredentialDescriptor_Descriptor] FOREIGN KEY ([TeachingCredentialDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_TeachingCredentialDescriptor_Descriptor]
ON [edfi].[TeachingCredentialDescriptor] ([TeachingCredentialDescriptorId] ASC)
GO

ALTER TABLE [edfi].[TeachingCredentialDescriptor] WITH CHECK ADD CONSTRAINT [FK_TeachingCredentialDescriptor_TeachingCredentialType] FOREIGN KEY ([TeachingCredentialTypeId])
REFERENCES [edfi].[TeachingCredentialType] ([TeachingCredentialTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_TeachingCredentialDescriptor_TeachingCredentialType]
ON [edfi].[TeachingCredentialDescriptor] ([TeachingCredentialTypeId] ASC)
GO

ALTER TABLE [edfi].[TermDescriptor] WITH CHECK ADD CONSTRAINT [FK_TermDescriptor_Descriptor] FOREIGN KEY ([TermDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
GO

CREATE NONCLUSTERED INDEX [FK_TermDescriptor_Descriptor]
ON [edfi].[TermDescriptor] ([TermDescriptorId] ASC)
GO

ALTER TABLE [edfi].[TermDescriptor] WITH CHECK ADD CONSTRAINT [FK_TermDescriptor_TermType] FOREIGN KEY ([TermTypeId])
REFERENCES [edfi].[TermType] ([TermTypeId])
ON UPDATE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_TermDescriptor_TermType]
ON [edfi].[TermDescriptor] ([TermTypeId] ASC)
GO

ALTER TABLE [edfi].[WeaponDescriptor] WITH CHECK ADD CONSTRAINT [FK_WeaponDescriptor_Descriptor] FOREIGN KEY ([WeaponDescriptorId])
REFERENCES [edfi].[Descriptor] ([DescriptorId])
ON DELETE CASCADE
GO

CREATE NONCLUSTERED INDEX [FK_WeaponDescriptor_Descriptor]
ON [edfi].[WeaponDescriptor] ([WeaponDescriptorId] ASC)
GO

ALTER TABLE [edfi].[WeaponDescriptor] WITH CHECK ADD CONSTRAINT [FK_WeaponDescriptor_WeaponType] FOREIGN KEY ([WeaponTypeId])
REFERENCES [edfi].[WeaponType] ([WeaponTypeId])
GO

CREATE NONCLUSTERED INDEX [FK_WeaponDescriptor_WeaponType]
ON [edfi].[WeaponDescriptor] ([WeaponTypeId] ASC)
GO

-- Extended Properties [edfi].[AcademicHonorCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A designation of the type of academic distinctions earned by or awarded to the student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicHonorCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AcademicHonorCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicHonorCategoryType', @level2type=N'COLUMN', @level2name=N'AcademicHonorCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicHonorCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AcademicHonorCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicHonorCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AcademicHonorCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicHonorCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AcademicSubjectDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectDescriptor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectTypeId'
GO

-- Extended Properties [edfi].[AcademicSubjectType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AcademicSubject', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectType', @level2type=N'COLUMN', @level2name=N'AcademicSubjectTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AcademicSubject type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AcademicSubject type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicSubjectType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AcademicWeek] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the academic weeks for a school year, optionally captured to support analyses.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicWeek'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school label for the week.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'WeekIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The start date for the academic week.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the academic week.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total instructional days during the academic week.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AcademicWeek', @level2type=N'COLUMN', @level2name=N'TotalInstructionalDays'
GO

-- Extended Properties [edfi].[AccommodationDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines variations used in how an assessment is presented or taken.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationDescriptor', @level2type=N'COLUMN', @level2name=N'AccommodationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationDescriptor', @level2type=N'COLUMN', @level2name=N'AccommodationTypeId'
GO

-- Extended Properties [edfi].[AccommodationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The variations used in how an assessment is presented or taken.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Accommodation', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationType', @level2type=N'COLUMN', @level2name=N'AccommodationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Accommodation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Accommodation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccommodationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Account] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents a funding source combined with its purpose and type of transaction. It provides a formal record of the debits and credits relating to the specific account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Account'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Account', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Account', @level2type=N'COLUMN', @level2name=N'AccountNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Account', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO

-- Extended Properties [edfi].[AccountabilityRating] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An accountability rating for a school or district.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the rating (e.g., School Rating, Safety Score).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the AccountabilityRating is assessed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An accountability rating level, designation, or assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'Rating'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the rating was awarded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization that assessed the rating.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingOrganization'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The program associated with the AccountabilityRating (e.g., NCLB, AEIS).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountabilityRating', @level2type=N'COLUMN', @level2name=N'RatingProgram'
GO

-- Extended Properties [edfi].[AccountCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCode', @level2type=N'COLUMN', @level2name=N'AccountNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCode', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object) that map to the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCode', @level2type=N'COLUMN', @level2name=N'AccountCodeDescriptorId'
GO

-- Extended Properties [edfi].[AccountCodeDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the set of account codes defined for the education accounting system organized by account code type (e.g., fund, function, object).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCodeDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'AccountCodeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the account code (e.g., fund, function, object).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'AccountCodeCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the account code is valid.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the account code is valid.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AccountCodeDescriptor', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[AchievementCategoryDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the category of achievement attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryTypeId'
GO

-- Extended Properties [edfi].[AchievementCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of achievement attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AchievementCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryType', @level2type=N'COLUMN', @level2name=N'AchievementCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AchievementCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AchievementCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AchievementCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Actual] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the sum of the financial transactions to date relating to a specific account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Actual'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'AccountNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported actual element.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'AsOfDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current balance for the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Actual', @level2type=N'COLUMN', @level2name=N'AmountToDate'
GO

-- Extended Properties [edfi].[AdditionalCreditType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of additional credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdditionalCreditType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AdditionalCredit', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdditionalCreditType', @level2type=N'COLUMN', @level2name=N'AdditionalCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdditionalCreditType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AdditionalCredit type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdditionalCreditType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AdditionalCredit type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdditionalCreditType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AddressType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AddressType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Address', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AddressType', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AddressType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Address type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AddressType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Address type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AddressType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AdministrationEnvironmentType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The environment in which the test was administered. For example:
    Electronic
    Classroom
    Testing Center
    ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrationEnvironmentType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AdministrationEnvironment', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrationEnvironmentType', @level2type=N'COLUMN', @level2name=N'AdministrationEnvironmentTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrationEnvironmentType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AdministrationEnvironment type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrationEnvironmentType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AdministrationEnvironment type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrationEnvironmentType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AdministrativeFundingControlDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the type of education institution as classified by its funding source (e.g., public or private).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlDescriptor', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlTypeId'
GO

-- Extended Properties [edfi].[AdministrativeFundingControlType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education institution as classified by its funding source.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AdministrativeFundingControl', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlType', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AdministrativeFundingControl type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AdministrativeFundingControl type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AdministrativeFundingControlType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Assessment] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a tool, instrument, process, or exhibition composed of a systematic sampling of behavior for measuring a student''s competence, knowledge,skills, or behavior. An assessment can be used to measure differences inindividuals or groups and changes in performance from one occasion to the next.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of an assessment based on format and content. For example:
        Achievement test
        Advanced placement test
        Alternate assessment/grade-level standards
        Attitudinal test
        Cognitive and perceptual skills test
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the assessment spans a range of grades, then this attribute holds the lowest grade assessed. If only one grade level is assessed, then this attribute is omitted. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'LowestAssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the form of the assessment, for example a regular versus makeup form, multiple choice versus constructed response, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentForm'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year that the conceptual design for the assessment was most recently revised substantially.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'RevisionDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'MaxRawScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'Nomenclature'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The period or window in which an assessment is supposed to be administered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Assessment', @level2type=N'COLUMN', @level2name=N'Namespace'
GO

-- Extended Properties [edfi].[AssessmentCategoryDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the category of an assessment based on format and content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryTypeId'
GO

-- Extended Properties [edfi].[AssessmentCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of an assessment based on format and content. For example:
        Achievement test
        Advanced placement test
        Alternate assessment/grade-level standards
        Attitudinal test
        Cognitive and perceptual skills test
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AssessmentCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryType', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AssessmentContentStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'AssessmentVersion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandard', @level2type=N'COLUMN', @level2name=N'Version'
GO

-- Extended Properties [edfi].[AssessmentContentStandardAuthor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandardAuthor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'AssessmentVersion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author'
GO

-- Extended Properties [edfi].[AssessmentFamily] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a logical grouping or association of assessments that share a common purpose, heritage or content standard. There may be hierarchiesof assessment families, characteristics (e.g., Academic Subject) specified for assessment families, by convention, are inherited by the Assessments associated with the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of an assessment based on format and content. For example: Achievement test, Advanced placement test, Alternate assessment/grade-level standards, Attitudinal test, Cognitive, and perceptual skills test, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessmentCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment family.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment family is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example: Adult, Prekindergarten, First grade, Second grade, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If the assessment spans a range of grades, then this attribute holds the lowest grade assessed. If only one grade level is assessed, then this attribute is omitted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'LowestAssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year that the conceptual design for the AssessmentFamily was most recently revised substantially.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'RevisionDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for this level of AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'Nomenclature'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'ParentAssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the Assessments in this AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamily', @level2type=N'COLUMN', @level2name=N'Namespace'
GO

-- Extended Properties [edfi].[AssessmentFamilyAssessmentPeriod] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The periods or windows defined in which an assessment is supposed to be administered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyAssessmentPeriod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyAssessmentPeriod', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The periods or windows defined in which an assessment is supposed to be administered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyAssessmentPeriod', @level2type=N'COLUMN', @level2name=N'AssessmentPeriodDescriptorId'
GO

-- Extended Properties [edfi].[AssessmentFamilyContentStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication as to whether an assessment conforms to a standard (e.g., local standard, statewide standard, regional standard, association standard).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[AssessmentFamilyContentStandardAuthor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandardAuthor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author'
GO

-- Extended Properties [edfi].[AssessmentFamilyIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment family by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the assessment identification code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode'
GO

-- Extended Properties [edfi].[AssessmentFamilyLanguage] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the AssessmentFamily is designed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyLanguage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the AssessmentFamily.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyLanguage', @level2type=N'COLUMN', @level2name=N'AssessmentFamilyTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the AssessmentFamily is designed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentFamilyLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO

-- Extended Properties [edfi].[AssessmentIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an assessment by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the assessment identification code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode'
GO

-- Extended Properties [edfi].[AssessmentIdentificationSystemDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds a coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemTypeId'
GO

-- Extended Properties [edfi].[AssessmentIdentificationSystemType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AssessmentIdentificationSystem', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'AssessmentIdentificationSystemTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AssessmentItem] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents one of many single measures that make up an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Category or type of the AssessmentItem. For example:
        Multiple choice
        Analytic
        Prose
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentItemCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'MaxRawScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The correct response for the AssessmentItem.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'CorrectResponse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The duration of time allotted for the AssessmentItem.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'ExpectedTimeAssessed'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for AssessmentItem.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItem', @level2type=N'COLUMN', @level2name=N'Nomenclature'
GO

-- Extended Properties [edfi].[AssessmentItemCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Category or type of the assessment item (e.g., Multiple Choice, Analytic, Prose).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AssessmentItemCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemCategoryType', @level2type=N'COLUMN', @level2name=N'AssessmentItemCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentItemCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentItemCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AssessmentItemLearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard tested by this item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO

-- Extended Properties [edfi].[AssessmentItemResultType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The analyzed result of a student''s response to an assessment item.. For example:
    Correct
    Incorrect
    Met standard
    ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemResultType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AssessmentItemResult', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemResultType', @level2type=N'COLUMN', @level2name=N'AssessmentItemResultTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemResultType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentItemResult type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemResultType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentItemResult type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentItemResultType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AssessmentLanguage] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the assessment is designed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentLanguage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentLanguage', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentLanguage', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentLanguage', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentLanguage', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the assessment is designed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO

-- Extended Properties [edfi].[AssessmentPerformanceLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Definition of the performance levels and the associated cut scores. Three styles are supported:
        1. Specification of performance level by minimum and maximum score
        2. Specification of performance level by cut score, using only minimum score
        3. Specification of performance level without any mapping to scores.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The performance level(s) defined for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score required to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MinimumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MaximumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[AssessmentPeriodDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the period of time window in which an assessment is supposed to be administered (e.g., Beginning of Year, Middle of Year, End of Year).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPeriodDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'AssessmentPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the assessment is to be administered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the assessment is to be administered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[AssessmentProgram] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The programs associated with the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentProgram', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO

-- Extended Properties [edfi].[AssessmentReportingMethodType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or a numerical grade. In some cases, more than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentReportingMethodType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AssessmentReportingMethod', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentReportingMethodType', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentReportingMethodType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AssessmentReportingMethod type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentReportingMethodType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AssessmentReportingMethod type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentReportingMethodType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[AssessmentScore] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Definition of the scores to be expected from this assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'MinimumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'MaximumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentScore', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[AssessmentSection] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Section(s) to which the Assessment is associated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AssessmentSection', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO

-- Extended Properties [edfi].[AttendanceEventCategoryDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the category of the attendance event (e.g., tardy). The map to known enumeration values is required.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryDescriptor', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryTypeId'
GO

-- Extended Properties [edfi].[AttendanceEventCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code categorizing the attendance event (e.g., excused absence, unexcused absence).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for AttendanceEventCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryType', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the AttendanceEventCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the AttendanceEventCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'AttendanceEventCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[BehaviorDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the categories of behavior describing a discipline incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorDescriptor', @level2type=N'COLUMN', @level2name=N'BehaviorDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorDescriptor', @level2type=N'COLUMN', @level2name=N'BehaviorTypeId'
GO

-- Extended Properties [edfi].[BehaviorType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumeration items defining the categories of behavior coded for use in describing an incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Behavior', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorType', @level2type=N'COLUMN', @level2name=N'BehaviorTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Behavior type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Behavior type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BehaviorType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[BellSchedule] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the schedule of class period meeting times.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellSchedule'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name or title of the BellSchedule.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'BellScheduleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels the particular BellSchedule applies to.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellSchedule', @level2type=N'COLUMN', @level2name=N'Date'
GO

-- Extended Properties [edfi].[BellScheduleMeetingTime] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The times at which this BellSchedule is intended to meet.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels the particular BellSchedule applies to.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'Date'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name or title of the BellSchedule.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'BellScheduleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class begins.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'StartTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An alternate name for the day (e.g., Red, Blue).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'AlternateDayName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class ends.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'EndTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether this meeting time is used for official daily attendance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'BellScheduleMeetingTime', @level2type=N'COLUMN', @level2name=N'OfficialAttendancePeriod'
GO

-- Extended Properties [edfi].[Budget] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the amount of monies allocated to be spent or received by an education organization as related to a specific account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Budget'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'AccountNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported budget element.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'AsOfDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Amount budgeted for the account for this fiscal year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Budget', @level2type=N'COLUMN', @level2name=N'Amount'
GO

-- Extended Properties [edfi].[CalendarDate] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a day in the school calendar.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDate', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDate', @level2type=N'COLUMN', @level2name=N'Date'
GO

-- Extended Properties [edfi].[CalendarDateCalendarEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Additional description of the date such as date classification and duration of the event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDateCalendarEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDateCalendarEvent', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDateCalendarEvent', @level2type=N'COLUMN', @level2name=N'Date'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of scheduled or unscheduled event for the day. For example:
        Instructional day
        Teacher only day
        Holiday
        Make-up day
        Weather day
        Student late arrival/early dismissal.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDateCalendarEvent', @level2type=N'COLUMN', @level2name=N'CalendarEventDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of time for the event as recognized by the school: 1 day = 1, 1/2 day = 0.5, 1/3 day = 0.33.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarDateCalendarEvent', @level2type=N'COLUMN', @level2name=N'EventDuration'
GO

-- Extended Properties [edfi].[CalendarEventDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor holds the types of scheduled or unscheduled event for the day (e.g., Instructional day, Teacher only day, Holiday, Make-up day, Weather day, Student late arrival/early dismissal day).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN', @level2name=N'CalendarEventDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventDescriptor', @level2type=N'COLUMN', @level2name=N'CalendarEventTypeId'
GO

-- Extended Properties [edfi].[CalendarEventType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of scheduled or unscheduled event for the day. For example:
        Instructional day
        Teacher only day
        Holiday
        Make-up day
        Weather day
        Student late arrival/early dismissal
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CalendarEvent', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventType', @level2type=N'COLUMN', @level2name=N'CalendarEventTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CalendarEvent type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CalendarEvent type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CalendarEventType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CareerPathwayType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The career cluster or pathway representing the career path of the Vocational/Career Tech concentrator.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CareerPathwayType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CareerPathway', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CareerPathwayType', @level2type=N'COLUMN', @level2name=N'CareerPathwayTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CareerPathwayType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CareerPathway type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CareerPathwayType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CareerPathway type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CareerPathwayType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CharterApprovalAgencyType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of agency that approved the establishment or continuation of a charter school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterApprovalAgencyType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CharterApprovalAgency', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterApprovalAgencyType', @level2type=N'COLUMN', @level2name=N'CharterApprovalAgencyTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterApprovalAgencyType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CharterApprovalAgency type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterApprovalAgencyType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CharterApprovalAgency type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterApprovalAgencyType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CharterStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of charter school. For example: School Charter, Open Enrollment Charter.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CharterStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterStatusType', @level2type=N'COLUMN', @level2name=N'CharterStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CharterStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CharterStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CharterStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CitizenshipStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether or not the person is a U.S. citizen.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CitizenshipStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CitizenshipStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CitizenshipStatusType', @level2type=N'COLUMN', @level2name=N'CitizenshipStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CitizenshipStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CitizenshipStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CitizenshipStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CitizenshipStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CitizenshipStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ClassPeriod] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the designation of a regularly scheduled series of class meetings at designated times and days of the week.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassPeriod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassPeriod', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassPeriod', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO

-- Extended Properties [edfi].[ClassroomPositionDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of position the staff member holds in a specific class/section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN', @level2name=N'ClassroomPositionDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionDescriptor', @level2type=N'COLUMN', @level2name=N'ClassroomPositionTypeId'
GO

-- Extended Properties [edfi].[ClassroomPositionType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of position the staff member holds in the specific class/section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ClassroomPosition', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionType', @level2type=N'COLUMN', @level2name=N'ClassroomPositionTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ClassroomPosition type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ClassroomPosition type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ClassroomPositionType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Cohort] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents any type of list of designated students for tracking, analysis, or intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Cohort'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the Cohort and its purpose.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of cohort (e.g., academic intervention, classroom breakout).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The scope of cohort (e.g., school, district, classroom).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'CohortScopeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic subject associated with an academic intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Cohort', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO

-- Extended Properties [edfi].[CohortProgram] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The (optional) program associated with this Cohort (e.g., special education).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortProgram'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'CohortIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortProgram', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO

-- Extended Properties [edfi].[CohortScopeType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The scope of cohort (e.g., school, district, classroom).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortScopeType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CohortScope', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortScopeType', @level2type=N'COLUMN', @level2name=N'CohortScopeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortScopeType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CohortScope type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortScopeType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CohortScope type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortScopeType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CohortType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the cohort (e.g., academic intervention, classroom breakout).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Cohort', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortType', @level2type=N'COLUMN', @level2name=N'CohortTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Cohort type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Cohort type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CohortYearType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items for the set of cohort years.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortYearType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CohortYear', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortYearType', @level2type=N'COLUMN', @level2name=N'CohortYearTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortYearType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CohortYear type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortYearType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CohortYear type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CohortYearType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CompetencyLevelDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines various levels for assessed competencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyLevelDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A conversion of the level to a standard set of competency levels.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyLevelDescriptor', @level2type=N'COLUMN', @level2name=N'PerformanceBaseConversionTypeId'
GO

-- Extended Properties [edfi].[CompetencyObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity holds additional competencies for student achievement that are not associated with specific learning objectives (e.g., paying attention in class).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the CompetencyObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Identifier for the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'CompetencyObjectiveId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the student competency objective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One or more statements that describes the criteria used by teachers and students to check for attainment of a competency objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CompetencyObjective', @level2type=N'COLUMN', @level2name=N'SuccessCriteria'
GO

-- Extended Properties [edfi].[ContentClassType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predominate type or kind characterizing the learning resource.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContentClassType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ContentClass', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContentClassType', @level2type=N'COLUMN', @level2name=N'ContentClassTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContentClassType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ContentClass type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContentClassType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ContentClass type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContentClassType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ContinuationOfServicesReasonDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This descriptor holds the reasons prescribed in the statute. The mapping of descriptor values to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN', @level2name=N'ContinuationOfServicesReasonDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonDescriptor', @level2type=N'COLUMN', @level2name=N'ContinuationOfServicesReasonTypeId'
GO

-- Extended Properties [edfi].[ContinuationOfServicesReasonType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'In the Migrant Education program, a provision allows continuation of services after a child is no longer considered migratory for certain reasons. This type holds the reasons prescribed in the statute.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ContinuationOfServicesReason', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonType', @level2type=N'COLUMN', @level2name=N'ContinuationOfServicesReasonTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ContinuationOfServicesReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ContinuationOfServicesReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContinuationOfServicesReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ContractedStaff] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the sum of the financial transactions to date for contracted staff. ContractedStaff includes "contractors" or "consultants" who perform services for an agreed upon fee, or an employee of a management service contracted to work on site.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'AccountNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported contracted staff element.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'AsOfDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current balance (amount paid to contractor) for account for the fiscal year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ContractedStaff', @level2type=N'COLUMN', @level2name=N'AmountToDate'
GO

-- Extended Properties [edfi].[CostRateType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The rate by which a cost applies (e.g. $1 per student).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CostRateType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CostRate', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CostRateType', @level2type=N'COLUMN', @level2name=N'CostRateTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CostRateType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CostRate type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CostRateType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CostRate type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CostRateType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CountryDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the name and code of the country.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CountryDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CountryDescriptor', @level2type=N'COLUMN', @level2name=N'CountryDescriptorId'
GO

-- Extended Properties [edfi].[Course] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, and language arts).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of parts identified for a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'NumberOfParts'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The intended major subject area of the course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the content standards and goals covered in the course. Reference may be made to state or national content standards.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The actual or estimated number of clock minutes required for class completion.  This number is especially important for career and technical education classes and may represent (in minutes) the clock hour requirement of the class.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'TimeRequiredForCompletion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the course was adopted by the education agency.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'DateCourseAdopted'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that this course may satisfy high school graduation requirements in the course''s subject area.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'HighSchoolCourseRequirement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether or not the course being described is included in the computation of the student''s Grade Point Average, and if so, if it is weighted differently from regular courses.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseGPAApplicabilityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies whether the course was defined by the SEA, LEA, School, or national organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CourseDefinedByTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MinimumAvailableCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MinimumAvailableCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MinimumAvailableCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MaximumAvailableCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MaximumAvailableCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'MaximumAvailableCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the career cluster or pathway the course is associated with as part of a CTE curriculum.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Course', @level2type=N'COLUMN', @level2name=N'CareerPathwayTypeId'
GO

-- Extended Properties [edfi].[CourseAttemptResultType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The result from the student''s attempt to take the course, for example:
    Pass
    Fail
    Incomplete
    Withdrawn', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseAttemptResultType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CourseAttemptResult', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseAttemptResultType', @level2type=N'COLUMN', @level2name=N'CourseAttemptResultTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseAttemptResultType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseAttemptResult type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseAttemptResultType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseAttemptResult type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseAttemptResultType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CourseCompetencyLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The competency levels defined to rate the student for the course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseCompetencyLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseCompetencyLevel', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseCompetencyLevel', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The competency levels defined to rate the student for the course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseCompetencyLevel', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorId'
GO

-- Extended Properties [edfi].[CourseDefinedByType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies whether the course was defined by the state education agency, local education agency, school, or national organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseDefinedByType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CourseDefinedBy', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseDefinedByType', @level2type=N'COLUMN', @level2name=N'CourseDefinedByTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseDefinedByType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseDefinedBy type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseDefinedByType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseDefinedBy type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseDefinedByType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CourseGPAApplicabilityType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether or not this course being described is included in the computation of the student''s Grade Point Average, and if so, if it is weighted differently than regular courses.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseGPAApplicabilityType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CourseGPAApplicability', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseGPAApplicabilityType', @level2type=N'COLUMN', @level2name=N'CourseGPAApplicabilityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseGPAApplicabilityType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseGPAApplicability type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseGPAApplicabilityType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseGPAApplicability type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseGPAApplicabilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CourseIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a course by a school, school system, state, or other agency or entity. For multi-part course codes, concatenate the parts separated by a "/". For example, consider the following SCED code-    subject = 20 Math    course = 272 Geometry    level = G General    credits = 1.00   course sequence 1 of 1- would be entered as 20/272/G/1.00/1 of 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the staff Identification Code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode'
GO

-- Extended Properties [edfi].[CourseIdentificationSystemDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines a standard code that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemTypeId'
GO

-- Extended Properties [edfi].[CourseIdentificationSystemType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A system that is used to identify the organization of subject matter and related learning experiences provided for the instruction of students. In addition to identifying courses using the appropriate state codes, cross referencing courses with one of the national course codes is encouraged.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CourseIdentificationSystem', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CourseIdentificationSystemTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CourseLearningObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Learning Objectives to be mastered in the course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[CourseLearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Learning Standard(s) to be taught by the course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningStandard', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningStandard', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO

-- Extended Properties [edfi].[CourseLevelCharacteristic] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristic'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristic', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristic', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of specific program or designation with which the course is associated (e.g., AP, IB, Dual Credit, CTE).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristic', @level2type=N'COLUMN', @level2name=N'CourseLevelCharacteristicTypeId'
GO

-- Extended Properties [edfi].[CourseLevelCharacteristicType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The item for indication of the nature and difficulty of instruction: Remedial, Basic, Honors, Ap, IB, Dual Credit, CTE. etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristicType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CourseLevelCharacteristic', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristicType', @level2type=N'COLUMN', @level2name=N'CourseLevelCharacteristicTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseLevelCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseLevelCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseLevelCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CourseOfferedGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels in which the course is offered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferedGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferedGradeLevel', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferedGradeLevel', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels in which the course is offered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferedGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[CourseOffering] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an entry in the course catalog of available courses offered by the school during a session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'LocalCourseTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The planned total number of clock minutes of instruction for this course offering. Generally, this should be at least as many minutes as is required for completion by the related state- or district-defined course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'InstructionalTimePlanned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOffering', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO

-- Extended Properties [edfi].[CourseOfferingCurriculumUsed] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of curriculum used in an early learning classroom or group.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferingCurriculumUsed'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferingCurriculumUsed', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferingCurriculumUsed', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferingCurriculumUsed', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of curriculum used in an early learning classroom or group.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferingCurriculumUsed', @level2type=N'COLUMN', @level2name=N'CurriculumUsedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseOfferingCurriculumUsed', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO

-- Extended Properties [edfi].[CourseRepeatCodeType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''s academic grade average.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseRepeatCodeType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CourseRepeatCode', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseRepeatCodeType', @level2type=N'COLUMN', @level2name=N'CourseRepeatCodeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseRepeatCodeType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CourseRepeatCode type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseRepeatCodeType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CourseRepeatCode type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseRepeatCodeType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CourseTranscript] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is the final record of a student''s performance in their courses at the end of a semester or school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The result from the student''s attempt to take the course, for example:
        Pass
        Fail
        Incomplete
        Withdrawn.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseAttemptResultTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AttemptedCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'EarnedCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Student''s grade level at time of course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method the credits were earned (e.g., Classroom, Examination, Transfer).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'MethodCreditEarnedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalLetterGradeEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The final indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'FinalNumericGradeEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that an academic course has been repeated by a student and how that repeat is to be computed in the student''s academic grade average.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseRepeatCodeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in a school or other institution or organization. In departmentalized classes at the elementary, secondary, and postsecondary levels (and for staff development activities), this refers to the name by which a course is identified (e.g., American History, English III). For elementary and other non-departmentalized classes, it refers to any portion of the instruction for which a grade or report is assigned (e.g., reading, composition, spelling, language arts).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'CourseTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name given to a course of study offered in the school, if different from the CourseTitle.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the school that identifies the course offering, the code from an external educational organization, or other alternate course code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscript', @level2type=N'COLUMN', @level2name=N'AlternativeCourseCode'
GO

-- Extended Properties [edfi].[CourseTranscriptEarnedAdditionalCredits] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of additional credits a student attempted and could earn for successfully completing a given course (e.g., dual credit, AP, IB).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'AdditionalCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The result from the student''s attempt to take the course, for example:
        Pass
        Fail
        Incomplete
        Withdrawn.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'CourseAttemptResultTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'CourseEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CourseTranscriptEarnedAdditionalCredits', @level2type=N'COLUMN', @level2name=N'Credits'
GO

-- Extended Properties [edfi].[CredentialFieldDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the fields of certification that the state education agency offers to teachers.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialFieldDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A classification of the certification fields to academic subjects.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialFieldDescriptor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO

-- Extended Properties [edfi].[CredentialType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the category of credential an individual holds.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Credential', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialType', @level2type=N'COLUMN', @level2name=N'CredentialTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Credential type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Credential type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CredentialType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CreditType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CreditType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Credit', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CreditType', @level2type=N'COLUMN', @level2name=N'CreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CreditType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Credit type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CreditType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Credit type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CreditType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[CurriculumUsedType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of curriculum used in an early learning classroom or group.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CurriculumUsedType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for CurriculumUsed', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CurriculumUsedType', @level2type=N'COLUMN', @level2name=N'CurriculumUsedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CurriculumUsedType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the CurriculumUsed type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CurriculumUsedType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the CurriculumUsed type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'CurriculumUsedType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DeliveryMethodType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DeliveryMethodType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for DeliveryMethod', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DeliveryMethodType', @level2type=N'COLUMN', @level2name=N'DeliveryMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DeliveryMethodType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DeliveryMethod type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DeliveryMethodType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DeliveryMethod type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DeliveryMethodType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Descriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is the base entity for the descriptor pattern.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'DescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A globally unique namespace that identifies this descriptor set. Author is strongly encouraged to use the Universal Resource Identifier (http, ftp, file, etc.) for the source of the descriptor definition. Best practice is for this source to be the descriptor file itself, so that it can be machine-readable and be fetched in real-time, if necessary.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'Namespace'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code or abbreviation that is used to refer to the descriptor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A shortened description for the descriptor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the descriptor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'PriorDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning date of the period when the descriptor is in effect. If omitted, the default is immediate effectiveness.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'EffectiveBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period when the descriptor is in effect.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Descriptor', @level2type=N'COLUMN', @level2name=N'EffectiveEndDate'
GO

-- Extended Properties [edfi].[DiagnosisDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines diagnoses that interventions are intended to target.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisDescriptor', @level2type=N'COLUMN', @level2name=N'DiagnosisTypeId'
GO

-- Extended Properties [edfi].[DiagnosisType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the intervention (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Diagnosis', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisType', @level2type=N'COLUMN', @level2name=N'DiagnosisTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Diagnosis type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Diagnosis type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiagnosisType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DiplomaLevelType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaLevelType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for DiplomaLevel', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaLevelType', @level2type=N'COLUMN', @level2name=N'DiplomaLevelTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaLevelType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DiplomaLevel type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaLevelType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DiplomaLevel type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaLevelType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DiplomaType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Diploma', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaType', @level2type=N'COLUMN', @level2name=N'DiplomaTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Diploma type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Diploma type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DiplomaType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DisabilityCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of disability designation (e.g., IDEA, Section 504).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for DisabilityCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityCategoryType', @level2type=N'COLUMN', @level2name=N'DisabilityCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DisabilityCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DisabilityCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DisabilityDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines a student''s impairment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDescriptor', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDescriptor', @level2type=N'COLUMN', @level2name=N'DisabilityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Whether the disability code is IDEA, Section 504, or other disability designation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDescriptor', @level2type=N'COLUMN', @level2name=N'DisabilityCategoryTypeId'
GO

-- Extended Properties [edfi].[DisabilityDeterminationSourceType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The source that provided the disability determination.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDeterminationSourceType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for DisabilityDeterminationSource', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDeterminationSourceType', @level2type=N'COLUMN', @level2name=N'DisabilityDeterminationSourceTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDeterminationSourceType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DisabilityDeterminationSource type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDeterminationSourceType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DisabilityDeterminationSource type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityDeterminationSourceType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DisabilityType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A disability condition that describes a child''s impairment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Disability', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityType', @level2type=N'COLUMN', @level2name=N'DisabilityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Disability type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Disability type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisabilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DisciplineAction] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents actions taken by an education organization after a disruptive event that is recorded as a discipline incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned by the education organization to the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineActionIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The length of time in school days for the DisciplineAction (e.g. removal, detention), if applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineActionLength'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the actual length in school days of a student''s disciplinary assignment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'ActualDisciplineActionLength'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the reason for the difference, if any, between the official and actual lengths of a student''s disciplinary assignment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'DisciplineActionLengthDifferenceReasonTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether or not this disciplinary action taken against a student was imposed as a consequence of state or local zero tolerance policies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'RelatedToZeroTolerancePolicy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'ResponsibilitySchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineAction', @level2type=N'COLUMN', @level2name=N'AssignmentSchoolId'
GO

-- Extended Properties [edfi].[DisciplineActionDiscipline] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDiscipline'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDiscipline', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned by the education organization to the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDiscipline', @level2type=N'COLUMN', @level2name=N'DisciplineActionIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDiscipline', @level2type=N'COLUMN', @level2name=N'DisciplineDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of action, such as removal from the classroom, used to discipline the student involved as a perpetrator in a discipline incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDiscipline', @level2type=N'COLUMN', @level2name=N'DisciplineDescriptorId'
GO

-- Extended Properties [edfi].[DisciplineActionDisciplineIncident] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reference to the DisciplineIncident associated with the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDisciplineIncident'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDisciplineIncident', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned by the education organization to the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDisciplineIncident', @level2type=N'COLUMN', @level2name=N'DisciplineActionIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDisciplineIncident', @level2type=N'COLUMN', @level2name=N'DisciplineDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDisciplineIncident', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionDisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier'
GO

-- Extended Properties [edfi].[DisciplineActionLengthDifferenceReasonType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the reason for the difference, if any, between the official and actual lengths of a student''s disciplinary assignment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionLengthDifferenceReasonType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for DisciplineActionLengthDifferenceReason', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionLengthDifferenceReasonType', @level2type=N'COLUMN', @level2name=N'DisciplineActionLengthDifferenceReasonTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionLengthDifferenceReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the DisciplineActionLengthDifferenceReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionLengthDifferenceReasonType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the DisciplineActionLengthDifferenceReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionLengthDifferenceReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[DisciplineActionStaff] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The staff responsible for enforcing the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionStaff'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionStaff', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier assigned by the education organization to the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionStaff', @level2type=N'COLUMN', @level2name=N'DisciplineActionIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the DisciplineAction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionStaff', @level2type=N'COLUMN', @level2name=N'DisciplineDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineActionStaff', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO

-- Extended Properties [edfi].[DisciplineDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of action or removal from the classroom used to discipline the student involved as a perpetrator in a discipline incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineDescriptor', @level2type=N'COLUMN', @level2name=N'DisciplineDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineDescriptor', @level2type=N'COLUMN', @level2name=N'DisciplineTypeId'
GO

-- Extended Properties [edfi].[DisciplineIncident] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents an occurrence of an infraction ranging from a minor heavioral problem that disrupts the orderly functioning of a school or classroom (such as tardiness) to a criminal act that results in the involvement of a law enforcement official (such as robbery). A single event (e.g., a fight) is one incident regardless of how many perpetrators or victims are involved. Discipline incidents are events classified as warranting discipline action.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the DisciplineIncident occurred.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the incident took place.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies where the DisciplineIncident occurred and whether or not it occurred on school, for example:
        On school
        Administrative offices area
        Cafeteria area
        Classroom
        Hallway or stairs
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentLocationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for an incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information on the type of individual who reported the DisciplineIncident. When known and/or if useful, use a more specific option code (e.g., "Counselor" rather than "Professional Staff"); for example:
        Student
        Parent/guardian
        Law enforcement officer
        Nonschool personnel
        Representative of visiting school
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'ReporterDescriptionDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the reporter of the DisciplineIncident by name.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'ReporterName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the incident was reported to law enforcement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'ReportedToLawEnforcement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The case number assigned to the DisciplineIncident by law enforcement or other organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'CaseNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of any quantifiable monetary loss directly resulting from the DisciplineIncident. Examples include the value of repairs necessitated by vandalism of a school facility, or the value of personnel resources used for repairs or consumed by the incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'IncidentCost'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncident', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO

-- Extended Properties [edfi].[DisciplineIncidentBehavior] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes behavior by category and provides a detailed description.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentBehavior'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentBehavior', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentBehavior', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes behavior by category and provides a detailed description.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies a more granular level of detail of a behavior involved in the incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDetailedDescription'
GO

-- Extended Properties [edfi].[DisciplineIncidentWeapon] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentWeapon'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentWeapon', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentWeapon', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the type of weapon used during an incident. The Federal Gun-Free Schools Act requires states to report the number of students expelled for bringing firearms to school by type of firearm.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineIncidentWeapon', @level2type=N'COLUMN', @level2name=N'WeaponDescriptorId'
GO

-- Extended Properties [edfi].[DisciplineType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of discipline action.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Discipline', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineType', @level2type=N'COLUMN', @level2name=N'DisciplineTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Discipline type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Discipline type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'DisciplineType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EducationalEnvironmentType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting in which a child receives education and related services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationalEnvironmentType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for EducationalEnvironment', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationalEnvironmentType', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationalEnvironmentType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationalEnvironment type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationalEnvironmentType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationalEnvironment type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationalEnvironmentType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EducationContent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents materials for students or teachers that can be used for teaching, learning, research, and more. Education content includes full courses, course materials, modules, intervention descriptions, textbooks, streaming videos, tests, software, and any other tools, materials, or techniques used to support access to knowledge.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A short description or name of the entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An extended written representation of the education content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether there are additional un-named authors. In a research report, this is often marked by the abbreviation "et al".', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'AdditionalAuthorsIndicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization credited with publishing the resource.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Publisher'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'TimeRequired'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'InteractivityStyleTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predominate type or kind characterizing the learning resource.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'ContentClassTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URL where the owner specifies permissions for using the resource.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'UseRightsURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'PublicationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'PublicationYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An amount that has to be paid or spent to buy or obtain the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Cost'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The rate by which the cost applies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'CostRateTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContent', @level2type=N'COLUMN', @level2name=N'Namespace'
GO

-- Extended Properties [edfi].[EducationContentAppropriateGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for which this education content is applicable-if omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for which this education content is applicable-if omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[EducationContentAppropriateSex] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for which this education content is applicable. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateSex'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateSex', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for which this education content is applicable. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO

-- Extended Properties [edfi].[EducationContentAuthor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The individual credited with the creation of the resource.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAuthor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAuthor', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The individual credited with the creation of the resource.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentAuthor', @level2type=N'COLUMN', @level2name=N'Author'
GO

-- Extended Properties [edfi].[EducationContentDerivativeSourceEducationContent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceEducationContent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceEducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceEducationContent', @level2type=N'COLUMN', @level2name=N'DerivativeSourceContentIdentifier'
GO

-- Extended Properties [edfi].[EducationContentDerivativeSourceLearningResourceMetadataURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceLearningResourceMetadataURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI'
GO

-- Extended Properties [edfi].[EducationContentDerivativeSourceURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceURI', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentDerivativeSourceURI', @level2type=N'COLUMN', @level2name=N'URI'
GO

-- Extended Properties [edfi].[EducationContentLanguage] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the Education Content is designed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentLanguage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentLanguage', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the languages in which the Education Content is designed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationContentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO

-- Extended Properties [edfi].[EducationOrganization] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents any public or private institution, organization, or agency that provides instructional or support services to students or staff at any level.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education organization by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'StateOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The full, legally accepted name of the institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'NameOfInstitution'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A short name for the institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'ShortNameOfInstitution'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The public web site address (URL) for the EducationOrganization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'WebSite'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The current operational status of the EducationOrganization (e.g., active, inactive).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganization', @level2type=N'COLUMN', @level2name=N'OperationalStatusTypeId'
GO

-- Extended Properties [edfi].[EducationOrganizationAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes the physical location of the education entity, including the street address, city, state, ZIP code, and ZIP code + 4.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'City'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'PostalCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[EducationOrganizationCategory] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategory', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategory', @level2type=N'COLUMN', @level2name=N'EducationOrganizationCategoryTypeId'
GO

-- Extended Properties [edfi].[EducationOrganizationCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The classification of the education agency within the geographic boundaries of a state according to the level of administrative and operational control granted by the state.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for EducationOrganizationCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategoryType', @level2type=N'COLUMN', @level2name=N'EducationOrganizationCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationOrganizationCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationOrganizationCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EducationOrganizationIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school system, state, or agency assigning the identification code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO

-- Extended Properties [edfi].[EducationOrganizationIdentificationSystemDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the originating record system and code that is used for record-keeping purposes by education organizations.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemTypeId'
GO

-- Extended Properties [edfi].[EducationOrganizationIdentificationSystemType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by education organizations, social services or other agencies to refer to an education organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for EducationOrganizationIdentificationSystem', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationOrganizationIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationOrganizationIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EducationOrganizationInstitutionTelephone] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the education entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInstitutionTelephone'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInstitutionTelephone', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInstitutionTelephone', @level2type=N'COLUMN', @level2name=N'InstitutionTelephoneNumberTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInstitutionTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber'
GO

-- Extended Properties [edfi].[EducationOrganizationInternationalAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes the international physical location of the education entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the country.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[EducationOrganizationInterventionPrescriptionAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates interventions made available by an education organization. Often, a district-level education organization purchases a set of intervention prescriptions and makes them available to its schools for use on demand.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInterventionPrescriptionAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The begin date of the period during which the InterventionPrescription is available.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the period during which the InterventionPrescription is available.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationInterventionPrescriptionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[EducationOrganizationNetwork] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is a self-organized membership network of peer-level education organizations intended to provide shared services or collective procurement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetwork'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a network of education organizations.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetwork', @level2type=N'COLUMN', @level2name=N'EducationOrganizationNetworkId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The purpose(s) of the network (e.g., shared services, collective procurement).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetwork', @level2type=N'COLUMN', @level2name=N'NetworkPurposeTypeId'
GO

-- Extended Properties [edfi].[EducationOrganizationNetworkAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Properties of the association between the EducationOrganization and its network(s).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetworkAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'MemberEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a network of education organizations.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationNetworkId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which the EducationOrganization joined this network.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which the EducationOrganization left this network.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationNetworkAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[EducationOrganizationPeerAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The association from an education organization to its peers.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationPeerAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationPeerAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationOrganizationPeerAssociation', @level2type=N'COLUMN', @level2name=N'PeerEducationOrganizationId'
GO

-- Extended Properties [edfi].[EducationPlanType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education plan(s) the student is following, if appropriate. For example:
    Special education
    Vocational.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationPlanType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for EducationPlan', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationPlanType', @level2type=N'COLUMN', @level2name=N'EducationPlanTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationPlanType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EducationPlan type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationPlanType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EducationPlan type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationPlanType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EducationServiceCenter] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a regional, multi-services public agency authorized by state law to develop, manage and provide services, programs, or other support options (e.g., construction, food services, and technology services) to LEAs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationServiceCenter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education service center by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationServiceCenter', @level2type=N'COLUMN', @level2name=N'EducationServiceCenterId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EducationServiceCenter', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId'
GO

-- Extended Properties [edfi].[ElectronicMailType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of email listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ElectronicMailType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ElectronicMail', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ElectronicMailType', @level2type=N'COLUMN', @level2name=N'ElectronicMailTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ElectronicMailType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ElectronicMail type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ElectronicMailType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ElectronicMail type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ElectronicMailType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EmploymentStatusDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of employment or contract.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusDescriptor', @level2type=N'COLUMN', @level2name=N'EmploymentStatusTypeId'
GO

-- Extended Properties [edfi].[EmploymentStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the type of employment or contract.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for EmploymentStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusType', @level2type=N'COLUMN', @level2name=N'EmploymentStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EmploymentStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EmploymentStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EmploymentStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EntryGradeLevelReasonType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryGradeLevelReasonType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for EntryGradeLevelReason', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryGradeLevelReasonType', @level2type=N'COLUMN', @level2name=N'EntryGradeLevelReasonTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryGradeLevelReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EntryGradeLevelReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryGradeLevelReasonType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EntryGradeLevelReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryGradeLevelReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EntryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The process by which a student enters a school during a given academic session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Entry', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryType', @level2type=N'COLUMN', @level2name=N'EntryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Entry type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Entry type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[EntryTypeDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the process by which a student enters a school during a given academic session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryTypeDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'EntryTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EntryTypeDescriptor', @level2type=N'COLUMN', @level2name=N'EntryTypeId'
GO

-- Extended Properties [edfi].[EventCircumstanceType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EventCircumstanceType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for EventCircumstance', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EventCircumstanceType', @level2type=N'COLUMN', @level2name=N'EventCircumstanceTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EventCircumstanceType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the EventCircumstance type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EventCircumstanceType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the EventCircumstance type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'EventCircumstanceType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ExitWithdrawType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The circumstances under which the student exited from membership in an educational institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ExitWithdraw', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawType', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ExitWithdraw type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ExitWithdraw type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ExitWithdrawTypeDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the circumstances under which the student exited from membership in an educational institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawTypeDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ExitWithdrawTypeDescriptor', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeId'
GO

-- Extended Properties [edfi].[FeederSchoolAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The association from feeder school to the receiving school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'FeederSchoolAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'FeederSchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the first day of the feeder school association.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the last day of the feeder school association.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes the relationship from the feeder school to the receiving school, for example by program emphasis, such as special education, language immersion, science, or performing art.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'FeederSchoolAssociation', @level2type=N'COLUMN', @level2name=N'FeederRelationshipDescription'
GO

-- Extended Properties [edfi].[Grade] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents an overall score or assessment tied to a course over a period of time (i.e., the grading period). Student grades are usually a compilation of marks and other scores.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of grade reported (e.g., Exam, Final, Grading Period).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'GradeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'LetterGradeEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'NumericGradeEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A conversion of the level to a standard set of performance levels.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Grade', @level2type=N'COLUMN', @level2name=N'PerformanceBaseConversionTypeId'
GO

-- Extended Properties [edfi].[GradebookEntry] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an assignment, homework, or classroom assessment to be recorded in a gradebook.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or title of the activity to be recorded in the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'GradebookEntryTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the assignment, homework, or assessment was assigned or executed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'DateAssigned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the GradebookEntry; for example, homework, assignment, quiz, unit test, oral presentation, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'GradebookEntryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the assignment, homework, or classroom assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntry', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO

-- Extended Properties [edfi].[GradebookEntryLearningObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningObjectives associated with the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or title of the activity to be recorded in the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'GradebookEntryTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the assignment, homework, or assessment was assigned or executed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'DateAssigned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningObjective', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO

-- Extended Properties [edfi].[GradebookEntryLearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard(s) associated with the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or title of the activity to be recorded in the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'GradebookEntryTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the assignment, homework, or assessment was assigned or executed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'DateAssigned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryLearningStandard', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO

-- Extended Properties [edfi].[GradebookEntryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the gradebook entry; for example, homework, assignment, quiz, unit test, oral presentation, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for GradebookEntry', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryType', @level2type=N'COLUMN', @level2name=N'GradebookEntryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GradebookEntry type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GradebookEntry type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradebookEntryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[GradeLevelDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the set of grade levels. The map to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelDescriptor', @level2type=N'COLUMN', @level2name=N'GradeLevelTypeId'
GO

-- Extended Properties [edfi].[GradeLevelType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items for the set of grade levels.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for GradeLevel', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelType', @level2type=N'COLUMN', @level2name=N'GradeLevelTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GradeLevel type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GradeLevel type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeLevelType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[GradeType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of grade in a report card or transcript (e.g., Final, Exam, Grading Period).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Grade', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeType', @level2type=N'COLUMN', @level2name=N'GradeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Grade type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Grade type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradeType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[GradingPeriod] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the time span for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the last day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Total days available for educational instruction during the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'TotalInstructionalDays'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The sequential order of this period relative to other periods.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriod', @level2type=N'COLUMN', @level2name=N'PeriodSequence'
GO

-- Extended Properties [edfi].[GradingPeriodDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the name of the period for which grades are reported. The mapping of descriptor values to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodDescriptor', @level2type=N'COLUMN', @level2name=N'GradingPeriodTypeId'
GO

-- Extended Properties [edfi].[GradingPeriodType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for GradingPeriod', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'GradingPeriodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GradingPeriod type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GradingPeriod type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GradingPeriodType', @level2type=N'COLUMN', @level2name=N'PeriodSequence'
GO

-- Extended Properties [edfi].[GraduationPlan] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is a plan outlining the required credits, credits by subject,credits by course, and other criteria required for graduation. A graduation plan may be one or more standard plans defined by an education organization and/or individual plans for some or all students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether the GraduationPlan is tailored for an individual.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'IndividualPlan'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'TotalRequiredCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'TotalRequiredCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlan', @level2type=N'COLUMN', @level2name=N'TotalRequiredCreditConversion'
GO

-- Extended Properties [edfi].[GraduationPlanCreditsByCourse] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total credits required for graduation by taking a specific course, or by taking one or more from a set of courses.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifying name given to a collection of courses.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'CourseSetName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'Credits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'CreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'CreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level when the student is planned to take the course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourse', @level2type=N'COLUMN', @level2name=N'WhenTakenGradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[GraduationPlanCreditsByCourseCourse] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The course reference that identifies the organization of subject matter and related learning experiences provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifying name given to a collection of courses.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'CourseSetName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'CourseEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsByCourseCourse', @level2type=N'COLUMN', @level2name=N'CourseCode'
GO

-- Extended Properties [edfi].[GraduationPlanCreditsBySubject] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total credits required in subject to graduate. Only those courses identified as a high school course requirement are eligible to meet subject credit requirements.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The intended major subject area of the graduation requirement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'Credits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'CreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanCreditsBySubject', @level2type=N'COLUMN', @level2name=N'CreditConversion'
GO

-- Extended Properties [edfi].[GraduationPlanRequiredAssessment] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The assessments and associated required score and performance level needed to satisfy graduation requirements.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessment', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO

-- Extended Properties [edfi].[GraduationPlanRequiredAssessmentAssessmentPerformanceLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Performance level required to be met or exceeded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The performance level(s) defined for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score required to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MinimumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MaximumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[GraduationPlanRequiredAssessmentScore] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Score required to be met or exceeded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'MinimumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'MaximumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanRequiredAssessmentScore', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[GraduationPlanType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for GraduationPlan', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanType', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GraduationPlan type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GraduationPlan type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[GraduationPlanTypeDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the set of graduation plan types.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanTypeDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GraduationPlanTypeDescriptor', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeId'
GO

-- Extended Properties [edfi].[GunFreeSchoolsActReportingStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether the school or local education agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GunFreeSchoolsActReportingStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for GunFreeSchoolsActReportingStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GunFreeSchoolsActReportingStatusType', @level2type=N'COLUMN', @level2name=N'GunFreeSchoolsActReportingStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GunFreeSchoolsActReportingStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the GunFreeSchoolsActReportingStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GunFreeSchoolsActReportingStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the GunFreeSchoolsActReportingStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'GunFreeSchoolsActReportingStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[IdentificationDocumentUseType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies the type of use given to an identification document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IdentificationDocumentUseType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for IdentificationDocumentUse', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IdentificationDocumentUseType', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IdentificationDocumentUseType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the IdentificationDocumentUse type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IdentificationDocumentUseType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the IdentificationDocumentUse type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IdentificationDocumentUseType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[IncidentLocationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifies where the incident occurred and whether or not it occurred on school property.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IncidentLocationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for IncidentLocation', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IncidentLocationType', @level2type=N'COLUMN', @level2name=N'IncidentLocationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IncidentLocationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the IncidentLocation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IncidentLocationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the IncidentLocation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IncidentLocationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[InstitutionTelephoneNumberType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InstitutionTelephoneNumberType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for InstitutionTelephoneNumber', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InstitutionTelephoneNumberType', @level2type=N'COLUMN', @level2name=N'InstitutionTelephoneNumberTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InstitutionTelephoneNumberType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InstitutionTelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InstitutionTelephoneNumberType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InstitutionTelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InstitutionTelephoneNumberType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[IntegratedTechnologyStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the extent to which the district has effectively and fully integrated technology, as defined by the state.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IntegratedTechnologyStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for IntegratedTechnologyStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IntegratedTechnologyStatusType', @level2type=N'COLUMN', @level2name=N'IntegratedTechnologyStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IntegratedTechnologyStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the IntegratedTechnologyStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IntegratedTechnologyStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the IntegratedTechnologyStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'IntegratedTechnologyStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[InteractivityStyleType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The predominate mode of learning supported by the learning resource. Acceptable values are active, expositive, or mixed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InteractivityStyleType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for InteractivityStyle', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InteractivityStyleType', @level2type=N'COLUMN', @level2name=N'InteractivityStyleTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InteractivityStyleType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InteractivityStyle type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InteractivityStyleType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InteractivityStyle type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InteractivityStyleType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[InternetAccessType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of Internet access available.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InternetAccessType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for InternetAccess', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InternetAccessType', @level2type=N'COLUMN', @level2name=N'InternetAccessTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InternetAccessType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InternetAccess type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InternetAccessType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InternetAccess type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InternetAccessType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Intervention] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An implementation of an instructional approach focusing on the specific techniques and materials used to teach a given subject.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Intervention'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'InterventionClassTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'DeliveryMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The start date for the intervention implementation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date for the intervention implementation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Intervention', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[InterventionAppropriateGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for the Intervention-if omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for the Intervention-if omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[InterventionAppropriateSex] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for the Intervention. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateSex'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateSex', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateSex', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for the Intervention. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO

-- Extended Properties [edfi].[InterventionClassType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionClassType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for InterventionClass', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionClassType', @level2type=N'COLUMN', @level2name=N'InterventionClassTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionClassType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InterventionClass type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionClassType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InterventionClass type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionClassType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[InterventionDiagnosis] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionDiagnosis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionDiagnosis', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionDiagnosis', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the Intervention (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionDiagnosis', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorId'
GO

-- Extended Properties [edfi].[InterventionEducationContent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEducationContent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEducationContent', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEducationContent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO

-- Extended Properties [edfi].[InterventionEffectivenessRatingType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Rating Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEffectivenessRatingType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for InterventionEffectivenessRating', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEffectivenessRatingType', @level2type=N'COLUMN', @level2name=N'InterventionEffectivenessRatingTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEffectivenessRatingType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the InterventionEffectivenessRating type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEffectivenessRatingType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the InterventionEffectivenessRating type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionEffectivenessRatingType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[InterventionInterventionPrescription] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reference to the intervention prescription being followed in this intervention implementation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionInterventionPrescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionInterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionInterventionPrescription', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionInterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionInterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionEducationOrganizationId'
GO

-- Extended Properties [edfi].[InterventionLearningResourceMetadataURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionLearningResourceMetadataURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI'
GO

-- Extended Properties [edfi].[InterventionMeetingTime] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The times at which this intervention is scheduled to meet.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An alternate name for the day (e.g., Red, Blue).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'AlternateDayName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class begins.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'StartTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the time of day the class ends.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'EndTime'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether this meeting time is used for official daily attendance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionMeetingTime', @level2type=N'COLUMN', @level2name=N'OfficialAttendancePeriod'
GO

-- Extended Properties [edfi].[InterventionPopulationServed] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the Intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPopulationServed'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPopulationServed', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPopulationServed', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the Intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPopulationServed', @level2type=N'COLUMN', @level2name=N'PopulationServedTypeId'
GO

-- Extended Properties [edfi].[InterventionPrescription] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a formal prescription of an instructional approach focusing on the specific techniques and materials used to teach a given subject. This can be prescribed by academic research, an interventions vendor, or another entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'InterventionClassTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescription', @level2type=N'COLUMN', @level2name=N'DeliveryMethodTypeId'
GO

-- Extended Properties [edfi].[InterventionPrescriptionAppropriateGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for the prescribed intervention. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels for the prescribed intervention. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[InterventionPrescriptionAppropriateSex] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for the InterventionPrescription. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateSex'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateSex', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateSex', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes for the InterventionPrescription. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO

-- Extended Properties [edfi].[InterventionPrescriptionDiagnosis] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionDiagnosis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionDiagnosis', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionDiagnosis', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the InterventionPrescription (e.g., attendance issue, dropout risk).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionDiagnosis', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorId'
GO

-- Extended Properties [edfi].[InterventionPrescriptionEducationContent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionEducationContent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionEducationContent', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionEducationContent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionEducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO

-- Extended Properties [edfi].[InterventionPrescriptionLearningResourceMetadataURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionLearningResourceMetadataURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI'
GO

-- Extended Properties [edfi].[InterventionPrescriptionPopulationServed] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the InterventionPrescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionPopulationServed'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionPopulationServed', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionPopulationServed', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the InterventionPrescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionPopulationServed', @level2type=N'COLUMN', @level2name=N'PopulationServedTypeId'
GO

-- Extended Properties [edfi].[InterventionPrescriptionURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionURI', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionURI', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionPrescriptionURI', @level2type=N'COLUMN', @level2name=N'URI'
GO

-- Extended Properties [edfi].[InterventionStaff] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the staff member associated with the Intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStaff'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStaff', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStaff', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStaff', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO

-- Extended Properties [edfi].[InterventionStudy] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An experimental or quasi-experimental study of an intervention technique.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention prescription.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionPrescriptionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of participants observed in the study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'Participants'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention was implemented: individual, small group, whole class, or whole school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'DeliveryMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The way in which an intervention is used: curriculum, supplement, or practice.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudy', @level2type=N'COLUMN', @level2name=N'InterventionClassTypeId'
GO

-- Extended Properties [edfi].[InterventionStudyAppropriateGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels participating in this study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade levels participating in this study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[InterventionStudyAppropriateSex] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes participating in this study. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateSex'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateSex', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateSex', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Sexes participating in this study. If omitted, considered generally applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyAppropriateSex', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO

-- Extended Properties [edfi].[InterventionStudyEducationContent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Relates the education content source to the education content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyEducationContent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyEducationContent', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyEducationContent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the EducationContent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyEducationContent', @level2type=N'COLUMN', @level2name=N'ContentIdentifier'
GO

-- Extended Properties [edfi].[InterventionStudyInterventionEffectiveness] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Measurement of the effectiveness of the InterventionStudy per diagnosis.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Population for which effectiveness is measured.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'PopulationServedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade level for which effectiveness is measured.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Along a percentile distribution of students, the improvement index represents the change in an average student''s percentile rank that is considered to be due to the intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'ImprovementIndex'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'InterventionEffectivenessRatingTypeId'
GO

-- Extended Properties [edfi].[InterventionStudyLearningResourceMetadataURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyLearningResourceMetadataURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to the metadata entry in a LRMI metadata repository, which describes this content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyLearningResourceMetadataURI', @level2type=N'COLUMN', @level2name=N'LearningResourceMetadataURI'
GO

-- Extended Properties [edfi].[InterventionStudyPopulationServed] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the InterventionStudy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyPopulationServed'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyPopulationServed', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyPopulationServed', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A subset of students that are the focus of the InterventionStudy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyPopulationServed', @level2type=N'COLUMN', @level2name=N'PopulationServedTypeId'
GO

-- Extended Properties [edfi].[InterventionStudyStateAbbreviation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyStateAbbreviation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyStateAbbreviation', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyStateAbbreviation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area, the school system of which the participants of the study are considered to be a part.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyStateAbbreviation', @level2type=N'COLUMN', @level2name=N'StateAbbreviationTypeId'
GO

-- Extended Properties [edfi].[InterventionStudyURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention study.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyURI', @level2type=N'COLUMN', @level2name=N'InterventionStudyIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyURI', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionStudyURI', @level2type=N'COLUMN', @level2name=N'URI'
GO

-- Extended Properties [edfi].[InterventionURI] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionURI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionURI', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionURI', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The URI (typical a URL) pointing to an education content item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'InterventionURI', @level2type=N'COLUMN', @level2name=N'URI'
GO

-- Extended Properties [edfi].[LanguageDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the language(s) that are spoken or written.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageDescriptor', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageDescriptor', @level2type=N'COLUMN', @level2name=N'LanguageTypeId'
GO

-- Extended Properties [edfi].[LanguageType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category denoting language(s) spoken or written.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Language', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageType', @level2type=N'COLUMN', @level2name=N'LanguageTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Language type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Language type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[LanguageUseType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category denoting how a language is used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageUseType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for LanguageUse', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageUseType', @level2type=N'COLUMN', @level2name=N'LanguageUseTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageUseType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LanguageUse type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageUseType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LanguageUse type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LanguageUseType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[LearningObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents identified learning objectives for courses in specific grades.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning objective in the context of a standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'LearningObjectiveId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Nomenclature'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One or more statements that describes the criteria used by teachers and students to check for attainment of a learning objective. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'SuccessCriteria'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentAcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'ParentObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjective', @level2type=N'COLUMN', @level2name=N'Namespace'
GO

-- Extended Properties [edfi].[LearningObjectiveContentStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A reference to the type of content standard (e.g., state, national)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[LearningObjectiveContentStandardAuthor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandardAuthor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author'
GO

-- Extended Properties [edfi].[LearningObjectiveLearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard(s) included in this objective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveLearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveLearningStandard', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveLearningStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveLearningStandard', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningObjectiveLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO

-- Extended Properties [edfi].[LearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity is a sub-element of a learning objective consisting of a precise statement of the expectation of a student''s proficiency.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The text of the statement. The textual content that either describes a specific competency such as "Apply the Pythagorean Theorem to determine unknown side lengths in right triangles in real-world and mathematical problems in two and three dimensions." or describes a less granular group of competencies within the taxonomy of the standards document, e.g. "Understand and apply the Pythagorean Theorem," or "Geometry".', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code designated by the promulgating body to identify the statement, e.g. 1.N.3 (usually not globally unique).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardItemCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the statement using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Subject area for the LearningStandard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The official Course Title with which this learning standard is associated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'CourseTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'One or more statements that describes the criteria used by teachers and students to check for attainment of a learning standard. This criteria gives clear indications as to the degree to which learning is moving through the Zone or Proximal Development toward independent achievement of the LearningStandard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'SuccessCriteria'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'ParentLearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Namespace for the LearningStandard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandard', @level2type=N'COLUMN', @level2name=N'Namespace'
GO

-- Extended Properties [edfi].[LearningStandardContentStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The content standard from which the LearningStandard was derived.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'Title'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the content.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unambiguous reference to the standards using a network-resolvable URI.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'URI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date on which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The year at which this content was first published.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'PublicationStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'MandatingEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The beginning of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end of the period during which this learning standard document is intended for use.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandard', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[LearningStandardContentStandardAuthor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandardAuthor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person or organization chiefly responsible for the intellectual content of the standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardContentStandardAuthor', @level2type=N'COLUMN', @level2name=N'Author'
GO

-- Extended Properties [edfi].[LearningStandardGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels for the specific learning standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardGradeLevel', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels for the specific learning standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[LearningStandardIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a learning standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardIdentificationCode', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a Learning Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the content standard, for example Common Core.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardIdentificationCode', @level2type=N'COLUMN', @level2name=N'ContentStandardName'
GO

-- Extended Properties [edfi].[LearningStandardPrerequisiteLearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier of a prerequisite learning standard item, a competency needed prior to learning this one. (Some items may have no prerequisites others may have one or more prerequisites. This should only be used to represent the immediate predecessors in a competency-based pathway, i.e. not prerequisites of prerequisites).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardPrerequisiteLearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardPrerequisiteLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LearningStandardPrerequisiteLearningStandard', @level2type=N'COLUMN', @level2name=N'PrerequisiteLearningStandardId'
GO

-- Extended Properties [edfi].[LeaveEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of the dates of staff leave (e.g., sick leave, personal time, vacation).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this leave event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code describing the type of leave taken, for example:
        Sick
        Personal
        Vacation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'LeaveEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Expanded reason for the staff leave.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'LeaveEventReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The hours the staff was absent, if not the entire working day.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'HoursOnLeave'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether a substitute was assigned during the period of staff leave.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEvent', @level2type=N'COLUMN', @level2name=N'SubstituteAssigned'
GO

-- Extended Properties [edfi].[LeaveEventCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the type of the leave event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEventCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for LeaveEventCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEventCategoryType', @level2type=N'COLUMN', @level2name=N'LeaveEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEventCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LeaveEventCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEventCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LeaveEventCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LeaveEventCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[LevelDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the grade level(s) certified for teaching.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelDescriptor', @level2type=N'COLUMN', @level2name=N'LevelDescriptorId'
GO

-- Extended Properties [edfi].[LevelDescriptorGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The mapping to known grade levels for which certification exists.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelDescriptorGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelDescriptorGradeLevel', @level2type=N'COLUMN', @level2name=N'LevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The mapping to known grade levels for which certification exists.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelDescriptorGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[LevelOfEducationDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the different levels of education achievable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN', @level2name=N'LevelOfEducationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationDescriptor', @level2type=N'COLUMN', @level2name=N'LevelOfEducationTypeId'
GO

-- Extended Properties [edfi].[LevelOfEducationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration of the different levels of education achievable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for LevelOfEducation', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationType', @level2type=N'COLUMN', @level2name=N'LevelOfEducationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LevelOfEducation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LevelOfEducation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LevelOfEducationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[LimitedEnglishProficiencyDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the indications that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient. The mapping of descriptor values to known Ed-Fi enumeration values is required.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyDescriptor', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyTypeId'
GO

-- Extended Properties [edfi].[LimitedEnglishProficiencyType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the student has been identified as Limited English Proficient or English Proficient by the Language Proficiency Assessment Committee (LPAC).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for LimitedEnglishProficiency', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyType', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LimitedEnglishProficiency type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LimitedEnglishProficiency type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LimitedEnglishProficiencyType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[LocalEducationAgency] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an administrative unit at the local level which exists primarily to operate schools or to contract for educational services. It includes school districts, charter schools, charter management organizations, or other local administrative organizations.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of local education agency/district. For example: Independent or Charter.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'CharterStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'ParentLocalEducationAgencyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education service center by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'EducationServiceCenterId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgency', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId'
GO

-- Extended Properties [edfi].[LocalEducationAgencyAccountability] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity maintains information about federal reporting and accountability for local education agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyAccountability'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the accountability is reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether the school or Local Education Agency (LEA) submitted a Gun-Free Schools Act (GFSA) of 1994 report to the state, as defined by Title 18, Section 921.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'GunFreeSchoolsActReportingStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA as amended.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'SchoolChoiceImplementStatusTypeId'
GO

-- Extended Properties [edfi].[LocalEducationAgencyCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of local education agency/district. For example: Independent or Charter.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for LocalEducationAgencyCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyCategoryType', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the LocalEducationAgencyCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the LocalEducationAgencyCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[LocalEducationAgencyFederalFunds] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contains the information about the reception and use of federal funds for reporting purposes.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the accountability is reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total Title V, Part A funds expended by LEAs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'InnovativeDollarsSpent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total amount of Title V, Part A funds expended by LEAs for the four strategic priorities.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'InnovativeDollarsSpentOnStrategicPriorities'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total Title V, Part A funds received by LEAs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'InnovativeProgramsFundsReceived'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of Section 1003(a) and 1003(g) allocations to LEAs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SchoolImprovementAllocation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the percentage of the Title I, Part A allocation that the SEA reserved in accordance with Section 1003(a) of ESEA and §200.100(a) of ED''s regulations governing the reservation of funds for school improvement under Section 1003(a) of ESEA.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SchoolImprovementReservedFundsPercentage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The dollar amount spent on supplemental educational services during the school year under Title I, Part A, Section 1116 of ESEA as amended.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SupplementalEducationalServicesFundsSpent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum dollar amount that may be spent per child for expenditures related to supplemental educational services under Title I of the ESEA.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'SupplementalEducationalServicesPerPupilExpenditure'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of funds used to administer assessments required by Section 1111(b) or to carry out other activities described in Section 6111 and other activities related to ensuring that the state''s schools and LEAs are held accountable for results.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'LocalEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'StateAssessmentAdministrationFunding'
GO

-- Extended Properties [edfi].[Location] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the physical space where students gather for a particular class/section. The Location may be an indoor or outdoor area designated for the purpose of meeting the educational needs of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Location'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Location', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Location', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The most number of seats the class can maintain.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Location', @level2type=N'COLUMN', @level2name=N'MaximumNumberOfSeats'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of seats that is most favorable to the class.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Location', @level2type=N'COLUMN', @level2name=N'OptimalNumberOfSeats'
GO

-- Extended Properties [edfi].[MagnetSpecialProgramEmphasisSchoolType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A school that has been designed to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing or eliminating racial isolation; and/or to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MagnetSpecialProgramEmphasisSchoolType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for MagnetSpecialProgramEmphasisSchool', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MagnetSpecialProgramEmphasisSchoolType', @level2type=N'COLUMN', @level2name=N'MagnetSpecialProgramEmphasisSchoolTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MagnetSpecialProgramEmphasisSchoolType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MagnetSpecialProgramEmphasisSchool type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MagnetSpecialProgramEmphasisSchoolType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MagnetSpecialProgramEmphasisSchool type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MagnetSpecialProgramEmphasisSchoolType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[MediumOfInstructionType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The media through which teachers provide instruction to students and students and teachers communicate about instructional matters.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MediumOfInstructionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for MediumOfInstruction', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MediumOfInstructionType', @level2type=N'COLUMN', @level2name=N'MediumOfInstructionTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MediumOfInstructionType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MediumOfInstruction type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MediumOfInstructionType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MediumOfInstruction type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MediumOfInstructionType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[MeetingDayType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items for the day(s) of the week (e.g., Monday, Wednesday) that the class meets or an indication that a class meets "out-of-school" or "self-paced".', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MeetingDayType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for MeetingDay', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MeetingDayType', @level2type=N'COLUMN', @level2name=N'MeetingDayTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MeetingDayType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MeetingDay type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MeetingDayType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MeetingDay type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MeetingDayType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[MethodCreditEarnedType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method the credits were earned, for example:  Classroom, Examination, Transfer.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MethodCreditEarnedType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for MethodCreditEarned', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MethodCreditEarnedType', @level2type=N'COLUMN', @level2name=N'MethodCreditEarnedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MethodCreditEarnedType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the MethodCreditEarned type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MethodCreditEarnedType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the MethodCreditEarned type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'MethodCreditEarnedType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[NetworkPurposeType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The purpose(s) of the network, e.g. shared services, collective procurement, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'NetworkPurposeType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for NetworkPurpose', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'NetworkPurposeType', @level2type=N'COLUMN', @level2name=N'NetworkPurposeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'NetworkPurposeType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the NetworkPurpose type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'NetworkPurposeType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the NetworkPurpose type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'NetworkPurposeType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ObjectiveAssessment] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents subtests that assess specific learning objectives.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum raw score achievable across all assessment items that are correct and scored at the maximum.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'MaxRawScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The percentage of the Assessment that tests this objective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'PercentOfAssessment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the specific nomenclature used for this level of ObjectiveAssessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'Nomenclature'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the ObjectiveAssessment (e.g., vocabulary, measurement, or geometry).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'ParentIdentificationCode'
GO

-- Extended Properties [edfi].[ObjectiveAssessmentAssessmentItem] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'References individual test items, if appropriate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentItemIdentificationCode'
GO

-- Extended Properties [edfi].[ObjectiveAssessmentLearningObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'References the LearningObjective(s) the ObjectiveAssessment tests.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO

-- Extended Properties [edfi].[ObjectiveAssessmentLearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard tested by this ObjectiveAssessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO

-- Extended Properties [edfi].[ObjectiveAssessmentPerformanceLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Definition of the performance levels and the associated cut scores. Three styles are supported:
        1. Specification of performance level by minimum and maximum score    
        2. Specification of performance level by cut score, using only minimum score    
        3. Specification of performance level without any mapping to scores.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The performance level(s) defined for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the instructor of the class uses to report the performance and achievement of all students. It may be a qualitative method such as individualized teacher comments or a quantitative method such as a letter or numerical grade. In some cases, more than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score required to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MinimumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score to make the indicated level of performance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'MaximumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile,range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[ObjectiveAssessmentScore] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Definition of the scores to be expected from this objective assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The minimum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'MinimumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The maximum score possible on the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'MaximumScore'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ObjectiveAssessmentScore', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[OldEthnicityType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Previous definition of Ethnicity combining Hispanic/Latino and Race.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OldEthnicityType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for OldEthnicity', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OldEthnicityType', @level2type=N'COLUMN', @level2name=N'OldEthnicityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OldEthnicityType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the OldEthnicity type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OldEthnicityType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the OldEthnicity type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OldEthnicityType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[OpenStaffPosition] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an open staff position that the education organization is seeking to fill.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the type of employment or contract desired for the position; for example:
        Probationary
        Contractual
        Substitute/temporary
        Tenured or permanent
        Volunteer/no contract
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The titles of employment, official status, or rank of education staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'RequisitionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the OpenStaffPosition was posted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'DatePosted'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name of an individual''s position.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'PositionTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the program for which the OpenStaffPosition will be assigned; for example:
        Regular education
        Title I-Academic
        Title I-Non-Academic
        Special Education''
        Bilingual/English as a Second Language.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the posting was removed or filled.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'DatePostingRemoved'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indication of whether the OpenStaffPosition was filled or retired without filling.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPosition', @level2type=N'COLUMN', @level2name=N'PostingResultTypeId'
GO

-- Extended Properties [edfi].[OpenStaffPositionAcademicSubject] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The titles of employment, official status, or rank of education staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'RequisitionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the OpenStaffPosition was posted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'DatePosted'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The teaching field required for the OpenStaffPosition, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the type of employment or contract desired for the position; for example:
        Probationary
        Contractual
        Substitute/temporary
        Tenured or permanent
        Volunteer/no contract
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionAcademicSubject', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorId'
GO

-- Extended Properties [edfi].[OpenStaffPositionInstructionalGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of grade levels for which the position''s assignment is responsible.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The titles of employment, official status, or rank of education staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number or identifier assigned to an open staff position, typically a requisition number assigned by Human Resources.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'RequisitionNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the OpenStaffPosition was posted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'DatePosted'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of grade levels for which the position''s assignment is responsible.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the type of employment or contract desired for the position; for example:
        Probationary
        Contractual
        Substitute/temporary
        Tenured or permanent
        Volunteer/no contract
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OpenStaffPositionInstructionalGradeLevel', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorId'
GO

-- Extended Properties [edfi].[OperationalStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The current operational status of the education organization (e.g., active, inactive).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OperationalStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for OperationalStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OperationalStatusType', @level2type=N'COLUMN', @level2name=N'OperationalStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OperationalStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the OperationalStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OperationalStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the OperationalStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OperationalStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[OtherNameType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of alternate names for a person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OtherNameType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for OtherName', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OtherNameType', @level2type=N'COLUMN', @level2name=N'OtherNameTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OtherNameType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the OtherName type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OtherNameType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the OtherName type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'OtherNameType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Parent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a parent or guardian of a student, such as mother, father, or caretaker.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'FirstName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'MiddleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'LastSurname'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'MaidenName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person''s gender.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'LoginId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Parent', @level2type=N'COLUMN', @level2name=N'ParentUniqueId'
GO

-- Extended Properties [edfi].[ParentAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Parent''s address, if different from the student address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'City'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'PostalCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[ParentElectronicMail] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentElectronicMail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentElectronicMail', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator'
GO

-- Extended Properties [edfi].[ParentIdentificationDocument] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of the document relative to its purpose.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary function of the document used for establishing identity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country of origin of the document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorId'
GO

-- Extended Properties [edfi].[ParentInternationalAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the country.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[ParentOtherName] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other names (e.g., alias, nickname, previous legal name) associated with a person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of alternate names for a person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'OtherNameTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'FirstName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'MiddleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'LastSurname'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentOtherName', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix'
GO

-- Extended Properties [edfi].[ParentTelephone] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentTelephone'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ParentTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator'
GO

-- Extended Properties [edfi].[Payroll] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This financial entity represents the sum of the financial transactions to date for employee compensation. An "employee" who performs services under the direction of the employing institution or agency, is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Payroll'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The alphanumeric string that identifies the account.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'AccountNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The financial accounting year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the reported payroll element.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'AsOfDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Current balance (amount paid to employee) for account for the fiscal year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Payroll', @level2type=N'COLUMN', @level2name=N'AmountToDate'
GO

-- Extended Properties [edfi].[PerformanceBaseConversionType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Defines standard levels of competency or performance that can be used for dashboard visualizations: advanced, proficient, basic, and below basic.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceBaseConversionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for PerformanceBaseConversion', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceBaseConversionType', @level2type=N'COLUMN', @level2name=N'PerformanceBaseConversionTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceBaseConversionType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PerformanceBaseConversion type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceBaseConversionType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PerformanceBaseConversion type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceBaseConversionType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[PerformanceLevelDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines various levels or thresholds for performance on the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceLevelDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A conversion of the level to a standard set of performance levels.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PerformanceLevelDescriptor', @level2type=N'COLUMN', @level2name=N'PerformanceBaseConversionTypeId'
GO

-- Extended Properties [edfi].[PersonalInformationVerificationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The evidence presented to verify one''s personal identity; for example: driver''s license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PersonalInformationVerificationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for PersonalInformationVerification', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PersonalInformationVerificationType', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PersonalInformationVerificationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PersonalInformationVerification type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PersonalInformationVerificationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PersonalInformationVerification type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PersonalInformationVerificationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[PopulationServedType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of students the Section is offered and tailored to.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PopulationServedType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for PopulationServed', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PopulationServedType', @level2type=N'COLUMN', @level2name=N'PopulationServedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PopulationServedType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PopulationServed type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PopulationServedType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PopulationServed type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PopulationServedType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[PostingResultType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indication of whether the position was filled or retired without filling.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostingResultType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for PostingResult', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostingResultType', @level2type=N'COLUMN', @level2name=N'PostingResultTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostingResultType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PostingResult type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostingResultType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PostingResult type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostingResultType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[PostSecondaryEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity captures significant postsecondary events during a student''s high school tenure (e.g., FAFSA application or college application, acceptance, and enrollment) or during a student''s enrollment at a post-secondary institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEvent', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEvent', @level2type=N'COLUMN', @level2name=N'PostSecondaryEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the event occurred or was recorded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO

-- Extended Properties [edfi].[PostSecondaryEventCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the type of post-secondary event (e.g., college application or acceptance).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for PostSecondaryEventCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventCategoryType', @level2type=N'COLUMN', @level2name=N'PostSecondaryEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PostSecondaryEventCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PostSecondaryEventCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[PostSecondaryEventPostSecondaryInstitution] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An organization that provides educational programs for individuals who have completed or otherwise left educational programs in secondary school(s).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'PostSecondaryEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the event occurred or was recorded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ID of the post secondary institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'PostSecondaryInstitutionId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The postsecondary institution associated with the event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'NameOfInstitution'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A classification of whether a post secondary institution''s highest level of offering is a program of 4-years or higher (4 year), 2-but-less-than 4-years (2 year), or less than 2-years.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'PostSecondaryInstitutionLevelTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A classification of whether a postsecondary institution is operated by publicly elected or appointed officials (public control) or by privately elected or appointed officials and derives its major source of funds from private sources (private control).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitution', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlDescriptorId'
GO

-- Extended Properties [edfi].[PostSecondaryEventPostSecondaryInstitutionIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an education organization by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'PostSecondaryEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the event occurred or was recorded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school system, state, or agency assigning the identification code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'EducationOrganizationIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code that is assigned to an education organization by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO

-- Extended Properties [edfi].[PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categories in which an institution serves the students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The PostSecondaryEvent that is logged (e.g., FAFSA application, college application, college acceptance).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', @level2type=N'COLUMN', @level2name=N'PostSecondaryEventCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the event occurred or was recorded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The categories in which an institution serves the students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryEventPostSecondaryInstitutionMediumOfInstruction', @level2type=N'COLUMN', @level2name=N'MediumOfInstructionTypeId'
GO

-- Extended Properties [edfi].[PostSecondaryInstitutionLevelType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A classification of whether a post-secondary institution''s highest level of offering is a program of 4 years or higher (4 year), 2 but less than 4 years (2 year) or less than 2 years.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryInstitutionLevelType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for PostSecondaryInstitutionLevel', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryInstitutionLevelType', @level2type=N'COLUMN', @level2name=N'PostSecondaryInstitutionLevelTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryInstitutionLevelType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PostSecondaryInstitutionLevel type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryInstitutionLevelType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PostSecondaryInstitutionLevel type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PostSecondaryInstitutionLevelType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Program] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents any program designed to work in conjunction with, or as a supplement to, the main academic program. Programs may provide instruction, training, services, or benefits through federal, state, or local agencies. Programs may also include organized extracurricular activities for students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Program'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Program', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Ultimate and intermediate providers of funds for a particular educational or service program or activity, or for an individual''s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Organization).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Program', @level2type=N'COLUMN', @level2name=N'ProgramSponsorTypeId'
GO

-- Extended Properties [edfi].[ProgramAssignmentDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the name of the education program for which a teacher is assigned to a school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentDescriptor', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentTypeId'
GO

-- Extended Properties [edfi].[ProgramAssignmentType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the education program for which a teacher is assigned to a school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ProgramAssignment', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentType', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProgramAssignment type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProgramAssignment type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramAssignmentType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ProgramCharacteristic] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristic'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO

-- Extended Properties [edfi].[ProgramCharacteristicDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicTypeId'
GO

-- Extended Properties [edfi].[ProgramCharacteristicType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ProgramCharacteristic', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicType', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProgramCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProgramCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ProgramLearningObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'References the LearningObjective(s) with which the Program is associated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO

-- Extended Properties [edfi].[ProgramLearningStandard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LearningStandard followed by this program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningStandard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningStandard', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningStandard', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the specific learning standard (e.g., 111.15.3.1.A).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningStandard', @level2type=N'COLUMN', @level2name=N'LearningStandardId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramLearningStandard', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO

-- Extended Properties [edfi].[ProgramService] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Defines the services this program provides to students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramService'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramService', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramService', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Defines the services this program provides to students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramService', @level2type=N'COLUMN', @level2name=N'ServiceDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramService', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO

-- Extended Properties [edfi].[ProgramSponsorType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Ultimate and intermediate providers of funds for a particular educational or service program or activity or for an individual''s participation in the program or activity (e.g., Federal, State, ESC, District, School, Private Org).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramSponsorType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ProgramSponsor', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramSponsorType', @level2type=N'COLUMN', @level2name=N'ProgramSponsorTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramSponsorType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ProgramSponsor type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramSponsorType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ProgramSponsor type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramSponsorType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ProgramType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Program', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramType', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Program type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Program type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ProgramType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[PublicationStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The publication status of the document (i.e., Adopted, Draft, Published, Deprecated, Unknown).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PublicationStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for PublicationStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PublicationStatusType', @level2type=N'COLUMN', @level2name=N'PublicationStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PublicationStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the PublicationStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PublicationStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the PublicationStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'PublicationStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[RaceType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The enumeration items defining the racial categories which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RaceType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Race', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RaceType', @level2type=N'COLUMN', @level2name=N'RaceTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RaceType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Race type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RaceType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Race type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RaceType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ReasonExitedDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the reason a student exited a program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN', @level2name=N'ReasonExitedDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedDescriptor', @level2type=N'COLUMN', @level2name=N'ReasonExitedTypeId'
GO

-- Extended Properties [edfi].[ReasonExitedType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reason the child left the program within a school or district.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ReasonExited', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedType', @level2type=N'COLUMN', @level2name=N'ReasonExitedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ReasonExited type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ReasonExited type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonExitedType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ReasonNotTestedType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary reason student is not tested. For example:
    Absent
    Refusal by parent
    Refusal by student
    Medical waiver
    Illness
    Disruptive behavior
    LEP Exempt
    ''...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonNotTestedType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ReasonNotTested', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonNotTestedType', @level2type=N'COLUMN', @level2name=N'ReasonNotTestedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonNotTestedType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ReasonNotTested type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonNotTestedType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ReasonNotTested type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReasonNotTestedType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[RecognitionType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RecognitionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Recognition', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RecognitionType', @level2type=N'COLUMN', @level2name=N'RecognitionTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RecognitionType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Recognition type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RecognitionType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Recognition type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RecognitionType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[RelationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The nature of an individual''s relationship to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RelationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Relation', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RelationType', @level2type=N'COLUMN', @level2name=N'RelationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RelationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Relation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RelationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Relation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RelationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[RepeatIdentifierType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication as to whether a student has previously taken a given course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RepeatIdentifierType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for RepeatIdentifier', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RepeatIdentifierType', @level2type=N'COLUMN', @level2name=N'RepeatIdentifierTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RepeatIdentifierType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the RepeatIdentifier type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RepeatIdentifierType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the RepeatIdentifier type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RepeatIdentifierType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ReportCard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the collection of student grades for courses taken during a grading period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of average performance in all courses taken by an individual for the current grading period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GPAGivenGradingPeriod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of cumulative average performance in all courses taken by an individual from the beginning of the school year through the current grading period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'GPACumulative'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of days an individual is absent when school is in session during a given reporting period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'NumberOfDaysAbsent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of days an individual is present when school is in session during a given reporting period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'NumberOfDaysInAttendance'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of days an individual is tardy during a given reporting period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCard', @level2type=N'COLUMN', @level2name=N'NumberOfDaysTardy'
GO

-- Extended Properties [edfi].[ReportCardGrade] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grades for the classes attended by the Student for this grading period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of grade reported (e.g., Exam, Final, Grading Period).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'GradeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardGrade', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO

-- Extended Properties [edfi].[ReportCardStudentCompetencyObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Student competency evaluations associated for this grading period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the CompetencyObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ReportCardEducationOrganizationId'
GO

-- Extended Properties [edfi].[ReportCardStudentLearningObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The StudentLearningObjective evaluations associated for this grading period.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ReportCardEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReportCardStudentLearningObjective', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO

-- Extended Properties [edfi].[ReporterDescriptionDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the type of individual who reported an incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN', @level2name=N'ReporterDescriptionDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionDescriptor', @level2type=N'COLUMN', @level2name=N'ReporterDescriptionTypeId'
GO

-- Extended Properties [edfi].[ReporterDescriptionType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Information on the type of individual who reported the incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ReporterDescription', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionType', @level2type=N'COLUMN', @level2name=N'ReporterDescriptionTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ReporterDescription type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ReporterDescription type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ReporterDescriptionType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ResidencyStatusDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines indications of the location of a person''s legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN', @level2name=N'ResidencyStatusDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusDescriptor', @level2type=N'COLUMN', @level2name=N'ResidencyStatusTypeId'
GO

-- Extended Properties [edfi].[ResidencyStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ResidencyStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusType', @level2type=N'COLUMN', @level2name=N'ResidencyStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ResidencyStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ResidencyStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResidencyStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ResponseIndicatorType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of the response.  For example:
    Nonscorable response
    Ineffective response
    Effective response
    Partial response
    ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponseIndicatorType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ResponseIndicator', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponseIndicatorType', @level2type=N'COLUMN', @level2name=N'ResponseIndicatorTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponseIndicatorType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ResponseIndicator type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponseIndicatorType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ResponseIndicator type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponseIndicatorType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ResponsibilityDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines types of responsibility an education organization may have for a student (e.g., accountability, attendance, funding).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN', @level2name=N'ResponsibilityDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityDescriptor', @level2type=N'COLUMN', @level2name=N'ResponsibilityTypeId'
GO

-- Extended Properties [edfi].[ResponsibilityType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indications of an education organization''s responsibility for a student, such as accountability, attendance, funding, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Responsibility', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityType', @level2type=N'COLUMN', @level2name=N'ResponsibilityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Responsibility type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Responsibility type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResponsibilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[RestraintEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the instances where a special education student was physically or mechanically restrained due to imminent serious physical harm to themselves or others, imminent serious property destruction or a combination of both imminent serious physical harm to themselves or others and imminent serious property destruction.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'RestraintEventIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting where the RestraintEvent was exercised.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentTypeId'
GO

-- Extended Properties [edfi].[RestraintEventProgram] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The special education program associated with the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'RestraintEventIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO

-- Extended Properties [edfi].[RestraintEventReason] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A categorization of the circumstances or reason for the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReason', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReason', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a restraint event by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReason', @level2type=N'COLUMN', @level2name=N'RestraintEventIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReason', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A categorization of the circumstances or reason for the RestraintEvent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReason', @level2type=N'COLUMN', @level2name=N'RestraintEventReasonTypeId'
GO

-- Extended Properties [edfi].[RestraintEventReasonType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The items of categorization of the circumstances or reason for the restraint.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReasonType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for RestraintEventReason', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReasonType', @level2type=N'COLUMN', @level2name=N'RestraintEventReasonTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the RestraintEventReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReasonType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the RestraintEventReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RestraintEventReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ResultDatatypeType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResultDatatypeType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for ResultDatatype', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResultDatatypeType', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResultDatatypeType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the ResultDatatype type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResultDatatypeType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the ResultDatatype type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ResultDatatypeType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[RetestIndicatorType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator if the test was retaken.  For example:
    Primary administration
    First retest
    Second retest
    ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RetestIndicatorType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for RetestIndicator', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RetestIndicatorType', @level2type=N'COLUMN', @level2name=N'RetestIndicatorTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RetestIndicatorType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the RetestIndicator type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RetestIndicatorType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the RetestIndicator type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'RetestIndicatorType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[School] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an educational organization that includes staff and students who participate in classes and educational activity groups.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education institution as classified by its primary focus.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'SchoolTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A school or agency providing free public elementary or secondary education to eligible students under a specific charter granted by the state legislature or other appropriate authority and designated by such authority to be a charter school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'CharterStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Denotes the Title I Part A designation for the school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'TitleIPartASchoolDesignationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A school that has been designed: 1) to attract students of different racial/ethnic backgrounds for the purpose of reducing, preventing, or eliminating racial isolation; and/or 2) to provide an academic or social focus on a particular theme (e.g., science/math, performing arts, gifted/talented, or foreign language).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'MagnetSpecialProgramEmphasisSchoolTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education institution as classified by its funding source, for example public or private.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'AdministrativeFundingControlDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of Internet access available.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'InternetAccessTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a local education agency by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'LocalEducationAgencyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of agency that approved the establishment or continuation of a charter school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'CharterApprovalAgencyTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year in which a charter school was initially approved.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'School', @level2type=N'COLUMN', @level2name=N'CharterApprovalSchoolYear'
GO

-- Extended Properties [edfi].[SchoolCategory] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The one or more categories of school. For example: High School, Middle School, and/or Elementary School.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategory'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategory', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The one or more categories of school. For example: High School, Middle School, and/or Elementary School.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategory', @level2type=N'COLUMN', @level2name=N'SchoolCategoryTypeId'
GO

-- Extended Properties [edfi].[SchoolCategoryType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of school. For example: High School, Middle School, Elementary School.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategoryType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for SchoolCategory', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategoryType', @level2type=N'COLUMN', @level2name=N'SchoolCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategoryType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategoryType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SchoolCategory type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolCategoryType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[SchoolChoiceImplementStatusType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether the LEA was able to implement the provisions for public school choice under Title I, Part A, Section 1116 of ESEA, as amended.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolChoiceImplementStatusType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for SchoolChoiceImplementStatus', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolChoiceImplementStatusType', @level2type=N'COLUMN', @level2name=N'SchoolChoiceImplementStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolChoiceImplementStatusType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolChoiceImplementStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolChoiceImplementStatusType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SchoolChoiceImplementStatus type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolChoiceImplementStatusType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[SchoolFoodServicesEligibilityDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines indications of a student''s level of eligibility for breakfast, lunch, snack, supper, and milk programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityDescriptor', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityTypeId'
GO

-- Extended Properties [edfi].[SchoolFoodServicesEligibilityType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of a student''s level of eligibility for breakfast, lunch, snack, supper, and milk programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for SchoolFoodServicesEligibility', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityType', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolFoodServicesEligibility type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SchoolFoodServicesEligibility type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolFoodServicesEligibilityType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[SchoolGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels served at the school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolGradeLevel', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade levels served at the school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[SchoolType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of education institution as classified by its primary focus.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for School', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolType', @level2type=N'COLUMN', @level2name=N'SchoolTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the School type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the School type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[SchoolYearType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier for a school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolYearType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for School Year', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolYearType', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SchoolYear type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolYearType', @level2type=N'COLUMN', @level2name=N'SchoolYearDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The code for the current school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SchoolYearType', @level2type=N'COLUMN', @level2name=N'CurrentSchoolYear'
GO

-- Extended Properties [edfi].[Section] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents a setting in which organized instruction of course content is provided, in-person or otherwise, to one or more students for a given period of time. A course offering may be offered to more than one section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting in which a child receives education and related services; for example:
        Center-based instruction
        Home-based instruction
        Hospital class
        Mainstream
        Residential care and treatment facility
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The media through which teachers provide instruction to students and students and teachers communicate about instructional matters; for example:
        Technology-based instruction in classroom
        Correspondence instruction
        Face-to-face instruction
        Virtual/On-line Distance learning
        Center-based instruction
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'MediumOfInstructionTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of students the Section is offered and tailored to; for example:
        Bilingual students
        Remedial education students
        Gifted and talented students
        Career and Technical Education students
        Special education students
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'PopulationServedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'AvailableCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'AvailableCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'AvailableCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary language of instruction, if omitted English is assumed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Section', @level2type=N'COLUMN', @level2name=N'InstructionLanguageDescriptorId'
GO

-- Extended Properties [edfi].[SectionAttendanceTakenEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Captures attendance taken event for given section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the CalendarDate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'Date'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the SectionAttendanceTakenEvent was submitted, which could be a different date than the instructional day.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionAttendanceTakenEvent', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO

-- Extended Properties [edfi].[SectionCharacteristic] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Section, such as whether or not attendance is taken and the Section is graded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'SectionCharacteristicDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristic', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO

-- Extended Properties [edfi].[SectionCharacteristicDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines characteristics of a Section, such as whether attendance is taken and the Section is graded.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'SectionCharacteristicDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'SectionCharacteristicTypeId'
GO

-- Extended Properties [edfi].[SectionCharacteristicType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumeration items for Section Characteristic.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for SectionCharacteristic', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicType', @level2type=N'COLUMN', @level2name=N'SectionCharacteristicTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SectionCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SectionCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[SectionProgram] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional reference to program (e.g., CTE) to which the Section is associated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SectionProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO

-- Extended Properties [edfi].[SeparationReasonDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the reasons for terminating the employment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN', @level2name=N'SeparationReasonDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonDescriptor', @level2type=N'COLUMN', @level2name=N'SeparationReasonTypeId'
GO

-- Extended Properties [edfi].[SeparationReasonType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reason for terminating the employment; for example:  Employment in education, Employment outside of education, Retirement, Family/personal relocation, Change of assignment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for SeparationReason', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonType', @level2type=N'COLUMN', @level2name=N'SeparationReasonTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SeparationReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SeparationReason type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationReasonType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[SeparationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of employment separation; for example:  Voluntary separation, Involuntary separation, Mutual agreement. Other, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Separation', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationType', @level2type=N'COLUMN', @level2name=N'SeparationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Separation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Separation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SeparationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[ServiceDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the services provided by an education organization to populations of students associated with a program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ServiceDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ServiceDescriptor', @level2type=N'COLUMN', @level2name=N'ServiceDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A classification of the behavior for reporting types.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'ServiceDescriptor', @level2type=N'COLUMN', @level2name=N'ServiceCategory'
GO

-- Extended Properties [edfi].[Session] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the prescribed span of time when an education institution is open, instruction is provided and students are under the direction and guidance of teachers and/or education institution administration. A session may be interrupted by one or more vacations.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the calendar for the academic session (e.g., 2010/11, 2011 Summer).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session', @level2type=N'COLUMN', @level2name=N'SessionName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the Session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day and year of the last day of the Session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of instructional days in the school calendar.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Session', @level2type=N'COLUMN', @level2name=N'TotalInstructionalDays'
GO

-- Extended Properties [edfi].[SessionAcademicWeek] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic weeks associated with the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionAcademicWeek'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionAcademicWeek', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school label for the week.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionAcademicWeek', @level2type=N'COLUMN', @level2name=N'WeekIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionAcademicWeek', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionAcademicWeek', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO

-- Extended Properties [edfi].[SessionGradingPeriod] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grading periods associated with the calendar.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionGradingPeriod'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SessionGradingPeriod', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO

-- Extended Properties [edfi].[SexType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person''s gender.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SexType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Sex', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SexType', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SexType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Sex type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SexType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Sex type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SexType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[SpecialEducationSettingDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the major instructional setting (more than 50 percent of a student''s special education program).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN', @level2name=N'SpecialEducationSettingDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingDescriptor', @level2type=N'COLUMN', @level2name=N'SpecialEducationSettingTypeId'
GO

-- Extended Properties [edfi].[SpecialEducationSettingType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The major instructional setting (more than 50 percent of a student''s special education program).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for SpecialEducationSetting', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingType', @level2type=N'COLUMN', @level2name=N'SpecialEducationSettingTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the SpecialEducationSetting type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the SpecialEducationSetting type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'SpecialEducationSettingType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[Staff] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an individual who performs specified activities for any public or private education institution or agency that provides instructional and/or support services to students or staff at the early childhood level through high school completion. For example, this includes:
    1. An "employee" who performs services under the direction of the employing institution or agency is compensated for such services by the employer and is eligible for employee benefits and wage or salary tax withholdings
    2. A "contractor" or "consultant" who performs services for an agreed upon fee or an employee of a management service contracted to work on site
    3. A "volunteer" who performs services on a voluntary and uncompensated basis
    4. An in-kind service provider
    5. An independent contractor or businessperson working at a school site.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'FirstName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'MiddleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'LastSurname'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'MaidenName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person''s gender.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was born.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'BirthDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Previous definition of Ethnicity combining Hispanic/Latino and race:
        1 - American Indian or Alaskan Native
        2 - Asian or Pacific Islander
        3 - Black, not of Hispanic origin
        4 - Hispanic
        5 - White, not of Hispanic origin.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'OldEthnicityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether or not the person is a U.S. citizen.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'CitizenshipStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The extent of formal instruction an individual has received (e.g., the highest grade in school completed or its equivalent or the highest degree received).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'HighestCompletedLevelOfEducationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years that an individual has previously held a similar professional position in one or more education institutions.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'YearsOfPriorProfessionalExperience'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of years that an individual has previously held a teaching position in one or more education institutions.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'YearsOfPriorTeachingExperience'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'LoginId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for ALL Sections being taught.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'HighlyQualifiedTeacher'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Staff', @level2type=N'COLUMN', @level2name=N'StaffUniqueId'
GO

-- Extended Properties [edfi].[StaffAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an address, including the street address, city, state, and ZIP code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'City'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'PostalCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[StaffClassificationDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines an individual''s title of employment, official status or rank.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationDescriptor', @level2type=N'COLUMN', @level2name=N'StaffClassificationTypeId'
GO

-- Extended Properties [edfi].[StaffClassificationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An individual''s title of employment, official status or rank.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for StaffClassification', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationType', @level2type=N'COLUMN', @level2name=N'StaffClassificationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StaffClassification type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StaffClassification type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffClassificationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[StaffCohortAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the Staff associated with a cohort of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'CohortIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start date for the association of staff to this cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End date for the association of staff to this cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the staff has access to the student records of the cohort per district interpretation of FERPA and other privacy laws, regulations, and policies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCohortAssociation', @level2type=N'COLUMN', @level2name=N'StudentRecordAccess'
GO

-- Extended Properties [edfi].[StaffCredential] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The legal document or authorization giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The field of certification for the certificate (e.g., Mathematics, Music).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'CredentialFieldDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the category of credential an individual holds.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'CredentialTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level(s) certified for teaching.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'LevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the category of a legal document giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'TeachingCredentialDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an active credential was issued to an individual.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'CredentialIssuanceDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an active credential held by an individual will expire.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'CredentialExpirationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the pre-determined criteria for granting the teaching credential that an individual holds.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'TeachingCredentialBasisTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which a license/credential was issued.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffCredential', @level2type=N'COLUMN', @level2name=N'StateOfIssueStateAbbreviationTypeId'
GO

-- Extended Properties [edfi].[StaffEducationOrganizationAssignmentAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the education organization to which a staff member provides services; also known as school of service.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The titles of employment, official status, or rank of education staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'StaffClassificationDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the start or effective date of a staff member''s employment, contract, or relationship with the LEA.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The descriptive name of an individual''s position.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'PositionTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the end or termination date of a staff member''s employment, contract, or relationship with the LEA.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes whether the assignment is this the staff member''s primary assignment, secondary assignment, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'OrderOfAssignment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the type of employment or contract; for example:
        Probationary
        Contractual
        Substitute/temporary
        Tenured or permanent
        Volunteer/no contract
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was hired for a position.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationAssignmentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentHireDate'
GO

-- Extended Properties [edfi].[StaffEducationOrganizationEmploymentAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the EducationOrganization an employee, contractor, volunteer, or other service provider is formally associated with typically indicated by which organization the staff member has a services contract with or receives compensation from.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects the type of employment or contract; for example:
        Probationary
        Contractual
        Substitute/temporary
        Tenured or permanent
        Volunteer/no contract
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'EmploymentStatusDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was hired for a position.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'HireDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which a contract between an individual and a governing authority ends or is terminated under the provisions of the contract (or the date on which the agreement is made invalid).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Type of employment separation; for example: Voluntary separation, Involuntary separation,
        Mutual agreement
        Other, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'SeparationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reason for terminating the employment; for example:
        Employment in education
        Employment outside of education
        Retirement
        Family/personal relocation
        Change of assignment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'SeparationReasonDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The department or suborganization the employee/contractor is associated with in the EducationOrganization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'Department'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The ratio between the hours of work expected in a position and the hours of work normally expected in a full-time position in the same setting.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'FullTimeEquivalency'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date at which the staff member was made an official offer for this employment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'OfferDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Hourly wage associated with the employment position being reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffEducationOrganizationEmploymentAssociation', @level2type=N'COLUMN', @level2name=N'HourlyWage'
GO

-- Extended Properties [edfi].[StaffElectronicMail] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffElectronicMail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffElectronicMail', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator'
GO

-- Extended Properties [edfi].[StaffIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a staff member.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a staff member by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the staff Identification Code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode'
GO

-- Extended Properties [edfi].[StaffIdentificationDocument] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of the document relative to its purpose.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary function of the document used for establishing identity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country of origin of the document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorId'
GO

-- Extended Properties [edfi].[StaffIdentificationSystemDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the originating record system and code that is used for record-keeping purposes of the staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemTypeId'
GO

-- Extended Properties [edfi].[StaffIdentificationSystemType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a staff member.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for StaffIdentificationSystem', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'StaffIdentificationSystemTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StaffIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StaffIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[StaffInternationalAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the country.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[StaffLanguage] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language(s) the individual uses to communicate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffLanguage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffLanguage', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A specification of which written or spoken communication is being used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO

-- Extended Properties [edfi].[StaffLanguageUse] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffLanguageUse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffLanguageUse', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A specification of which written or spoken communication is being used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageUseTypeId'
GO

-- Extended Properties [edfi].[StaffOtherName] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other names (e.g., alias, nickname, previous legal name) associated with a person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of alternate names for a person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'OtherNameTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'FirstName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'MiddleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'LastSurname'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffOtherName', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix'
GO

-- Extended Properties [edfi].[StaffProgramAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the Staff associated with a program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Start date for the association of staff to this program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'End date for the association of staff to this program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the staff has access to the student records of the program per district interpretation of FERPA and other privacy laws, regulations, and policies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentRecordAccess'
GO

-- Extended Properties [edfi].[StaffRace] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffRace'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffRace', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The way this data element is listed, it must allow for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffRace', @level2type=N'COLUMN', @level2name=N'RaceTypeId'
GO

-- Extended Properties [edfi].[StaffSchoolAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the School(s) to which a staff member provides instructional services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the program for which the individual is assigned; for example:
        Regular education
        Title I-Academic
        Title I-Non-Academic
        Special Education
        Bilingual/English as a Second Language.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Identifier for a school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO

-- Extended Properties [edfi].[StaffSchoolAssociationAcademicSubject] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationAcademicSubject'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the program for which the individual is assigned; for example:
        Regular education
        Title I-Academic
        Title I-Non-Academic
        Special Education
        Bilingual/English as a Second Language.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The teaching field taught by an individual, for example English/Language Arts, Reading, Mathematics, Science, Social Sciences, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationAcademicSubject', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO

-- Extended Properties [edfi].[StaffSchoolAssociationGradeLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of grade levels for which the individual''s assignment is responsible.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationGradeLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the program for which the individual is assigned; for example:
        Regular education
        Title I-Academic
        Title I-Non-Academic
        Special Education
        Bilingual/English as a Second Language.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'ProgramAssignmentDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of grade levels for which the individual''s assignment is responsible.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSchoolAssociationGradeLevel', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO

-- Extended Properties [edfi].[StaffSectionAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the class sections to which a staff member is assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of position the Staff member holds in the specific class/section; for example:
        Teacher of Record, Assistant Teacher, Support Teacher, Substitute Teacher...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomPositionDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of a teacher''s assignment to the Section. If blank, defaults to the first day of the first grading period for the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the last day of a staff member''s assignment to the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether a teacher is classified as highly qualified for his/her assignment according to state definition. This attribute indicates the teacher is highly qualified for this section being taught.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'HighlyQualifiedTeacher'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the entire section is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'TeacherStudentDataLinkExclusion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the percentage of the total scheduled course time, academic standards, and/or learning activities delivered in this section by this staff member. A teacher of record designation may be based solely or partially on this contribution percentage.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffSectionAssociation', @level2type=N'COLUMN', @level2name=N'PercentageContribution'
GO

-- Extended Properties [edfi].[StaffTelephone] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffTelephone'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator'
GO

-- Extended Properties [edfi].[StaffVisa] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffVisa'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffVisa', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StaffVisa', @level2type=N'COLUMN', @level2name=N'VisaTypeId'
GO

-- Extended Properties [edfi].[StateAbbreviationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateAbbreviationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for StateAbbreviation', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateAbbreviationType', @level2type=N'COLUMN', @level2name=N'StateAbbreviationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateAbbreviationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StateAbbreviation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateAbbreviationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StateAbbreviation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateAbbreviationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[StateEducationAgency] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the agency of the state charged with the primary responsibility for coordinating and supervising public instruction, including the setting of standards for elementary and secondary instructional programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgency'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgency', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId'
GO

-- Extended Properties [edfi].[StateEducationAgencyAccountability] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity maintains information about federal reporting and accountability for state education agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyAccountability'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year for which the accountability is reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether CTE concentrators are included in the state''s computation of its graduation rate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyAccountability', @level2type=N'COLUMN', @level2name=N'CTEGraduationRateInclusion'
GO

-- Extended Properties [edfi].[StateEducationAgencyFederalFunds] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Contains the information about the reception and use of federal funds for reporting purposes.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyFederalFunds'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a state education agency by the StateEducationAgency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'StateEducationAgencyId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fiscal year for which the federal funds are received.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'FiscalYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The amount of federal dollars distributed to Local Education Agencies (LEAs), retained by the State Education Agency (SEA) for program administration or other approved state-level activities (including unallocated, transferred to another state agency, or distributed to entities other than LEAs).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StateEducationAgencyFederalFunds', @level2type=N'COLUMN', @level2name=N'FederalProgramsFundingAllocation'
GO

-- Extended Properties [edfi].[Student] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'FirstName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'MiddleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'LastSurname'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person''s maiden name.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'MaidenName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A person''s gender.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'SexTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual was born.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The city the student was born in.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthCity'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthStateAbbreviationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For students born outside of the U.S., the Province or jurisdiction in which an individual is born.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthInternationalProvince'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The country in which an individual is born.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'BirthCountryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'For students born outside of the U.S., the date the student entered the U.S.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'DateEnteredUS'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'MultipleBirthStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Locator for the student photo.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'ProfileThumbnail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, "Spanish origin," can be used in addition to "Hispanic or Latino."', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'HispanicLatinoEthnicity'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Previous definition of Ethnicity combining Hispanic/Latino and race:
        1 - American Indian or Alaskan Native
        2 - Asian or Pacific Islander
        3 - Black, not of Hispanic origin
        4 - Hispanic
        5 - White, not of Hispanic origin.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'OldEthnicityTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether or not the person is a U.S. citizen.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'CitizenshipStatusTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of inadequate financial condition of an individual''s family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'EconomicDisadvantaged'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of a student''s level of eligibility for breakfast, lunch, snack, supper, and milk programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'SchoolFoodServicesEligibilityDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'LimitedEnglishProficiencyDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'DisplacementStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The login ID for the user; used for security access control interface.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'LoginId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'Student', @level2type=N'COLUMN', @level2name=N'StudentUniqueId'
GO

-- Extended Properties [edfi].[StudentAcademicRecord] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This educational entity represents the cumulative record of academic achievement for a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeEarnedCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeAttemptedCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The cumulative number of grade points an individual earns by successfully completing courses or examinations during his or her enrollment in the current school as well as those transferred from schools in which the individual had been previously enrolled.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointsEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of average performance in all courses taken by an individual during his or her school career as determined for record-keeping purposes. This is obtained by dividing the total grade points received by the total number of credits attempted. This usually includes grade points received and credits attempted in his or her current school as well as those transferred from schools in which the individual was previously enrolled.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'CumulativeGradePointAverage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The scale of equivalents, if applicable, for grades awarded as indicators of performance in schoolwork. For example, numerical equivalents for letter grades used in determining a student''s Grade Point Average (A=4, B=3, C=2, D=1 in a four-point system) or letter equivalents for percentage grades (90-100%=A, 80-90%=B, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'GradeValueQualifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month and year the student is projected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'ProjectedGraduationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionEarnedCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCredits'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of credits or units of value awarded for the completion of a course.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Conversion factor that when multiplied by the number of credits is equivalent to Carnegie units.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionAttemptedCreditConversion'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of grade points an individual earned for this session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointsEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade point average for an individual computed as the grade points earned during the session divided by the number of credits attempted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecord', @level2type=N'COLUMN', @level2name=N'SessionGradePointAverage'
GO

-- Extended Properties [edfi].[StudentAcademicRecordAcademicHonor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Academic distinctions earned by or awarded to the student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A designation of the type of academic distinctions earned by or awarded to the student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AcademicHonorCategoryTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of achievement attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'Criteria'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'CriteriaURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'EvidenceStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'ImageURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the honor was awarded or earned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordAcademicHonor', @level2type=N'COLUMN', @level2name=N'HonorAwardExpiresDate'
GO

-- Extended Properties [edfi].[StudentAcademicRecordClassRanking] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank information of a student in relation to his or her graduating class.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic rank of a student in relation to his or her graduating class (e.g., 1st, 2nd, 3rd).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRank'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The total number of students in the student''s graduating class.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'TotalNumberInClass'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The academic percentage rank of a student in relation to his or her graduating class (e.g., 95%, 80%, 50%).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'PercentageRanking'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date class ranking was determined.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordClassRanking', @level2type=N'COLUMN', @level2name=N'ClassRankingDate'
GO

-- Extended Properties [edfi].[StudentAcademicRecordDiploma] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Diploma(s) earned by the student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the student met  graduation requirements and was awarded a diploma.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of achievement attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'Criteria'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CriteriaURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'EvidenceStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'ImageURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The level of diploma/credential that is awarded to a student in recognition of his/her completion of the curricular requirements.
        Minimum high school program
        Recommended high school program
        Distinguished Achievement Program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaLevelTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicated a student who reached a state-defined threshold of vocational education and who attained a high school diploma or its recognized state equivalent or GED.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'CTECompleter'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of diploma given to the student for accomplishments.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordDiploma', @level2type=N'COLUMN', @level2name=N'DiplomaAwardExpiresDate'
GO

-- Extended Properties [edfi].[StudentAcademicRecordRecognition] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Recognitions given to the student for accomplishments in a co-curricular or extracurricular activity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The nature of recognition given to the student for accomplishments in a co-curricular, or extra-curricular activity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title assigned to the achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of achievement attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The system that defines the categories by which an achievement is attributed to the learner.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'AchievementCategorySystem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the agent, entity, or institution issuing the element.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) from which the award was issued.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'IssuerOriginURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The criteria for competency-based completion of the achievement/award.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'Criteria'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of a web page describing the competency-based completion criteria for the achievement/award.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'CriteriaURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement or reference describing the evidence that the learner met the criteria for attainment of the Achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'EvidenceStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Uniform Resource Locator (URL) for the unique address of an image representing an award or badge associated with the Achievement.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'ImageURL'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the type of academic distinctions earned by or awarded to the individual.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionDescription'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the recognition was awarded or earned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date on which the award expires.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordRecognition', @level2type=N'COLUMN', @level2name=N'RecognitionAwardExpiresDate'
GO

-- Extended Properties [edfi].[StudentAcademicRecordReportCard] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Report cards for the student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAcademicRecordReportCard', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO

-- Extended Properties [edfi].[StudentAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an address, including the street address, city, state, and ZIP code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The street number and street name or post office box number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'StreetNumberName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The apartment, room, or suite number of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'ApartmentRoomSuiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of the building on the site, if more than one building shares the same address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'BuildingSiteNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the city in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'City'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The abbreviation for the state (within the United States) or outlying area in which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'StateAbbreviationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The five or nine digit zip code or overseas postal code portion of an address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'PostalCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the county, parish, borough, or comparable unit (within a state) in 
                      ''which an address is located.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'NameOfCounty'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the "first-order subdivisions" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'CountyFIPSCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[StudentAssessment] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the analysis or scoring of a student''s response on an assessment. The analysis results in a value that represents a student''s performance on a set of items on a test.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Assessment Administration End Date, if administered over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationEndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique number for the assessment form or answer document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'SerialNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language in which an assessment is written and/or administered.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationLanguageDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The environment in which the test was administered. For example:
        Electronic
        Classroom
        Testing Center
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationEnvironmentTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator if the test was retaken. For example:
        Primary administration
        First retest
        Second retest
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'RetestIndicatorTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary reason student is not tested. For example:
        Absent
        Refusal by parent
        Refusal by student
        Medical waiver
        Illness
        Disruptive behavior
        LEP Exempt
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'ReasonNotTestedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level of a student when assessed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'WhenAssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An unusual event occurred during the administration of the assessment. This could include fire alarm, student became ill, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'EventCircumstanceTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes special events that occur before during or after the assessment session that may impact use of results.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessment', @level2type=N'COLUMN', @level2name=N'EventDescription'
GO

-- Extended Properties [edfi].[StudentAssessmentAccommodation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examinationmeasures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:
        Braille
        Enlarged monitor view
        Extra time
        Large Print
        Setting
        Oral Administration
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The specific type of special variation used in how an examination is presented, how it is administered, or how the test taker is allowed to respond. This generally refers to changes that do not substantially alter what the examinationmeasures. The proper use of accommodations does not substantially change academic level or performance criteria. For example:
        Braille
        Enlarged monitor view
        Extra time
        Large Print
        Setting
        Oral Administration
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentAccommodation', @level2type=N'COLUMN', @level2name=N'AccommodationDescriptorId'
GO

-- Extended Properties [edfi].[StudentAssessmentItem] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NEEDS DOCUMENTATION', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A student''s response to a stimulus on a test.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentResponse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formative descriptive feedback that was given to a learner in response to the results from a scored/evaluated assessment item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'DescriptiveFeedback'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of the response. For example:
        Nonscorable response
        Ineffective response
        Effective response
        Partial response
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'ResponseIndicatorTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The analyzed result of a student''s response to an assessment item. For example:
        Correct
        Incorrect
         Met standard
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'AssessmentItemResultTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful raw score of the performance of an individual on an assessment item.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'RawScoreResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The overall time a student actually spent during the AssessmentItem.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentItem', @level2type=N'COLUMN', @level2name=N'TimeAssessed'
GO

-- Extended Properties [edfi].[StudentAssessmentPerformanceLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The performance level(s) achieved for the StudentAssessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A specification of which performance level value describes the student proficiency.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional indicator of whether the performance level was met.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMet'
GO

-- Extended Properties [edfi].[StudentAssessmentScoreResult] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'Result'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[StudentAssessmentStudentObjectiveAssessment] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'NEEDS DOCUMENTATION', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessment', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO

-- Extended Properties [edfi].[StudentAssessmentStudentObjectiveAssessmentPerformanceLevel] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The PerformanceLevel(s) achieved for the ObjectiveAssessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A specification of which performance level value describes the student proficiency.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Optional indicator of whether the performance level was met.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentPerformanceLevel', @level2type=N'COLUMN', @level2name=N'PerformanceLevelMet'
GO

-- Extended Properties [edfi].[StudentAssessmentStudentObjectiveAssessmentScoreResult] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A meaningful score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title or name of the Assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The typical grade level for which an assessment is designed. If the assessment spans a range of grades, then this attribute holds the highest grade assessed. If only one grade level is assessed then only this attribute is used. For example:
        Adult
        Prekindergarten
        First grade
        Second grade
        ...', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessedGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The version identifier for the assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'Version'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a space, room, site, building, individual, organization, program, or institution by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month(s), day(s), and year on which an assessment is administered or first day of administration if over multiple days.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AdministrationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The method that the administrator of the assessment uses to report the performance and achievement of all students. It may be a qualitative method such as performance level descriptors or a quantitative method such as a numerical grade or cut score. More than one type of reporting method may be used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'AssessmentReportingMethodTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of a meaningful raw score or statistical expression of the performance of an individual. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'Result'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The datatype of the result. The results can be expressed as a number, percentile, range, level, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentAssessmentStudentObjectiveAssessmentScoreResult', @level2type=N'COLUMN', @level2name=N'ResultDatatypeTypeId'
GO

-- Extended Properties [edfi].[StudentCharacteristic] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the student''s home situation:
        Displaced Homemaker, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristic'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The characteristic designated for the Student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the characteristic was designated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the characteristic was removed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the characteristic.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristic', @level2type=N'COLUMN', @level2name=N'DesignatedBy'
GO

-- Extended Properties [edfi].[StudentCharacteristicDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the set of important characteristics of the student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicDescriptor', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicTypeId'
GO

-- Extended Properties [edfi].[StudentCharacteristicType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Enumeration items for the important characteristics of the student''s home situation: Displaced Homemaker, Homeless, Immigrant, Migratory, Military Parent, Pregnant Teen, Single Parent, and Unaccompanied Youth.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for StudentCharacteristic', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicType', @level2type=N'COLUMN', @level2name=N'StudentCharacteristicTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StudentCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StudentCharacteristic type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCharacteristicType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[StudentCohortAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the Cohort(s) for which a student is designated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'CohortIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student was first identified as part of the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student was removed as part of the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[StudentCohortAssociationSection] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Cohort representing the subdivision of students within one or more sections. For example, a group of students may be given additional instruction and tracked as a cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'CohortIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student was first identified as part of the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortAssociationSection', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO

-- Extended Properties [edfi].[StudentCohortYear] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type and year of a cohort (e.g., 9th grade) the student belongs to as determined by the year that student entered a specific grade.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortYear', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of cohort year (9th grade, graduation).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortYear', @level2type=N'COLUMN', @level2name=N'CohortYearTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the  school year for the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCohortYear', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO

-- Extended Properties [edfi].[StudentCompetencyObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the competency assessed or evaluated for the student against a specific learning  objective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the CompetencyObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the CompetencyObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The CompetencyLevel assessed for the student for the referenced LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCompetencyObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO

-- Extended Properties [edfi].[StudentCTEProgramAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the career and technical education (CTE) program that a student participates in. The association is an extension of the StudentProgramAssociation particular for CTE programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO

-- Extended Properties [edfi].[StudentCTEProgramAssociationCTEProgram] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The career cluster representing the career path of the Vocational/Career Tech concentrator.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A sequence of courses within an area of interest that is a student''s educational road map to a chosen career.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'CareerPathwayTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Number and description of the CIP Code associated with the student''s CTEProgram.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'CIPCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A boolean indicator of whether this CTEProgram, is the student''s primary CTEProgram.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'PrimaryCTEProgramIndicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A boolean indicator of whether the Student has completed the CTEProgram.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentCTEProgramAssociationCTEProgram', @level2type=N'COLUMN', @level2name=N'CTEProgramCompletionIndicator'
GO

-- Extended Properties [edfi].[StudentDisability] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The disability condition(s) that best describes an individual''s impairment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisability'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A disability category that describes a child''s impairment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of the disability diagnosis.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDiagnosis'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order by severity of student''s disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'OrderOfDisability'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The source that provided the disability determination.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisability', @level2type=N'COLUMN', @level2name=N'DisabilityDeterminationSourceTypeId'
GO

-- Extended Properties [edfi].[StudentDisciplineIncidentAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates those students who were victims, perpetrators, witnesses, and reporters for a discipline incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The role or type of participation of a student in a discipline incident; 
        for example:
        Victim
        Perpetrator
        Witness
        Reporter.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociation', @level2type=N'COLUMN', @level2name=N'StudentParticipationCodeTypeId'
GO

-- Extended Properties [edfi].[StudentDisciplineIncidentAssociationBehavior] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes behavior by category and provides a detailed description.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociationBehavior'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A locally assigned unique identifier (within the school or school district) to identify each specific DisciplineIncident or occurrence. The same identifier should be used to document the entire DisciplineIncident even if it included multiple offenses and multiple offenders.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'IncidentIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Describes behavior by category and provides a detailed description.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Specifies a more granular level of detail of a behavior involved in the incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentDisciplineIncidentAssociationBehavior', @level2type=N'COLUMN', @level2name=N'BehaviorDetailedDescription'
GO

-- Extended Properties [edfi].[StudentEducationOrganizationAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates any relationship between a student and an education organization other than how the state views enrollment. Enrollment relationship semantics are covered by StudentSchoolAssociation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentEducationOrganizationAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indications of an education organization''s responsibility for a student, such as accountability, attendance, funding, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentEducationOrganizationAssociation', @level2type=N'COLUMN', @level2name=N'ResponsibilityDescriptorId'
GO

-- Extended Properties [edfi].[StudentElectronicMail] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numbers, letters, and symbols used to identify an electronic mail (e-mail) user within the network to which the individual or organization belongs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentElectronicMail'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentElectronicMail', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The electronic mail (e-mail) address listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentElectronicMail', @level2type=N'COLUMN', @level2name=N'ElectronicMailAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentElectronicMail', @level2type=N'COLUMN', @level2name=N'PrimaryEmailAddressIndicator'
GO

-- Extended Properties [edfi].[StudentGradebookEntry] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity holds a student''s grade or competency level for a gradebook entry.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or title of the activity to be recorded in the GradebookEntry.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'GradebookEntryTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the assignment, homework, or assessment was assigned or executed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'DateAssigned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date an assignment was turned in or the date of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'DateFulfilled'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'LetterGradeEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A final or interim (grading period) indicator of student performance in a class as submitted by the instructor.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'NumericGradeEarned'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The CompetencyLevel assessed for the student for the referenced LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentGradebookEntry', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement'
GO

-- Extended Properties [edfi].[StudentIdentificationCode] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The organization code or name assigning the StudentIdentificationCode.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'AssigningOrganizationIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services, or other agencies to refer to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a student by a school, school system, a state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationCode', @level2type=N'COLUMN', @level2name=N'IdentificationCode'
GO

-- Extended Properties [edfi].[StudentIdentificationDocument] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The documents presented as evident to verify one''s personal identity; for example: drivers license, passport, birth certificate, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category of the document relative to its purpose.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'PersonalInformationVerificationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary function of the document used for establishing identity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IdentificationDocumentUseTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The title of the document given by the issuer.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentTitle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The day when the document  expires, if null then never expires.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'DocumentExpirationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The unique identifier on the issuer''s identification system.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerDocumentIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Name of the entity or institution that issued the document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Country of origin of the document.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationDocument', @level2type=N'COLUMN', @level2name=N'IssuerCountryDescriptorId'
GO

-- Extended Properties [edfi].[StudentIdentificationSystemDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the originating record system and code that is used for record-keeping purposes of the student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemDescriptor', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemTypeId'
GO

-- Extended Properties [edfi].[StudentIdentificationSystemType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A coding scheme that is used for identification and record-keeping purposes by schools, social services or other agencies to refer to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for StudentIdentificationSystem', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'StudentIdentificationSystemTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StudentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StudentIdentificationSystem type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIdentificationSystemType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[StudentIndicator] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator(s) or metric(s) computed for the student (e.g., at risk) to influence more effective education or direct specific interventions.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the indicator or metric.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'IndicatorName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name for a group of indicators.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'IndicatorGroup'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value of the indicator or metric.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'Indicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date when the indicator was assigned or computed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the indicator or metric was sunset or removed.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the program association.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentIndicator', @level2type=N'COLUMN', @level2name=N'DesignatedBy'
GO

-- Extended Properties [edfi].[StudentInternationalAddress] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The set of elements that describes an international address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of address listed for an individual or organization. For example:  Physical Address, Mailing Address, Home Address, etc.)', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine1'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The second line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine2'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The third line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine3'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The fourth line of the address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'AddressLine4'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the country.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'CountryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic latitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Latitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The geographic longitude of the physical address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'Longitude'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The first date the address is valid. For physical addresses, the date the person moved to that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The last date the address is valid. For physical addresses, this would be the date the person moved from that address.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInternationalAddress', @level2type=N'COLUMN', @level2name=N'EndDate'
GO

-- Extended Properties [edfi].[StudentInterventionAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the students participating in an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name or ID for the Cohort.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'CohortIdentifier'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'CohortEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the assigner that provides information regarding why the student was assigned to this intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociation', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement'
GO

-- Extended Properties [edfi].[StudentInterventionAssociationInterventionEffectiveness] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A measure of the effects of an intervention in each outcome domain. The rating of effectiveness takes into account four factors: the quality of the research on the intervention, the statistical significance of the research findings, the size of the differences between participants in the intervention and comparison groups and the consistency in results.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Targeted purpose of the intervention (e.g., attendance issue, dropout risk) for which the effectiveness is measured.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'DiagnosisDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Population for which effectiveness is measured.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'PopulationServedTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Grade level for which effectiveness is measured.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'GradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Along a percentile distribution of students, the improvement index represents the change in an average student''s percentile rank that is considered to be due to the intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'ImprovementIndex'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An intervention demonstrates effectiveness if the research has shown that the program caused an improvement in outcomes. Values: positive effects, potentially positive effects, mixed effects, potentially negative effects, negative effects, and no discernible effects.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAssociationInterventionEffectiveness', @level2type=N'COLUMN', @level2name=N'InterventionEffectivenessRatingTypeId'
GO

-- Extended Properties [edfi].[StudentInterventionAttendanceEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance for an intervention service.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to an intervention.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'InterventionIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentInterventionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentTypeId'
GO

-- Extended Properties [edfi].[StudentLanguage] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The language(s) the individual uses to communicate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLanguage'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLanguage', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A specification of which written or spoken communication is being used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLanguage', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO

-- Extended Properties [edfi].[StudentLanguageUse] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLanguageUse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLanguageUse', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A specification of which written or spoken communication is being used.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A description of how the language is used (e.g. Home Language, Native Language, Spoken Language).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLanguageUse', @level2type=N'COLUMN', @level2name=N'LanguageUseTypeId'
GO

-- Extended Properties [edfi].[StudentLearningObjective] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This entity represents the competency assessed or evaluated for the student against a specific LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The designated title of the LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'Objective'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description of the content or subject area (e.g., arts, mathematics, reading, stenography, or a foreign language) of an assessment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'AcademicSubjectDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level for which the LearningObjective is targeted.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ObjectiveGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name of the period for which grades are reported.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the first day of the GradingPeriod.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'GradingPeriodBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The CompetencyLevel assessed for the student for the referenced LearningObjective.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'CompetencyLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A statement provided by the teacher that provides information in addition to the grade or assessment score.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'DiagnosticStatement'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningObjective', @level2type=N'COLUMN', @level2name=N'StudentSectionAssociationBeginDate'
GO

-- Extended Properties [edfi].[StudentLearningStyle] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference to visual, auditory, and tactile learning expressed as percentages.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningStyle'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningStyle', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to visual learning.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningStyle', @level2type=N'COLUMN', @level2name=N'VisualLearning'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to auditory learning.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningStyle', @level2type=N'COLUMN', @level2name=N'AuditoryLearning'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The student''s relative preference expressed as a percent to kinesthetic or tactile learning.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentLearningStyle', @level2type=N'COLUMN', @level2name=N'TactileLearning'
GO

-- Extended Properties [edfi].[StudentMigrantEducationProgramAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the migrant education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation with added elements particular to migrant education programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Report migratory children who are classified as having "priority for services" because they are failing, or most at risk of failing to meet the State''s challenging State academic content standards and challenging State student academic achievement standards, and their education has been interrupted during the regular school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'PriorityForServices'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date the last qualifying move occurred; used to compute MEP status.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'LastQualifyingMove'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The "continuation of services" provision found in Section 1304(e) of the statute provides that (1) a child who ceases to be a migratory child during a school term shall be eligible for services until the end of such term; (2) a child who is no longer a migratory child may continue to receive services for one additional school year, but only if comparable services are not available through other programs; and (3) secondary school students who were eligible for services in secondary school may continue to be served through credit accrual programs until graduation. Only students who received services at any time during their 36 month eligibility period may continue to receive services (not necessarily the same service).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ContinuationOfServicesReasonDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first entered the U.S.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'USInitialEntry'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the Student''s most recent entry into the U.S.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'USMostRecentEntry'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first entered a U.S. school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentMigrantEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'USInitialSchoolEntry'
GO

-- Extended Properties [edfi].[StudentOtherName] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Other names (e.g., alias, nickname, previous legal name) associated with a person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The types of alternate names for a person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'OtherNameTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A prefix used to denote the title, degree, position, or seniority of the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'PersonalTitlePrefix'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'FirstName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A secondary name given to an individual at birth, baptism, or during another naming ceremony.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'MiddleName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The name borne in common by members of a family.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'LastSurname'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An appendage, if any, used to denote an individual''s generation in his family (e.g., Jr., Sr., III).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentOtherName', @level2type=N'COLUMN', @level2name=N'GenerationCodeSuffix'
GO

-- Extended Properties [edfi].[StudentParentAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association relates students to their parents, guardians, or caretakers.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'ParentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The nature of an individual''s relationship to a student; for example:
        Father, Mother, Step Father, Step Mother, Foster Father, Foster Mother, Guardian, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'RelationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the person is a primary parental contact for the Student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'PrimaryContactStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the Student lives with the associated parent.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'LivesWith'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of whether the person is a designated emergency contact for the Student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'EmergencyContactStatus'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The numeric order of the preferred sequence or priority of contact.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'ContactPriority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Restrictions for student and/or teacher contact with the individual (e.g., the student may not be picked up by the individual).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParentAssociation', @level2type=N'COLUMN', @level2name=N'ContactRestrictions'
GO

-- Extended Properties [edfi].[StudentParticipationCodeType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The role or type of participation of a student in a discipline incident; for example: Victim, Perpetrator, Witness, Reporter.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParticipationCodeType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for StudentParticipationCode', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParticipationCodeType', @level2type=N'COLUMN', @level2name=N'StudentParticipationCodeTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParticipationCodeType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the StudentParticipationCode type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParticipationCodeType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the StudentParticipationCode type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentParticipationCodeType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[StudentProgramAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the Program(s) that a student participates in or is served by.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student exited the Program or stopped receiving services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reason the child left the Program within a school or district.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ReasonExitedDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether the Student received services during the summer session or between sessions.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociation', @level2type=N'COLUMN', @level2name=N'ServedOutsideOfRegularSession'
GO

-- Extended Properties [edfi].[StudentProgramAssociationService] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the Service(s) being provided to the Student by the Program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the Service being provided to the student by the Program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ServiceDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'True if service is a primary service.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'PrimaryIndicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'First date the Student was in this option for the current school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ServiceBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Last date the Student was in this option for the current school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAssociationService', @level2type=N'COLUMN', @level2name=N'ServiceEndDate'
GO

-- Extended Properties [edfi].[StudentProgramAttendanceEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance to receive or participate in program services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentTypeId'
GO

-- Extended Properties [edfi].[StudentProgramParticipation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key programs the student is participating in or receives services from.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the Student was associated with the Program or service.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date the Program participation ended.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The person, organization, or department that designated the program association.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipation', @level2type=N'COLUMN', @level2name=N'DesignatedBy'
GO

-- Extended Properties [edfi].[StudentProgramParticipationProgramCharacteristic] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipationProgramCharacteristic'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipationProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipationProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Reflects important characteristics of the Program, such as categories or particular indications.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentProgramParticipationProgramCharacteristic', @level2type=N'COLUMN', @level2name=N'ProgramCharacteristicDescriptorId'
GO

-- Extended Properties [edfi].[StudentRace] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentRace'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentRace', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The general racial category which most clearly reflects the individual''s recognition of his or her community or with which the individual most identifies. The data model allows for multiple entries so that each individual can specify all appropriate races.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentRace', @level2type=N'COLUMN', @level2name=N'RaceTypeId'
GO

-- Extended Properties [edfi].[StudentSchoolAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the School in which a student is enrolled. The semantics of enrollment may differ slightly by state. Non-enrollment relationships between a student and an education organization may be described using the StudentEducationOrganizationAssociation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual enters and begins to receive instructional services in a school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates if a given enrollment record should be considered the primary record for a student. If omitted, the default is true.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'PrimarySchool'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year associated with the student''s enrollment.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The grade level or primary instructional level at which a student enters and receives services in a school or an educational institution during a given academic session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryGradeLevelDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The primary reason as to why a staff member determined that a student should be promoted or not (or be demoted) at the end of a given school term.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryGradeLevelReasonTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The process by which a student enters a school during a given academic session.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EntryTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of whether the student is enrolling to repeat a grade level, either by failure or an agreement to hold the student back.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'RepeatGradeIndicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Projected High School graduation year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ClassOfSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of whether students transferred in or out of the school did so during the school year under the provisions for public school choice in accordance with Title I, Part A, Section 1116.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'SchoolChoiceTransfer'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year of the first day after the date of an individual''s last attendance at a school (if known), the day on which an individual graduated, or the date on which it becomes known officially that an individual left school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The circumstances under which the student exited from membership in an educational institution.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ExitWithdrawTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the location of a persons legal residence relative to (within or outside of) the boundaries of the public school attended and its administrative unit.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'ResidencyStatusDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of academic plan the student is following for graduation: for example, Minimum, Recommended, Distinguished, or Standard.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'GraduationPlanTypeDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The school year the student is expected to graduate.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'GraduationSchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An individual who is a paid employee or works in his or her own business, profession, or farm and at the same time is enrolled in secondary, postsecondary, or adult education.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociation', @level2type=N'COLUMN', @level2name=N'EmployedWhileEnrolled'
GO

-- Extended Properties [edfi].[StudentSchoolAssociationEducationPlan] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of EducationPlan(s) the student is following, if appropriate. For example:
        Special education IEP
        Vocational.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociationEducationPlan'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociationEducationPlan', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociationEducationPlan', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which an individual enters and begins to receive instructional services in a school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociationEducationPlan', @level2type=N'COLUMN', @level2name=N'EntryDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of EducationPlan(s) the student is following, if appropriate. For example:
        Special education IEP
        Vocational.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAssociationEducationPlan', @level2type=N'COLUMN', @level2name=N'EducationPlanTypeId'
GO

-- Extended Properties [edfi].[StudentSchoolAttendanceEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance for a school day.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSchoolAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentTypeId'
GO

-- Extended Properties [edfi].[StudentSectionAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association indicates the course sections to which a student is assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the Student''s entry or assignment to the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Month, day, and year of the withdrawal or exit of the Student from the Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'EndDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates the Section is the student''s homeroom. Homeroom period may the convention for taking daily attendance.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'HomeroomIndicator'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication as to whether a student has previously taken a given course.
        Repeated, counted in grade point average
        Repeated, not counted in grade point average
        Not repeated
        Other.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'RepeatIdentifierTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates that the student-section combination is excluded from calculation of value-added or growth attribution calculations used for a particular teacher evaluation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAssociation', @level2type=N'COLUMN', @level2name=N'TeacherStudentDataLinkExclusion'
GO

-- Extended Properties [edfi].[StudentSectionAttendanceEvent] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This event entity represents the recording of whether a student is in attendance for a section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique number or alphanumeric code assigned to a room by a school, school system, state, or other agency or entity.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ClassroomIdentificationCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to a school by the State Education Agency (SEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the portion of a typical daily session in which students receive instruction in a specified subject (e.g., morning, sixth period, block period, or AB schedules).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'ClassPeriodName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The local code assigned by the School that identifies the course offering provided for the instruction of students.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'LocalCourseCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier for the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SchoolYear'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The term for the Session during the school year.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier for the Section that is defined by the classroom, the subjects taught, and the instructors who are assigned.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'UniqueSectionCode'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'When a section is part of a sequence of parts for a course, the number of the sequence. If the course has only one part, the value of this section attribute should be 1.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'SequenceOfCourse'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Date for this attendance event.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EventDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A code describing the attendance event, for example:
        Present
        Unexcused absence
        Excused absence
        Tardy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventCategoryDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The reported reason for a student''s absence.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'AttendanceEventReason'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The setting in which a child receives education and related services. This attribute is only used if it differs from the EducationalEnvironment of the Section. This is only used in the AttendanceEvent if different from the associated Section.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSectionAttendanceEvent', @level2type=N'COLUMN', @level2name=N'EducationalEnvironmentTypeId'
GO

-- Extended Properties [edfi].[StudentSpecialEducationProgramAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the special education program(s) that a student participates in or receives services from. The association is an extension of the StudentProgramAssociation particular for special education programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicator of the eligibility of the student to receive special education services according to the Individuals with Disabilities Education Act (IDEA).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IdeaEligibility'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The major instructional setting (more than 50 percent of a student''s special education program).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'SpecialEducationSettingDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The number of hours per week for special education instruction and therapy.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'SpecialEducationHoursPerWeek'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicate the total number of hours of instructional time per week for the school that the student attends.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'SchoolHoursPerWeek'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether the Student receiving special education and related services has been designated as multiply disabled by the admission, review, and dismissal committee as aligned with federal requirements.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'MultiplyDisabled'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Indicates whether the Student receiving special education and related services is:
        1) in the age range of birth to 22 years, and
        2) has a serious, ongoing illness or a chronic condition that has lasted or is anticipated to last at least 12 or more months or has required at least one month of hospitalization, and that requires daily, ongoing medical treatments and monitoring by appropriately trained personnel which may include parents or other family members, and
        3) requires the routine use of medical device or of assistive technology to compensate for the loss of usefulness of a body function needed to participate in activities of daily living, and
        4) lives with ongoing threat to his or her continued well-being.
        Aligns with federal requirements.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'MedicallyFragile'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the last special education evaluation.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'LastEvaluationDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The date of the last IEP review.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IEPReviewDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The effective date of the most recent IEP.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IEPBeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The end date of the most recent IEP.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociation', @level2type=N'COLUMN', @level2name=N'IEPEndDate'
GO

-- Extended Properties [edfi].[StudentSpecialEducationProgramAssociationServiceProvider] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Staff providing special education services to the Student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a staff.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'StaffUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Primary ServiceProvider.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentSpecialEducationProgramAssociationServiceProvider', @level2type=N'COLUMN', @level2name=N'PrimaryProvider'
GO

-- Extended Properties [edfi].[StudentTelephone] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The 10-digit telephone number, including the area code, for the person.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTelephone'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an individual or organization.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumberTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The telephone number including the area code, and extension, if applicable.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'TelephoneNumber'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'OrderOfPriority'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTelephone', @level2type=N'COLUMN', @level2name=N'TextMessageCapabilityIndicator'
GO

-- Extended Properties [edfi].[StudentTitleIPartAProgramAssociation] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This association represents the Title I Part A program(s) that a student participates in or from which the Student receives services. The association is an extension of the StudentProgramAssociation particular for Title I Part A programs.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'EducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The formal name of the Program of instruction, training, services, or benefits available through federal, state, or local agencies.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramName'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The identifier assigned to an education agency by the State Education Agency (SEA).  Also known as the State LEA ID.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'ProgramEducationOrganizationId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The month, day, and year on which the Student first received services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'BeginDate'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the type of Title I program, if any, in which the student is participating and by which the student is served:
        Public Targeted Assistance Program 
        Public Schoolwide Program
        Private School Students Participating
        Local Neglected Program.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentTitleIPartAProgramAssociation', @level2type=N'COLUMN', @level2name=N'TitleIPartAParticipantTypeId'
GO

-- Extended Properties [edfi].[StudentVisa] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentVisa'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique alphanumeric code assigned to a student.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentVisa', @level2type=N'COLUMN', @level2name=N'StudentUSI'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-US citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'StudentVisa', @level2type=N'COLUMN', @level2name=N'VisaTypeId'
GO

-- Extended Properties [edfi].[TeachingCredentialBasisType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the pre-determined criteria for granting the teaching credential that an individual holds.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialBasisType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for TeachingCredentialBasis', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialBasisType', @level2type=N'COLUMN', @level2name=N'TeachingCredentialBasisTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialBasisType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TeachingCredentialBasis type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialBasisType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TeachingCredentialBasis type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialBasisType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[TeachingCredentialDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines an indication of the category of a legal document giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN', @level2name=N'TeachingCredentialDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialDescriptor', @level2type=N'COLUMN', @level2name=N'TeachingCredentialTypeId'
GO

-- Extended Properties [edfi].[TeachingCredentialType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the category of a legal document giving authorization to perform teaching assignment services.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for TeachingCredential', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialType', @level2type=N'COLUMN', @level2name=N'TeachingCredentialTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TeachingCredential type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TeachingCredential type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TeachingCredentialType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[TelephoneNumberType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of communication number listed for an individual.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TelephoneNumberType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for TelephoneNumber', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TelephoneNumberType', @level2type=N'COLUMN', @level2name=N'TelephoneNumberTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TelephoneNumberType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TelephoneNumberType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TelephoneNumber type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TelephoneNumberType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[TermDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the term of a session during the school year (e.g., Fall Semester).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermDescriptor', @level2type=N'COLUMN', @level2name=N'TermDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermDescriptor', @level2type=N'COLUMN', @level2name=N'TermTypeId'
GO

-- Extended Properties [edfi].[TermType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The type of the session during the school year (e.g., Fall Semester).', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Term', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermType', @level2type=N'COLUMN', @level2name=N'TermTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Term type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Term type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TermType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[TitleIPartAParticipantType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indication of the type of Title I program, if any, in which the student is participating and served.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartAParticipantType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for TitleIPartAParticipant', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartAParticipantType', @level2type=N'COLUMN', @level2name=N'TitleIPartAParticipantTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartAParticipantType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TitleIPartAParticipant type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartAParticipantType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TitleIPartAParticipant type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartAParticipantType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[TitleIPartASchoolDesignationType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Denotes the Title I Part A designation for the school.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartASchoolDesignationType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for TitleIPartASchoolDesignation', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartASchoolDesignationType', @level2type=N'COLUMN', @level2name=N'TitleIPartASchoolDesignationTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartASchoolDesignationType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the TitleIPartASchoolDesignation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartASchoolDesignationType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the TitleIPartASchoolDesignation type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'TitleIPartASchoolDesignationType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[VisaType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'An indicator of a non-U.S. citizen''s Visa type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'VisaType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Visa', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'VisaType', @level2type=N'COLUMN', @level2name=N'VisaTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'VisaType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Visa type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'VisaType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Visa type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'VisaType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

-- Extended Properties [edfi].[WeaponDescriptor] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This descriptor defines the types of weapon used during an incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponDescriptor'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponDescriptor', @level2type=N'COLUMN', @level2name=N'WeaponDescriptorId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'A unique identifier used as Primary Key, not derived from business logic, when acting as Foreign Key, references the parent table.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponDescriptor', @level2type=N'COLUMN', @level2name=N'WeaponTypeId'
GO

-- Extended Properties [edfi].[WeaponType] --
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The category for the types of weapon used during an incident.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponType'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Key for Weapon', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponType', @level2type=N'COLUMN', @level2name=N'WeaponTypeId'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This column is deprecated.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponType', @level2type=N'COLUMN', @level2name=N'CodeValue'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The description for the Weapon type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponType', @level2type=N'COLUMN', @level2name=N'Description'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The value for the Weapon type.', @level0type=N'SCHEMA', @level0name=N'edfi', @level1type=N'TABLE', @level1name=N'WeaponType', @level2type=N'COLUMN', @level2name=N'ShortDescription'
GO

INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Attendance award', 'Attendance award')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Awarding of units of value', 'Awarding of units of value')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Certificate', 'Certificate')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Citizenship award/recognition', 'Citizenship award/recognition')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Completion of requirement, but no units of value awarded', 'Completion of requirement, but no units of value awarded')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honor award', 'Honor award')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honor roll', 'Honor roll')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honor society', 'Honor society')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honorable mention', 'Honorable mention')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honors program', 'Honors program')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Letter of student commendation', 'Letter of student commendation')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Medals', 'Medals')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'National Merit Scholar', 'National Merit Scholar')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Points', 'Points')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Prize awards', 'Prize awards')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion or advancement', 'Promotion or advancement')
GO
INSERT INTO [edfi].[AcademicHonorCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Scholarships', 'Scholarships')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education', 'Career and Technical Education')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Composite', 'Composite')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Critical Reading', 'Critical Reading')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'English', 'English')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'English Language Arts', 'English Language Arts')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fine and Performing Arts', 'Fine and Performing Arts')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foreign Language and Literature', 'Foreign Language and Literature')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Life and Physical Sciences', 'Life and Physical Sciences')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mathematics', 'Mathematics')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Military Science', 'Military Science')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Physical, Health, and Safety Education', 'Physical, Health, and Safety Education')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reading', 'Reading')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Religious Education and Theology', 'Religious Education and Theology')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Science', 'Science')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Social Sciences and History', 'Social Sciences and History')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Social Studies', 'Social Studies')
GO
INSERT INTO [edfi].[AcademicSubjectType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Writing', 'Writing')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', '504 accommodation', '504 accommodation')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'English language learner accommodation', 'English language learner accommodation')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Scheduling accommodation', 'Scheduling accommodation')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Settings accommodation', 'Settings accommodation')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student equipment/technology', 'Student equipment/technology')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Test administration accommodation', 'Test administration accommodation')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Test material accommodation', 'Test material accommodation')
GO
INSERT INTO [edfi].[AccommodationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Test response accommodation', 'Test response accommodation')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Academic Honor', 'Academic Honor')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Certificate Earned', 'Certificate Earned')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Competency Mastered', 'Competency Mastered')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Competency Retained', 'Competency Retained')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Course Completed', 'Course Completed')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Diploma Earned', 'Diploma Earned')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Level Completed', 'Level Completed')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'License Earned', 'License Earned')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'License Endorsement Earned', 'License Endorsement Earned')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Non-Academic Honor', 'Non-Academic Honor')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Participation', 'Participation')
GO
INSERT INTO [edfi].[AchievementCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Recognition', 'Recognition')
GO
INSERT INTO [edfi].[AdditionalCreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Advanced Placement', 'Advanced Placement')
GO
INSERT INTO [edfi].[AdditionalCreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education', 'Career and Technical Education')
GO
INSERT INTO [edfi].[AdditionalCreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Dual credit', 'Dual credit')
GO
INSERT INTO [edfi].[AdditionalCreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'International Baccalaureate', 'International Baccalaureate')
GO
INSERT INTO [edfi].[AdditionalCreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Billing', 'Billing')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Doubled - up (i.e., living with another family)', 'Doubled - up (i.e., living with another family)')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Father Address', 'Father Address')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Guardian Address', 'Guardian Address')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Home', 'Home')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Hotels/Motels', 'Hotels/Motels')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mailing', 'Mailing')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mother Address', 'Mother Address')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Physical', 'Physical')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Shelters, Transitional housing, Awaiting Foster Care', 'Shelters, Transitional housing, Awaiting Foster Care')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Shipping', 'Shipping')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Temporary', 'Temporary')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unsheltered (e.g. cars, parks, campgrounds, temporary trailers including FEMA trailers, or abandoned buildings)', 'Unsheltered (e.g. cars, parks, campgrounds, temporary trailers including FEMA trailers, or abandoned buildings)')
GO
INSERT INTO [edfi].[AddressType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Work', 'Work')
GO
INSERT INTO [edfi].[AdministrationEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Classroom', 'Classroom')
GO
INSERT INTO [edfi].[AdministrationEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[AdministrationEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Testing Center', 'Testing Center')
GO
INSERT INTO [edfi].[AdministrativeFundingControlType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AdministrativeFundingControlType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Private School', 'Private School')
GO
INSERT INTO [edfi].[AdministrativeFundingControlType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Public School', 'Public School')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Achievement test', 'Achievement test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Advanced Placement', 'Advanced Placement')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alternate assessment/ELL', 'Alternate assessment/ELL')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alternate assessment/grade-level standards', 'Alternate assessment/grade-level standards')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alternative assessment/modified standards', 'Alternative assessment/modified standards')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Aptitude test', 'Aptitude test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Attitudinal test', 'Attitudinal test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Benchmark test', 'Benchmark test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Class quiz', 'Class quiz')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Class test', 'Class test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Cognitive and perceptual skills test', 'Cognitive and perceptual skills test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College entrance exam', 'College entrance exam')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Developmental observation', 'Developmental observation')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Diagnostic', 'Diagnostic')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Learning - Approaches toward learning', 'Early Learning - Approaches toward learning')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Learning - Cognition and general knowledge', 'Early Learning - Cognition and general knowledge')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Learning - Language and literacy development', 'Early Learning - Language and literacy development')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Learning - Physical well-being and motor development', 'Early Learning - Physical well-being and motor development')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Learning - Social and emotional development', 'Early Learning - Social and emotional development')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'English proficiency screening test', 'English proficiency screening test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foreign language proficiency test', 'Foreign language proficiency test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Formative', 'Formative')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Interest inventory', 'Interest inventory')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Interim', 'Interim')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'International Baccalaureate', 'International Baccalaureate')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Language proficiency test', 'Language proficiency test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Manual dexterity test', 'Manual dexterity test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mental ability (intelligence) test', 'Mental ability (intelligence) test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Performance assessment', 'Performance assessment')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Personality test', 'Personality test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Portfolio assessment', 'Portfolio assessment')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Prekindergarten Readiness', 'Prekindergarten Readiness')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Psychological test', 'Psychological test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Psychomotor test', 'Psychomotor test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reading readiness test', 'Reading readiness test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State alternate assessment/ELL', 'State alternate assessment/ELL')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State alternative assessment/grade-level standards', 'State alternative assessment/grade-level standards')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State alternative assessment/modified standards', 'State alternative assessment/modified standards')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State assessment', 'State assessment')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State English proficiency test', 'State English proficiency test')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State high school course assessment', 'State high school course assessment')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State high school subject assessment', 'State high school subject assessment')
GO
INSERT INTO [edfi].[AssessmentCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State summative assessment 3-8 general', 'State summative assessment 3-8 general')
GO
INSERT INTO [edfi].[AssessmentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'District', 'District')
GO
INSERT INTO [edfi].[AssessmentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Federal', 'Federal')
GO
INSERT INTO [edfi].[AssessmentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AssessmentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Federal', 'Other Federal')
GO
INSERT INTO [edfi].[AssessmentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[AssessmentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State', 'State')
GO
INSERT INTO [edfi].[AssessmentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Test Contractor', 'Test Contractor')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Analytic', 'Analytic')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Essay', 'Essay')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fill-in-the-blank', 'Fill-in-the-blank')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Innovative', 'Innovative')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Labeling', 'Labeling')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'List Question', 'List Question')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Matching', 'Matching')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Math Matrix', 'Math Matrix')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Multiple-choice', 'Multiple-choice')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other constructed response', 'Other constructed response')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other extended response', 'Other extended response')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Performance task', 'Performance task')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Prose', 'Prose')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reordering', 'Reordering')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Rubric', 'Rubric')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Short answer', 'Short answer')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Show your work', 'Show your work')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Substitution', 'Substitution')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'True-False', 'True-False')
GO
INSERT INTO [edfi].[AssessmentItemCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Visual representation', 'Visual representation')
GO
INSERT INTO [edfi].[AssessmentItemResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Above Standard', 'Above Standard')
GO
INSERT INTO [edfi].[AssessmentItemResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Below Standard', 'Below Standard')
GO
INSERT INTO [edfi].[AssessmentItemResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Correct', 'Correct')
GO
INSERT INTO [edfi].[AssessmentItemResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Incorrect', 'Incorrect')
GO
INSERT INTO [edfi].[AssessmentItemResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Met Standard', 'Met Standard')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Achievement/proficiency level', 'Achievement/proficiency level')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'ACT score', 'ACT score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Adaptive scale score', 'Adaptive scale score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Age score', 'Age score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'C-scaled scores', 'C-scaled scores')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Board examination scores', 'College Board examination scores')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Composite Rating', 'Composite Rating')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Composite Score', 'Composite Score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Composition Score', 'Composition Score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Grade equivalent or grade-level indicator', 'Grade equivalent or grade-level indicator')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Graduation score', 'Graduation score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Growth/value-added/indexing', 'Growth/value-added/indexing')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'International Baccalaureate score', 'International Baccalaureate score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Letter grade/mark', 'Letter grade/mark')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Lexile Measure', 'Lexile Measure')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mastery level', 'Mastery level')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'National College-Bound Percentile', 'National College-Bound Percentile')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Normal curve equivalent', 'Normal curve equivalent')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Normalized standard score', 'Normalized standard score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not applicable', 'Not applicable')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Number score', 'Number score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Pass-fail', 'Pass-fail')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Percentile', 'Percentile')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Percentile rank', 'Percentile rank')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Proficiency level', 'Proficiency level')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion score', 'Promotion score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Quantile Measure', 'Quantile Measure')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ranking', 'Ranking')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ratio IQ''s', 'Ratio IQ''s')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Raw score', 'Raw score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'RIT scale score', 'RIT scale score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Scale score', 'Scale score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Standard age score', 'Standard age score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Standard error measurement', 'Standard error measurement')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Stanine score', 'Stanine score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State College-Bound Percentile', 'State College-Bound Percentile')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sten score', 'Sten score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'T-score', 'T-score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Theta', 'Theta')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Vertical Scale Score', 'Vertical Scale Score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Vertical score', 'Vertical score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Workplace readiness score', 'Workplace readiness score')
GO
INSERT INTO [edfi].[AssessmentReportingMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Z-score', 'Z-score')
GO
INSERT INTO [edfi].[AttendanceEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early departure', 'Early departure')
GO
INSERT INTO [edfi].[AttendanceEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Excused Absence', 'Excused Absence')
GO
INSERT INTO [edfi].[AttendanceEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'In Attendance', 'In Attendance')
GO
INSERT INTO [edfi].[AttendanceEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Tardy', 'Tardy')
GO
INSERT INTO [edfi].[AttendanceEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unexcused Absence', 'Unexcused Absence')
GO
INSERT INTO [edfi].[BehaviorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[BehaviorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School Code of Conduct', 'School Code of Conduct')
GO
INSERT INTO [edfi].[BehaviorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School Violation', 'School Violation')
GO
INSERT INTO [edfi].[BehaviorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State Offense', 'State Offense')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Emergency day', 'Emergency day')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Holiday', 'Holiday')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Instructional day', 'Instructional day')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Make-up day', 'Make-up day')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Strike', 'Strike')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student late arrival/early dismissal', 'Student late arrival/early dismissal')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Teacher only day', 'Teacher only day')
GO
INSERT INTO [edfi].[CalendarEventType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Weather day', 'Weather day')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Agriculture, Food and Natural Resources', 'Agriculture, Food and Natural Resources')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Architecture and Construction', 'Architecture and Construction')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Arts, A/V Technology and Communications', 'Arts, A/V Technology and Communications')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Business, Management and Administration', 'Business, Management and Administration')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Education and Training', 'Education and Training')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Finance', 'Finance')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Government and Public Administration', 'Government and Public Administration')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Health Science', 'Health Science')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Hospitality and Tourism', 'Hospitality and Tourism')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Human Services', 'Human Services')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Information Technology', 'Information Technology')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Law, Public Safety, Corrections and Security', 'Law, Public Safety, Corrections and Security')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Manufacturing', 'Manufacturing')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Marketing, Sales and Service', 'Marketing, Sales and Service')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Science, Technology, Engineering and Mathematics', 'Science, Technology, Engineering and Mathematics')
GO
INSERT INTO [edfi].[CareerPathwayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Transportation, Distribution and Logistics', 'Transportation, Distribution and Logistics')
GO
INSERT INTO [edfi].[CharterApprovalAgencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CharterApprovalAgencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Public charter school board', 'Public charter school board')
GO
INSERT INTO [edfi].[CharterApprovalAgencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State board of education', 'State board of education')
GO
INSERT INTO [edfi].[CharterApprovalAgencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'University', 'University')
GO
INSERT INTO [edfi].[CharterStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College/University Charter', 'College/University Charter')
GO
INSERT INTO [edfi].[CharterStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not a Charter School', 'Not a Charter School')
GO
INSERT INTO [edfi].[CharterStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Open Enrollment', 'Open Enrollment')
GO
INSERT INTO [edfi].[CharterStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School Charter', 'School Charter')
GO
INSERT INTO [edfi].[CitizenshipStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Non-resident alien', 'Non-resident alien')
GO
INSERT INTO [edfi].[CitizenshipStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Permanent resident', 'Permanent resident')
GO
INSERT INTO [edfi].[CitizenshipStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Refugee', 'Refugee')
GO
INSERT INTO [edfi].[CitizenshipStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Resident alien', 'Resident alien')
GO
INSERT INTO [edfi].[CitizenshipStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'US Citizen', 'US Citizen')
GO
INSERT INTO [edfi].[ClassroomPositionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Assistant Teacher', 'Assistant Teacher')
GO
INSERT INTO [edfi].[ClassroomPositionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Substitute Teacher', 'Substitute Teacher')
GO
INSERT INTO [edfi].[ClassroomPositionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Support Teacher', 'Support Teacher')
GO
INSERT INTO [edfi].[ClassroomPositionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Teacher of Record', 'Teacher of Record')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Classroom', 'Classroom')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Counselor', 'Counselor')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'District', 'District')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Network', 'Network')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Principal', 'Principal')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Statewide', 'Statewide')
GO
INSERT INTO [edfi].[CohortScopeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Teacher', 'Teacher')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Academic Intervention', 'Academic Intervention')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Attendance Intervention', 'Attendance Intervention')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Classroom Pullout', 'Classroom Pullout')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Counselor List', 'Counselor List')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Discipline Intervention', 'Discipline Intervention')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Extracurricular Activity', 'Extracurricular Activity')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Field Trip', 'Field Trip')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'In-school Suspension', 'In-school Suspension')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Principal Watch List', 'Principal Watch List')
GO
INSERT INTO [edfi].[CohortType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Study Hall', 'Study Hall')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Eighth grade', 'Eighth grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Eleventh grade', 'Eleventh grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fifth grade', 'Fifth grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'First grade', 'First grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fourth grade', 'Fourth grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ninth grade', 'Ninth grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Second grade', 'Second grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Seventh grade', 'Seventh grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sixth grade', 'Sixth grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Tenth grade', 'Tenth grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Third grade', 'Third grade')
GO
INSERT INTO [edfi].[CohortYearType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Twelfth grade', 'Twelfth grade')
GO
INSERT INTO [edfi].[ContentClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Education Research', 'Education Research')
GO
INSERT INTO [edfi].[ContentClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Presentation', 'Presentation')
GO
INSERT INTO [edfi].[ContentClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Vendor Intervention Offering', 'Vendor Intervention Offering')
GO
INSERT INTO [edfi].[ContentClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Video', 'Video')
GO
INSERT INTO [edfi].[ContentClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Written Activity', 'Written Activity')
GO
INSERT INTO [edfi].[ContinuationOfServicesReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ceased to be migratory during previous school term and no comparable services are available', 'Ceased to be migratory during previous school term and no comparable services are available')
GO
INSERT INTO [edfi].[ContinuationOfServicesReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ceased to be migratory during school term', 'Ceased to be migratory during school term')
GO
INSERT INTO [edfi].[ContinuationOfServicesReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Previously migratory secondary student continuing secondary school credit accrual', 'Previously migratory secondary student continuing secondary school credit accrual')
GO
INSERT INTO [edfi].[CostRateType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Flat Fee', 'Flat Fee')
GO
INSERT INTO [edfi].[CostRateType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Per Student', 'Per Student')
GO
INSERT INTO [edfi].[CourseAttemptResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fail', 'Fail')
GO
INSERT INTO [edfi].[CourseAttemptResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Incomplete', 'Incomplete')
GO
INSERT INTO [edfi].[CourseAttemptResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Pass', 'Pass')
GO
INSERT INTO [edfi].[CourseAttemptResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Withdrawn', 'Withdrawn')
GO
INSERT INTO [edfi].[CourseDefinedByType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LEA', 'LEA')
GO
INSERT INTO [edfi].[CourseDefinedByType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'National Organization', 'National Organization')
GO
INSERT INTO [edfi].[CourseDefinedByType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[CourseDefinedByType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SEA', 'SEA')
GO
INSERT INTO [edfi].[CourseGPAApplicabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Applicable', 'Applicable')
GO
INSERT INTO [edfi].[CourseGPAApplicabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not Applicable', 'Not Applicable')
GO
INSERT INTO [edfi].[CourseGPAApplicabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Weighted', 'Weighted')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'CSSC course code', 'CSSC course code')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Intermediate agency course code', 'Intermediate agency course code')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LEA course code', 'LEA course code')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NCES Pilot SNCCS course code', 'NCES Pilot SNCCS course code')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SCED course code', 'SCED course code')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School course code', 'School course code')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State course code', 'State course code')
GO
INSERT INTO [edfi].[CourseIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'University course code', 'University course code')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Accepted as high school equivalent', 'Accepted as high school equivalent')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Advanced', 'Advanced')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Advanced Placement', 'Advanced Placement')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Basic', 'Basic')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education', 'Career and Technical Education')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College-level', 'College-level')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Core Subject', 'Core Subject')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Correspondence', 'Correspondence')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Distance Learning', 'Distance Learning')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Dual Credit', 'Dual Credit')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'English Language Learner', 'English Language Learner')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'General', 'General')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Gifted and Talented', 'Gifted and Talented')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Graduation Credit', 'Graduation Credit')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honors', 'Honors')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'International Baccalaureate', 'International Baccalaureate')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Magnet', 'Magnet')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Pre-AP', 'Pre-AP')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Pre-IB', 'Pre-IB')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Remedial', 'Remedial')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Students with disabilities', 'Students with disabilities')
GO
INSERT INTO [edfi].[CourseLevelCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Untracked', 'Untracked')
GO
INSERT INTO [edfi].[CourseRepeatCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not Counted Other', 'Not Counted Other')
GO
INSERT INTO [edfi].[CourseRepeatCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Repeat Counted', 'Repeat Counted')
GO
INSERT INTO [edfi].[CourseRepeatCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Repeat NotCounted', 'Repeat NotCounted')
GO
INSERT INTO [edfi].[CourseRepeatCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Repeat Other Institution', 'Repeat Other Institution')
GO
INSERT INTO [edfi].[CourseRepeatCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Replaced NotCounted', 'Replaced NotCounted')
GO
INSERT INTO [edfi].[CourseRepeatCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Replacement Counted', 'Replacement Counted')
GO
INSERT INTO [edfi].[CredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Certification', 'Certification')
GO
INSERT INTO [edfi].[CredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Endorsement', 'Endorsement')
GO
INSERT INTO [edfi].[CredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Licensure', 'Licensure')
GO
INSERT INTO [edfi].[CredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Registration', 'Registration')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Adult education credit', 'Adult education credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education credit', 'Career and Technical Education credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Carnegie unit', 'Carnegie unit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Converted occupational experience credit', 'Converted occupational experience credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Correspondence credit', 'Correspondence credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Credit by examination', 'Credit by examination')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Intersession hour credit', 'Intersession hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Long session hour credit', 'Long session hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mini-term hour credit', 'Mini-term hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nine month year hour credit', 'Nine month year hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Quarter hour credit', 'Quarter hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Quinmester hour credit', 'Quinmester hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Semester hour credit', 'Semester hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Summer term hour credit', 'Summer term hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Trimester hour credit', 'Trimester hour credit')
GO
INSERT INTO [edfi].[CreditType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Twelve month year hour credit', 'Twelve month year hour credit')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Creative curriculum family child care', 'Creative curriculum family child care')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Creative curriculum infants/toddlers', 'Creative curriculum infants/toddlers')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Creative curriculum preschool', 'Creative curriculum preschool')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Highscope infants/toddlers', 'Highscope infants/toddlers')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Highscope preschoolers', 'Highscope preschoolers')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Locally designed curriculum', 'Locally designed curriculum')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Montessori curriculum', 'Montessori curriculum')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'None', 'None')
GO
INSERT INTO [edfi].[CurriculumUsedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other curriculum', 'Other curriculum')
GO
INSERT INTO [edfi].[DeliveryMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Individual', 'Individual')
GO
INSERT INTO [edfi].[DeliveryMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Small Group', 'Small Group')
GO
INSERT INTO [edfi].[DeliveryMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Whole Class', 'Whole Class')
GO
INSERT INTO [edfi].[DeliveryMethodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Whole School', 'Whole School')
GO
INSERT INTO [edfi].[DiagnosisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Dropout Risk', 'Dropout Risk')
GO
INSERT INTO [edfi].[DiagnosisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Low Attendance', 'Low Attendance')
GO
INSERT INTO [edfi].[DiplomaLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Cum laude', 'Cum laude')
GO
INSERT INTO [edfi].[DiplomaLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Distinguished', 'Distinguished')
GO
INSERT INTO [edfi].[DiplomaLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Magna cum laude', 'Magna cum laude')
GO
INSERT INTO [edfi].[DiplomaLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Minimum', 'Minimum')
GO
INSERT INTO [edfi].[DiplomaLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Open Enrollment', 'Open Enrollment')
GO
INSERT INTO [edfi].[DiplomaLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Recommended', 'Recommended')
GO
INSERT INTO [edfi].[DiplomaLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Summa cum laude', 'Summa cum laude')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alternative credential', 'Alternative credential')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Apprenticeship Certificate', 'Apprenticeship Certificate')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education certificate', 'Career and Technical Education certificate')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Certificate of attendance', 'Certificate of attendance')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Certificate of completion', 'Certificate of completion')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Endorsed/advanced diploma', 'Endorsed/advanced diploma')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'General Educational Development (GED) credential', 'General Educational Development (GED) credential')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'High school equivalency credential, other than GED', 'High school equivalency credential, other than GED')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Industry-recognized Certification', 'Industry-recognized Certification')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'International Baccalaureate', 'International Baccalaureate')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Modified diploma', 'Modified diploma')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Occupational License', 'Occupational License')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other diploma', 'Other diploma')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Post graduate certificate (grade 13)', 'Post graduate certificate (grade 13)')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Regents diploma', 'Regents diploma')
GO
INSERT INTO [edfi].[DiplomaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Regular diploma', 'Regular diploma')
GO
INSERT INTO [edfi].[DisabilityCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Individuals with Disabilities Education Act', 'Individuals with Disabilities Education Act')
GO
INSERT INTO [edfi].[DisabilityCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[DisabilityCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Section 504', 'Section 504')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'By health care provider', 'By health care provider')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'By licensed physical therapist', 'By licensed physical therapist')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'By physician', 'By physician')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'By school psychologist or other psychologist', 'By school psychologist or other psychologist')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'By social service or other type of agency', 'By social service or other type of agency')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not applicable to the student', 'Not applicable to the student')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Self-reported', 'Self-reported')
GO
INSERT INTO [edfi].[DisabilityDeterminationSourceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown or Unreported', 'Unknown or Unreported')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Autism Spectrum Disorders', 'Autism Spectrum Disorders')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Deaf-Blindness', 'Deaf-Blindness')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Hearing Impairment, including Deafness', 'Hearing Impairment, including Deafness')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Infant/Toddler with a Disability', 'Infant/Toddler with a Disability')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Intellectual Disability', 'Intellectual Disability')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Medical condition', 'Medical condition')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mental impairment', 'Mental impairment')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Motor impairment', 'Motor impairment')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Multiple Disabilities', 'Multiple Disabilities')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Orthopedic Impairment', 'Orthopedic Impairment')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Health Impairment', 'Other Health Impairment')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Physical Disability', 'Physical Disability')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Preschooler with a Disability', 'Preschooler with a Disability')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sensory impairment', 'Sensory impairment')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Serious Emotional Disability', 'Serious Emotional Disability')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Specific Learning Disability', 'Specific Learning Disability')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Speech or Language Impairment', 'Speech or Language Impairment')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Traumatic Brain Injury', 'Traumatic Brain Injury')
GO
INSERT INTO [edfi].[DisabilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Visual Impairment, including Blindness', 'Visual Impairment, including Blindness')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Continuation Of Previous Year''s Disciplinary Action Assignment', 'Continuation Of Previous Year''s Disciplinary Action Assignment')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'No Difference', 'No Difference')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School Year Ended', 'School Year Ended')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student Completed Term Requirements Sooner Than Expected', 'Student Completed Term Requirements Sooner Than Expected')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student Incarcerated', 'Student Incarcerated')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student Withdrew From School', 'Student Withdrew From School')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Term Decreased Due To Extenuating Health-Related Circumstances', 'Term Decreased Due To Extenuating Health-Related Circumstances')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Term Modified By Court Order', 'Term Modified By Court Order')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Term Modified By District', 'Term Modified By District')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Term Modified By Mutual Agreement', 'Term Modified By Mutual Agreement')
GO
INSERT INTO [edfi].[DisciplineActionLengthDifferenceReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Term Modified By Placement Program Due To Student Behavior While In The Placement', 'Term Modified By Placement Program Due To Student Behavior While In The Placement')
GO
INSERT INTO [edfi].[DisciplineType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Community Service', 'Community Service')
GO
INSERT INTO [edfi].[DisciplineType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Expulsion', 'Expulsion')
GO
INSERT INTO [edfi].[DisciplineType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Expulsion with Services', 'Expulsion with Services')
GO
INSERT INTO [edfi].[DisciplineType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'In School Suspension', 'In School Suspension')
GO
INSERT INTO [edfi].[DisciplineType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[DisciplineType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Out of School Suspension', 'Out of School Suspension')
GO
INSERT INTO [edfi].[DisciplineType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Removal from Classroom', 'Removal from Classroom')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Classroom', 'Classroom')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Homebound', 'Homebound')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Hospital class', 'Hospital class')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'In-school suspension', 'In-school suspension')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Laboratory', 'Laboratory')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mainstream (Special Education)', 'Mainstream (Special Education)')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Off-school center', 'Off-school center')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Pull-out class', 'Pull-out class')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Resource room', 'Resource room')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Self-contained (Special Education)', 'Self-contained (Special Education)')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Self-study', 'Self-study')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Shop', 'Shop')
GO
INSERT INTO [edfi].[EducationalEnvironmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Single sex classroom', 'Single sex classroom')
GO
INSERT INTO [edfi].[EducationOrganizationCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Education Organization Network', 'Education Organization Network')
GO
INSERT INTO [edfi].[EducationOrganizationCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Education Service Center', 'Education Service Center')
GO
INSERT INTO [edfi].[EducationOrganizationCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Local Education Agency', 'Local Education Agency')
GO
INSERT INTO [edfi].[EducationOrganizationCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[EducationOrganizationCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[EducationOrganizationCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State Education Agency', 'State Education Agency')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'ACT', 'ACT')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'DUNS', 'DUNS')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Federal', 'Federal')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'IPEDS', 'IPEDS')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LEA', 'LEA')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NCES', 'NCES')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Federal', 'Other Federal')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SEA', 'SEA')
GO
INSERT INTO [edfi].[EducationOrganizationIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'USDE - OPE', 'USDE - OPE')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', '504 Plan', '504 Plan')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career Pathways', 'Career Pathways')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career Suggestions', 'Career Suggestions')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Completion and Reach Age 22', 'Completion and Reach Age 22')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Employability Skills', 'Employability Skills')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Full Time Employment', 'Full Time Employment')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'High School Education Plan', 'High School Education Plan')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'IDEA IEP', 'IDEA IEP')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Outside Service Access', 'Outside Service Access')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Personal Graduation Plan', 'Personal Graduation Plan')
GO
INSERT INTO [edfi].[EducationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student Success Plan', 'Student Success Plan')
GO
INSERT INTO [edfi].[ElectronicMailType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Home/Personal', 'Home/Personal')
GO
INSERT INTO [edfi].[ElectronicMailType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Organization', 'Organization')
GO
INSERT INTO [edfi].[ElectronicMailType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ElectronicMailType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Work', 'Work')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Contractual', 'Contractual')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Employed or affiliated with outside agency part-time', 'Employed or affiliated with outside agency part-time')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Employed or affiliated with outside organization', 'Employed or affiliated with outside organization')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Employed part-time', 'Employed part-time')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Non-contractual', 'Non-contractual')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Probationary', 'Probationary')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Substitute/temporary', 'Substitute/temporary')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Tenured or permanent', 'Tenured or permanent')
GO
INSERT INTO [edfi].[EmploymentStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Volunteer/no contract', 'Volunteer/no contract')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonpromotion - Failed to meet testing requirements', 'Nonpromotion - Failed to meet testing requirements')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonpromotion - Illness', 'Nonpromotion - Illness')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonpromotion - Immaturity', 'Nonpromotion - Immaturity')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonpromotion - Inadequate performance', 'Nonpromotion - Inadequate performance')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonpromotion - Insufficient credits', 'Nonpromotion - Insufficient credits')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonpromotion - Other', 'Nonpromotion - Other')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonpromotion - Prolonged absence', 'Nonpromotion - Prolonged absence')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion - Accelerated promotion', 'Promotion - Accelerated promotion')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion - Continuous promotion', 'Promotion - Continuous promotion')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion - Other', 'Promotion - Other')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion - Probationary promotion', 'Promotion - Probationary promotion')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion - Regular promotion', 'Promotion - Regular promotion')
GO
INSERT INTO [edfi].[EntryGradeLevelReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion - Variable progress', 'Promotion - Variable progress')
GO
INSERT INTO [edfi].[EntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'New to education system', 'New to education system')
GO
INSERT INTO [edfi].[EntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Next year school', 'Next year school')
GO
INSERT INTO [edfi].[EntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[EntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Re-entry', 'Re-entry')
GO
INSERT INTO [edfi].[EntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Transfer', 'Transfer')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Administration or system failure', 'Administration or system failure')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Catastrophic illness or accident', 'Catastrophic illness or accident')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Cheating', 'Cheating')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Chronic absences', 'Chronic absences')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Cross-enrolled', 'Cross-enrolled')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Earlier truancy', 'Earlier truancy')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fire alarm', 'Fire alarm')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foreign exchange student', 'Foreign exchange student')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Home schooled for assessed subjects', 'Home schooled for assessed subjects')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Homebound', 'Homebound')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Incarcerated at adult facility', 'Incarcerated at adult facility')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Left testing', 'Left testing')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Long-term suspension - non-special education', 'Long-term suspension - non-special education')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Non-special education student used calculator on non-calculator items', 'Non-special education student used calculator on non-calculator items')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Only for writing', 'Only for writing')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other reason for ineligibility', 'Other reason for ineligibility')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other reason for nonparticipation', 'Other reason for nonparticipation')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Parent refusal', 'Parent refusal')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Psychological factors of emotional trauma', 'Psychological factors of emotional trauma')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reading passage read to student (IEP)', 'Reading passage read to student (IEP)')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Short-term suspension - non-special education', 'Short-term suspension - non-special education')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Special detention center', 'Special detention center')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Special treatment center', 'Special treatment center')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student not showing adequate effort', 'Student not showing adequate effort')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student refusal', 'Student refusal')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student took this grade level assessment last year', 'Student took this grade level assessment last year')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student used math journal (non-IEP)', 'Student used math journal (non-IEP)')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Suspension - special education', 'Suspension - special education')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Teacher cheating or mis-admin', 'Teacher cheating or mis-admin')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Truancy - no paperwork filed', 'Truancy - no paperwork filed')
GO
INSERT INTO [edfi].[EventCircumstanceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Truancy - paperwork filed', 'Truancy - paperwork filed')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Completed', 'Completed')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Died or is permanently incapacitated', 'Died or is permanently incapacitated')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Dropout', 'Dropout')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'End of school year', 'End of school year')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Enrolled in a high school diploma program', 'Enrolled in a high school diploma program')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Expelled', 'Expelled')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Graduated', 'Graduated')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Incarcerated', 'Incarcerated')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Invalid enrollment', 'Invalid enrollment')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Involuntarily Removed', 'Involuntarily Removed')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'No show', 'No show')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reached maximum age', 'Reached maximum age')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Transferred', 'Transferred')
GO
INSERT INTO [edfi].[ExitWithdrawType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Withdrawn', 'Withdrawn')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Activity', 'Activity')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Assignment', 'Assignment')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Classroom Assessment', 'Classroom Assessment')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Homework', 'Homework')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Lesson', 'Lesson')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Oral Presentation', 'Oral Presentation')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Quiz', 'Quiz')
GO
INSERT INTO [edfi].[GradebookEntryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unit Test', 'Unit Test')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Adult Education', 'Adult Education')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Education', 'Early Education')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Eighth grade', 'Eighth grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Eleventh grade', 'Eleventh grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fifth grade', 'Fifth grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'First grade', 'First grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fourth grade', 'Fourth grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Grade 13', 'Grade 13')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Infant/toddler', 'Infant/toddler')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Kindergarten', 'Kindergarten')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ninth grade', 'Ninth grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Postsecondary', 'Postsecondary')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Preschool/Prekindergarten', 'Preschool/Prekindergarten')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Second grade', 'Second grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Seventh grade', 'Seventh grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sixth grade', 'Sixth grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Tenth grade', 'Tenth grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Third grade', 'Third grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Twelfth grade', 'Twelfth grade')
GO
INSERT INTO [edfi].[GradeLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ungraded', 'Ungraded')
GO
INSERT INTO [edfi].[GradeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Conduct', 'Conduct')
GO
INSERT INTO [edfi].[GradeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Exam', 'Exam')
GO
INSERT INTO [edfi].[GradeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Final', 'Final')
GO
INSERT INTO [edfi].[GradeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Grading Period', 'Grading Period')
GO
INSERT INTO [edfi].[GradeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mid-Term Grade', 'Mid-Term Grade')
GO
INSERT INTO [edfi].[GradeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Progress Report', 'Progress Report')
GO
INSERT INTO [edfi].[GradeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Semester', 'Semester')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'End of Year', 'End of Year')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fifth Six Weeks', 'Fifth Six Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'First Nine Weeks', 'First Nine Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'First Semester', 'First Semester')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'First Six Weeks', 'First Six Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'First Summer Session', 'First Summer Session')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'First Trimester', 'First Trimester')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fourth Nine Weeks', 'Fourth Nine Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fourth Six Weeks', 'Fourth Six Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Second Nine Weeks', 'Second Nine Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Second Semester', 'Second Semester')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Second Six Weeks', 'Second Six Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Second Summer Session', 'Second Summer Session')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Second Trimester', 'Second Trimester')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sixth Six Weeks', 'Sixth Six Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Summer Semester', 'Summer Semester')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Third Nine Weeks', 'Third Nine Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Third Six Weeks', 'Third Six Weeks')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Third Summer Session', 'Third Summer Session')
GO
INSERT INTO [edfi].[GradingPeriodType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Third Trimester', 'Third Trimester')
GO
INSERT INTO [edfi].[GraduationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education', 'Career and Technical Education')
GO
INSERT INTO [edfi].[GraduationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Distinguished', 'Distinguished')
GO
INSERT INTO [edfi].[GraduationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Minimum', 'Minimum')
GO
INSERT INTO [edfi].[GraduationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Recommended', 'Recommended')
GO
INSERT INTO [edfi].[GraduationPlanType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Standard', 'Standard')
GO
INSERT INTO [edfi].[GunFreeSchoolsActReportingStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'No', 'No')
GO
INSERT INTO [edfi].[GunFreeSchoolsActReportingStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not applicable', 'Not applicable')
GO
INSERT INTO [edfi].[GunFreeSchoolsActReportingStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Yes, with no reported offenses', 'Yes, with no reported offenses')
GO
INSERT INTO [edfi].[GunFreeSchoolsActReportingStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Yes, with reporting of one or more students for an offense', 'Yes, with reporting of one or more students for an offense')
GO
INSERT INTO [edfi].[IdentificationDocumentUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foreign Citizenship Identification', 'Foreign Citizenship Identification')
GO
INSERT INTO [edfi].[IdentificationDocumentUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Personal Information Verification', 'Personal Information Verification')
GO
INSERT INTO [edfi].[IdentificationDocumentUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'US Citizenship Identification', 'US Citizenship Identification')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Administrative offices area', 'Administrative offices area')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Athletic field or playground', 'Athletic field or playground')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Auditorium', 'Auditorium')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Bus stop', 'Bus stop')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Cafeteria area', 'Cafeteria area')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Classroom', 'Classroom')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Computer lab', 'Computer lab')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Hallway or stairs', 'Hallway or stairs')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Library/media center', 'Library/media center')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Locker room or gym areas', 'Locker room or gym areas')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Off campus', 'Off campus')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Off-campus at a school sponsored activity', 'Off-campus at a school sponsored activity')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Off-campus at another location unrelated to school', 'Off-campus at another location unrelated to school')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Off-campus at other school', 'Off-campus at other school')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Off-campus at other school district facility', 'Off-campus at other school district facility')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'On campus', 'On campus')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'On-campus other inside area', 'On-campus other inside area')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'On-campus other outside area', 'On-campus other outside area')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Online', 'Online')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Parking lot', 'Parking lot')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Restroom', 'Restroom')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School bus', 'School bus')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Stadium', 'Stadium')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown', 'Unknown')
GO
INSERT INTO [edfi].[IncidentLocationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Walking to or from school', 'Walking to or from school')
GO
INSERT INTO [edfi].[InstitutionTelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Administrative', 'Administrative')
GO
INSERT INTO [edfi].[InstitutionTelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Attendance', 'Attendance')
GO
INSERT INTO [edfi].[InstitutionTelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fax', 'Fax')
GO
INSERT INTO [edfi].[InstitutionTelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Food Service', 'Food Service')
GO
INSERT INTO [edfi].[InstitutionTelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Health Clinic', 'Health Clinic')
GO
INSERT INTO [edfi].[InstitutionTelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Main', 'Main')
GO
INSERT INTO [edfi].[InstitutionTelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[IntegratedTechnologyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Approaching', 'Approaching')
GO
INSERT INTO [edfi].[IntegratedTechnologyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Developing', 'Developing')
GO
INSERT INTO [edfi].[IntegratedTechnologyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fully integrated', 'Fully integrated')
GO
INSERT INTO [edfi].[IntegratedTechnologyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Meets', 'Meets')
GO
INSERT INTO [edfi].[IntegratedTechnologyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not required to report', 'Not required to report')
GO
INSERT INTO [edfi].[InteractivityStyleType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Active', 'Active')
GO
INSERT INTO [edfi].[InteractivityStyleType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Expositive', 'Expositive')
GO
INSERT INTO [edfi].[InteractivityStyleType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mixed', 'Mixed')
GO
INSERT INTO [edfi].[InteractivityStyleType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[InternetAccessType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'High Speed', 'High Speed')
GO
INSERT INTO [edfi].[InternetAccessType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Less Than High Speed', 'Less Than High Speed')
GO
INSERT INTO [edfi].[InternetAccessType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'None', 'None')
GO
INSERT INTO [edfi].[InterventionClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Curriculum', 'Curriculum')
GO
INSERT INTO [edfi].[InterventionClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[InterventionClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Practice', 'Practice')
GO
INSERT INTO [edfi].[InterventionClassType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Supplement', 'Supplement')
GO
INSERT INTO [edfi].[InterventionEffectivenessRatingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mixed Effects', 'Mixed Effects')
GO
INSERT INTO [edfi].[InterventionEffectivenessRatingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Negative Effects', 'Negative Effects')
GO
INSERT INTO [edfi].[InterventionEffectivenessRatingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'No Discernible Effects', 'No Discernible Effects')
GO
INSERT INTO [edfi].[InterventionEffectivenessRatingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[InterventionEffectivenessRatingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Positive Effects', 'Positive Effects')
GO
INSERT INTO [edfi].[InterventionEffectivenessRatingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Potentially Negative Effects', 'Potentially Negative Effects')
GO
INSERT INTO [edfi].[InterventionEffectivenessRatingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Potentially Positive Effects', 'Potentially Positive Effects')
GO
INSERT INTO [edfi].[LanguageType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'English', 'English')
GO
INSERT INTO [edfi].[LanguageType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[LanguageType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Spanish', 'Spanish')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Correspondence language', 'Correspondence language')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Dominant language', 'Dominant language')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Home language', 'Home language')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Native language', 'Native language')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other language proficiency', 'Other language proficiency')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Spoken language', 'Spoken language')
GO
INSERT INTO [edfi].[LanguageUseType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Written language', 'Written language')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Administrative', 'Administrative')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Annual leave', 'Annual leave')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Bereavement', 'Bereavement')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Compensatory leave time', 'Compensatory leave time')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Family and medical leave', 'Family and medical leave')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Flex time', 'Flex time')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Government-requested', 'Government-requested')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Jury duty', 'Jury duty')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Military leave', 'Military leave')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Personal', 'Personal')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Professional development', 'Professional development')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Release time', 'Release time')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sabbatical leave', 'Sabbatical leave')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sick leave', 'Sick leave')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Suspension', 'Suspension')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Vacation', 'Vacation')
GO
INSERT INTO [edfi].[LeaveEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Work compensation', 'Work compensation')
GO
INSERT INTO [edfi].[LevelOfEducationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Associate''s Degree (two years or more)', 'Associate''s Degree (two years or more)')
GO
INSERT INTO [edfi].[LevelOfEducationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Bachelor''s', 'Bachelor''s')
GO
INSERT INTO [edfi].[LevelOfEducationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Did Not Graduate High School', 'Did Not Graduate High School')
GO
INSERT INTO [edfi].[LevelOfEducationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Doctorate', 'Doctorate')
GO
INSERT INTO [edfi].[LevelOfEducationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'High School Diploma', 'High School Diploma')
GO
INSERT INTO [edfi].[LevelOfEducationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Master''s', 'Master''s')
GO
INSERT INTO [edfi].[LevelOfEducationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Some College No Degree', 'Some College No Degree')
GO
INSERT INTO [edfi].[LimitedEnglishProficiencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Limited', 'Limited')
GO
INSERT INTO [edfi].[LimitedEnglishProficiencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Limited Monitored 1', 'Limited Monitored 1')
GO
INSERT INTO [edfi].[LimitedEnglishProficiencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Limited Monitored 2', 'Limited Monitored 2')
GO
INSERT INTO [edfi].[LimitedEnglishProficiencyType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NotLimited', 'NotLimited')
GO
INSERT INTO [edfi].[LocalEducationAgencyCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Charter', 'Charter')
GO
INSERT INTO [edfi].[LocalEducationAgencyCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Independent', 'Independent')
GO
INSERT INTO [edfi].[MagnetSpecialProgramEmphasisSchoolType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'All students participate', 'All students participate')
GO
INSERT INTO [edfi].[MagnetSpecialProgramEmphasisSchoolType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'No students participate', 'No students participate')
GO
INSERT INTO [edfi].[MagnetSpecialProgramEmphasisSchoolType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Some, but not all, students participate', 'Some, but not all, students participate')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Center-based instruction', 'Center-based instruction')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Correspondence instruction', 'Correspondence instruction')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Distance Learning (other than online)', 'Distance Learning (other than online)')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Face-to-face instruction', 'Face-to-face instruction')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Independent study', 'Independent study')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Internship', 'Internship')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other technology-based instruction', 'Other technology-based instruction')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Technology-based instruction in classroom', 'Technology-based instruction in classroom')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Telepresence/video conference', 'Telepresence/video conference')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Televised', 'Televised')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Videotaped/prerecorded video', 'Videotaped/prerecorded video')
GO
INSERT INTO [edfi].[MediumOfInstructionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Virtual/On-line Distance learning', 'Virtual/On-line Distance learning')
GO
INSERT INTO [edfi].[MeetingDayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Friday', 'Friday')
GO
INSERT INTO [edfi].[MeetingDayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Monday', 'Monday')
GO
INSERT INTO [edfi].[MeetingDayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Saturday', 'Saturday')
GO
INSERT INTO [edfi].[MeetingDayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sunday', 'Sunday')
GO
INSERT INTO [edfi].[MeetingDayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Thursday', 'Thursday')
GO
INSERT INTO [edfi].[MeetingDayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Tuesday', 'Tuesday')
GO
INSERT INTO [edfi].[MeetingDayType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Wednesday', 'Wednesday')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Classroom credit', 'Classroom credit')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Converted occupational experience credit', 'Converted occupational experience credit')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Correspondence credit', 'Correspondence credit')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Credit by examination', 'Credit by examination')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Credit recovery', 'Credit recovery')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Online credit', 'Online credit')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[MethodCreditEarnedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Transfer credit', 'Transfer credit')
GO
INSERT INTO [edfi].[NetworkPurposeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Collective Procurement', 'Collective Procurement')
GO
INSERT INTO [edfi].[NetworkPurposeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Shared Services', 'Shared Services')
GO
INSERT INTO [edfi].[OldEthnicityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'American Indian Or Alaskan Native', 'American Indian Or Alaskan Native')
GO
INSERT INTO [edfi].[OldEthnicityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Asian Or Pacific Islander', 'Asian Or Pacific Islander')
GO
INSERT INTO [edfi].[OldEthnicityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Black, Not Of Hispanic Origin', 'Black, Not Of Hispanic Origin')
GO
INSERT INTO [edfi].[OldEthnicityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Hispanic', 'Hispanic')
GO
INSERT INTO [edfi].[OldEthnicityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'White, Not Of Hispanic Origin', 'White, Not Of Hispanic Origin')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Active', 'Active')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Added', 'Added')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Changed Agency', 'Changed Agency')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Closed', 'Closed')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Continuing', 'Continuing')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Future', 'Future')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Inactive', 'Inactive')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'New', 'New')
GO
INSERT INTO [edfi].[OperationalStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reopened', 'Reopened')
GO
INSERT INTO [edfi].[OtherNameType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alias', 'Alias')
GO
INSERT INTO [edfi].[OtherNameType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nickname', 'Nickname')
GO
INSERT INTO [edfi].[OtherNameType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Name', 'Other Name')
GO
INSERT INTO [edfi].[OtherNameType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Previous Legal Name', 'Previous Legal Name')
GO
INSERT INTO [edfi].[PerformanceBaseConversionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Advanced', 'Advanced')
GO
INSERT INTO [edfi].[PerformanceBaseConversionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Basic', 'Basic')
GO
INSERT INTO [edfi].[PerformanceBaseConversionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Below Basic', 'Below Basic')
GO
INSERT INTO [edfi].[PerformanceBaseConversionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fail', 'Fail')
GO
INSERT INTO [edfi].[PerformanceBaseConversionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Pass', 'Pass')
GO
INSERT INTO [edfi].[PerformanceBaseConversionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Proficient', 'Proficient')
GO
INSERT INTO [edfi].[PerformanceBaseConversionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Well Below Basic', 'Well Below Basic')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Baptismal or church certificate', 'Baptismal or church certificate')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Birth certificate', 'Birth certificate')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Drivers license', 'Drivers license')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Entry in family Bible', 'Entry in family Bible')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Hospital certificate', 'Hospital certificate')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Immigration document/visa', 'Immigration document/visa')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Life insurance policy', 'Life insurance policy')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other non-official document', 'Other non-official document')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other official document', 'Other official document')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Parents affidavit', 'Parents affidavit')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Passport', 'Passport')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Physicians certificate', 'Physicians certificate')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Previously verified school records', 'Previously verified school records')
GO
INSERT INTO [edfi].[PersonalInformationVerificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State-issued ID', 'State-issued ID')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Adult Basic Education Students', 'Adult Basic Education Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Bilingual Students', 'Bilingual Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education Students', 'Career and Technical Education Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Compensatory/Remedial Education Students', 'Compensatory/Remedial Education Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Economic Disadvantaged', 'Economic Disadvantaged')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'ESL Students', 'ESL Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Gifted and Talented Students', 'Gifted and Talented Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honors Students', 'Honors Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Migrant Students', 'Migrant Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Regular Students', 'Regular Students')
GO
INSERT INTO [edfi].[PopulationServedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Special Education Students', 'Special Education Students')
GO
INSERT INTO [edfi].[PostingResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Position Filled', 'Position Filled')
GO
INSERT INTO [edfi].[PostingResultType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Posting Cancelled', 'Posting Cancelled')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Certification Received', 'Certification Received')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Acceptance', 'College Acceptance')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Application', 'College Application')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Degree Received', 'College Degree Received')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Enrollment', 'College Enrollment')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Exit Date', 'College Exit Date')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Selection', 'College Selection')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'FAFSA Application', 'FAFSA Application')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Remedial Enrollment - ELA', 'Remedial Enrollment - ELA')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Remedial Enrollment - Math', 'Remedial Enrollment - Math')
GO
INSERT INTO [edfi].[PostSecondaryEventCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student Interest', 'Student Interest')
GO
INSERT INTO [edfi].[PostSecondaryInstitutionLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'At least 2 but less than 4 years', 'At least 2 but less than 4 years')
GO
INSERT INTO [edfi].[PostSecondaryInstitutionLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Four or more years', 'Four or more years')
GO
INSERT INTO [edfi].[PostSecondaryInstitutionLevelType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Less than 2 years (below associate)', 'Less than 2 years (below associate)')
GO
INSERT INTO [edfi].[ProgramAssignmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Bilingual/English as a Second Language', 'Bilingual/English as a Second Language')
GO
INSERT INTO [edfi].[ProgramAssignmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ProgramAssignmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Regular Education', 'Regular Education')
GO
INSERT INTO [edfi].[ProgramAssignmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Special Education', 'Special Education')
GO
INSERT INTO [edfi].[ProgramAssignmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I-Academic', 'Title I-Academic')
GO
INSERT INTO [edfi].[ProgramAssignmentType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I-Non-Academic', 'Title I-Non-Academic')
GO
INSERT INTO [edfi].[ProgramCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'A McKinney-Vento Program for Homelessness', 'A McKinney-Vento Program for Homelessness')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Business', 'Business')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Education organization network', 'Education organization network')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Education Service Center', 'Education Service Center')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Federal government', 'Federal government')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Local Education Agency', 'Local Education Agency')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Non-profit organization', 'Non-profit organization')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Postsecondary institution', 'Postsecondary institution')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Private organization', 'Private organization')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Religious organization', 'Religious organization')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[ProgramSponsorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State Education Agency', 'State Education Agency')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Adult/Continuing Education', 'Adult/Continuing Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alternative Education', 'Alternative Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Athletics', 'Athletics')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Bilingual', 'Bilingual')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Bilingual Summer', 'Bilingual Summer')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education', 'Career and Technical Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Cocurricular Programs', 'Cocurricular Programs')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'College Preparatory', 'College Preparatory')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Community Service Program', 'Community Service Program')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Community/Junior College Education Program', 'Community/Junior College Education Program')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Compensatory Services for Disadvantaged Students', 'Compensatory Services for Disadvantaged Students')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Counseling Services', 'Counseling Services')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'District-Funded GED', 'District-Funded GED')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Head Start', 'Early Head Start')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Early Intervention Services Part C', 'Early Intervention Services Part C')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'English as a Second Language (ESL)', 'English as a Second Language (ESL)')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Even Start', 'Even Start')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Expelled Education', 'Expelled Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Extended Day/Child Care Services', 'Extended Day/Child Care Services')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fee For Service', 'Fee For Service')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foreign Exchange', 'Foreign Exchange')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Gifted and Talented', 'Gifted and Talented')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Head Start', 'Head Start')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Health Services Program', 'Health Services Program')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'High School Equivalency Program (HSEP)', 'High School Equivalency Program (HSEP)')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Home Visiting', 'Home Visiting')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'IDEA', 'IDEA')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Immigrant Education', 'Immigrant Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Independent Study', 'Independent Study')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Indian Education', 'Indian Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'International Baccalaureate', 'International Baccalaureate')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Kindergarten - Extended Day', 'Kindergarten - Extended Day')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Kindergarten - Full Day', 'Kindergarten - Full Day')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Kindergarten - Half Day', 'Kindergarten - Half Day')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Library/Media Services Program', 'Library/Media Services Program')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Magnet/Special Program Emphasis', 'Magnet/Special Program Emphasis')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Migrant Education', 'Migrant Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Neglected and Delinquent Program', 'Neglected and Delinquent Program')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Optional Flexible School Day Program (OFSDP)', 'Optional Flexible School Day Program (OFSDP)')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Prekindergarten - Extended Day', 'Prekindergarten - Extended Day')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Prekindergarten - Full Day', 'Prekindergarten - Full Day')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Prekindergarten - Half Day', 'Prekindergarten - Half Day')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Preschool Special Education', 'Preschool Special Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Public Preschool', 'Public Preschool')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Regular Education', 'Regular Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Remedial Education', 'Remedial Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Section 504 Placement', 'Section 504 Placement')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Service Learning', 'Service Learning')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Special Education', 'Special Education')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student Retention/Dropout Prevention', 'Student Retention/Dropout Prevention')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Substance Abuse Education/Prevention', 'Substance Abuse Education/Prevention')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Teacher Professional Development/Mentoring', 'Teacher Professional Development/Mentoring')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Technical Preparatory', 'Technical Preparatory')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I Part A', 'Title I Part A')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I Part D Subpart 1', 'Title I Part D Subpart 1')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I Part D Subpart 2', 'Title I Part D Subpart 2')
GO
INSERT INTO [edfi].[ProgramType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Vocational Education', 'Vocational Education')
GO
INSERT INTO [edfi].[PublicationStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Adopted', 'Adopted')
GO
INSERT INTO [edfi].[PublicationStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Deprecated', 'Deprecated')
GO
INSERT INTO [edfi].[PublicationStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Draft', 'Draft')
GO
INSERT INTO [edfi].[PublicationStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Published', 'Published')
GO
INSERT INTO [edfi].[PublicationStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown', 'Unknown')
GO
INSERT INTO [edfi].[RaceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'American Indian - Alaskan Native', 'American Indian - Alaskan Native')
GO
INSERT INTO [edfi].[RaceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Asian', 'Asian')
GO
INSERT INTO [edfi].[RaceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Black - African American', 'Black - African American')
GO
INSERT INTO [edfi].[RaceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Choose Not to Respond', 'Choose Not to Respond')
GO
INSERT INTO [edfi].[RaceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Native Hawaiian - Pacific Islander', 'Native Hawaiian - Pacific Islander')
GO
INSERT INTO [edfi].[RaceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[RaceType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'White', 'White')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Died or is permanently incapacitated', 'Died or is permanently incapacitated')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Discontinued schooling', 'Discontinued schooling')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Graduated with a high school diploma', 'Graduated with a high school diploma')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Moved out of state', 'Moved out of state')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reached maximum age', 'Reached maximum age')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Received certificate of completion, modified diploma, or finished IEP requirements', 'Received certificate of completion, modified diploma, or finished IEP requirements')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Suspended or expelled from school', 'Suspended or expelled from school')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Transferred to another district or school', 'Transferred to another district or school')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown reason', 'Unknown reason')
GO
INSERT INTO [edfi].[ReasonExitedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Withdrawal by a parent (or guardian)', 'Withdrawal by a parent (or guardian)')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Absent', 'Absent')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alternate assessment administered', 'Alternate assessment administered')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Disruptive behavior', 'Disruptive behavior')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foreign exchange student waiver', 'Foreign exchange student waiver')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LEP exempt', 'LEP exempt')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LEP postponement', 'LEP postponement')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Medical waiver', 'Medical waiver')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not appropriate (ARD decision)', 'Not appropriate (ARD decision)')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not tested (ARD decision)', 'Not tested (ARD decision)')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Parental waiver', 'Parental waiver')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Previously passed the examination', 'Previously passed the examination')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Refusal by parent', 'Refusal by parent')
GO
INSERT INTO [edfi].[ReasonNotTestedType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Refusal by student', 'Refusal by student')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Athletic awards', 'Athletic awards')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Awarding of units of value', 'Awarding of units of value')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Certificate', 'Certificate')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Citizenship award/recognition', 'Citizenship award/recognition')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Completion of requirement, but no units of value awarded', 'Completion of requirement, but no units of value awarded')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Honor award', 'Honor award')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Letter of commendation', 'Letter of commendation')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Medals', 'Medals')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Monogram/letter', 'Monogram/letter')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Points', 'Points')
GO
INSERT INTO [edfi].[RecognitionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Promotion or advancement', 'Promotion or advancement')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Aunt', 'Aunt')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Brother', 'Brother')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'BrotherInLaw', 'BrotherInLaw')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'CourtAppointedGuardian', 'CourtAppointedGuardian')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Cousin', 'Cousin')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Daughter', 'Daughter')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'DaughterInLaw', 'DaughterInLaw')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Employer', 'Employer')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Father', 'Father')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Father, step', 'Father, step')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'FatherInLaw', 'FatherInLaw')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'FathersCivilPartner', 'FathersCivilPartner')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'FathersSignificantOther', 'FathersSignificantOther')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fiance', 'Fiance')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fiancee', 'Fiancee')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foster parent', 'Foster parent')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Friend', 'Friend')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Grandfather', 'Grandfather')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Grandmother', 'Grandmother')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Great aunt', 'Great aunt')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Great Grandparent', 'Great Grandparent')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Great uncle', 'Great uncle')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Husband', 'Husband')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mother', 'Mother')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mother, step', 'Mother, step')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MothersCivilPartner', 'MothersCivilPartner')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MothersSignificantOther', 'MothersSignificantOther')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nephew', 'Nephew')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Niece', 'Niece')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SignificantOther', 'SignificantOther')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Sister', 'Sister')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Son', 'Son')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Uncle', 'Uncle')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown', 'Unknown')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ward', 'Ward')
GO
INSERT INTO [edfi].[RelationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Wife', 'Wife')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not repeated', 'Not repeated')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other, not counted in GPA', 'Other, not counted in GPA')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Repeated, counted in grade point average', 'Repeated, counted in grade point average')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Repeated, not counted in grade point average', 'Repeated, not counted in grade point average')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Repeated, other institution', 'Repeated, other institution')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Replacement counted', 'Replacement counted')
GO
INSERT INTO [edfi].[RepeatIdentifierType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Replacement not counted', 'Replacement not counted')
GO
INSERT INTO [edfi].[ReporterDescriptionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Law enforcement officer', 'Law enforcement officer')
GO
INSERT INTO [edfi].[ReporterDescriptionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Non-school personnel', 'Non-school personnel')
GO
INSERT INTO [edfi].[ReporterDescriptionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[ReporterDescriptionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Parent/guardian', 'Parent/guardian')
GO
INSERT INTO [edfi].[ReporterDescriptionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Staff', 'Staff')
GO
INSERT INTO [edfi].[ReporterDescriptionType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Student', 'Student')
GO
INSERT INTO [edfi].[ResidencyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Resident of administrative unit and usual school attendance area', 'Resident of administrative unit and usual school attendance area')
GO
INSERT INTO [edfi].[ResidencyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Resident of administrative unit, but of other school attendance area', 'Resident of administrative unit, but of other school attendance area')
GO
INSERT INTO [edfi].[ResidencyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Resident of an administrative unit that crosses state boundaries', 'Resident of an administrative unit that crosses state boundaries')
GO
INSERT INTO [edfi].[ResidencyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Resident of another state', 'Resident of another state')
GO
INSERT INTO [edfi].[ResidencyStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Resident of this state, but not of this administrative unit', 'Resident of this state, but not of this administrative unit')
GO
INSERT INTO [edfi].[ResponseIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Effective response', 'Effective response')
GO
INSERT INTO [edfi].[ResponseIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ineffective response', 'Ineffective response')
GO
INSERT INTO [edfi].[ResponseIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonscorable response', 'Nonscorable response')
GO
INSERT INTO [edfi].[ResponseIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Partial response', 'Partial response')
GO
INSERT INTO [edfi].[ResponsibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Accountability', 'Accountability')
GO
INSERT INTO [edfi].[ResponsibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Attendance', 'Attendance')
GO
INSERT INTO [edfi].[ResponsibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Discipline', 'Discipline')
GO
INSERT INTO [edfi].[ResponsibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Funding', 'Funding')
GO
INSERT INTO [edfi].[ResponsibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Graduation', 'Graduation')
GO
INSERT INTO [edfi].[ResponsibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Individualized Education Program', 'Individualized Education Program')
GO
INSERT INTO [edfi].[ResponsibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Transportation', 'Transportation')
GO
INSERT INTO [edfi].[RestraintEventReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Imminent Serious Physical Harm To Others', 'Imminent Serious Physical Harm To Others')
GO
INSERT INTO [edfi].[RestraintEventReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Imminent Serious Physical Harm To Themselves', 'Imminent Serious Physical Harm To Themselves')
GO
INSERT INTO [edfi].[RestraintEventReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Imminent Serious Property Destruction', 'Imminent Serious Property Destruction')
GO
INSERT INTO [edfi].[ResultDatatypeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Decimal', 'Decimal')
GO
INSERT INTO [edfi].[ResultDatatypeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Integer', 'Integer')
GO
INSERT INTO [edfi].[ResultDatatypeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Level', 'Level')
GO
INSERT INTO [edfi].[ResultDatatypeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Percentage', 'Percentage')
GO
INSERT INTO [edfi].[ResultDatatypeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Percentile', 'Percentile')
GO
INSERT INTO [edfi].[ResultDatatypeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Range', 'Range')
GO
INSERT INTO [edfi].[RetestIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', '1st Retest', '1st Retest')
GO
INSERT INTO [edfi].[RetestIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', '2nd Retest', '2nd Retest')
GO
INSERT INTO [edfi].[RetestIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', '3nd or more Retest', '3nd or more Retest')
GO
INSERT INTO [edfi].[RetestIndicatorType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Primary Administration', 'Primary Administration')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Adult School', 'Adult School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'All Levels', 'All Levels')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Elementary School', 'Elementary School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Elementary/Secondary School', 'Elementary/Secondary School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'High School', 'High School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Infant/toddler School', 'Infant/toddler School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Intermediate School', 'Intermediate School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Junior High School', 'Junior High School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Middle School', 'Middle School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Combination', 'Other Combination')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Secondary', 'Other Secondary')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Preschool/early childhood', 'Preschool/early childhood')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Primary School', 'Primary School')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SecondarySchool', 'SecondarySchool')
GO
INSERT INTO [edfi].[SchoolCategoryType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Ungraded', 'Ungraded')
GO
INSERT INTO [edfi].[SchoolChoiceImplementStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Implemented at all grade levels', 'Implemented at all grade levels')
GO
INSERT INTO [edfi].[SchoolChoiceImplementStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Implemented at some but not all grade levels', 'Implemented at some but not all grade levels')
GO
INSERT INTO [edfi].[SchoolChoiceImplementStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not required to implement public school choice', 'Not required to implement public school choice')
GO
INSERT INTO [edfi].[SchoolChoiceImplementStatusType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unable to implement at any grades levels', 'Unable to implement at any grades levels')
GO
INSERT INTO [edfi].[SchoolFoodServicesEligibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Free', 'Free')
GO
INSERT INTO [edfi].[SchoolFoodServicesEligibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Full price', 'Full price')
GO
INSERT INTO [edfi].[SchoolFoodServicesEligibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reduced price', 'Reduced price')
GO
INSERT INTO [edfi].[SchoolFoodServicesEligibilityType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown', 'Unknown')
GO
INSERT INTO [edfi].[SchoolType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Alternative', 'Alternative')
GO
INSERT INTO [edfi].[SchoolType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Career and Technical Education', 'Career and Technical Education')
GO
INSERT INTO [edfi].[SchoolType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Regular', 'Regular')
GO
INSERT INTO [edfi].[SchoolType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Special Education', 'Special Education')
GO
INSERT INTO [edfi].[SectionCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Attendance Tracked', 'Attendance Tracked')
GO
INSERT INTO [edfi].[SectionCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Graded Credit Available', 'Graded Credit Available')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Change of assignment', 'Change of assignment')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Discharge', 'Discharge')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Employment elsewhere', 'Employment elsewhere')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Family/personal relocation', 'Family/personal relocation')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Formal study or research', 'Formal study or research')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Illness/disability/death', 'Illness/disability/death')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Layoff', 'Layoff')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Personal reason', 'Personal reason')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Retirement', 'Retirement')
GO
INSERT INTO [edfi].[SeparationReasonType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown', 'Unknown')
GO
INSERT INTO [edfi].[SeparationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Involuntary separation', 'Involuntary separation')
GO
INSERT INTO [edfi].[SeparationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mutual agreement', 'Mutual agreement')
GO
INSERT INTO [edfi].[SeparationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[SeparationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Voluntary separation', 'Voluntary separation')
GO
INSERT INTO [edfi].[SexType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Female', 'Female')
GO
INSERT INTO [edfi].[SexType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Male', 'Male')
GO
INSERT INTO [edfi].[SexType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not Selected', 'Not Selected')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Correctional Facilities', 'Correctional Facilities')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Homebound/Hospital', 'Homebound/Hospital')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Inside regular class 80% or more of the day', 'Inside regular class 80% or more of the day')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Inside regular class less than 40% of the day', 'Inside regular class less than 40% of the day')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Inside regular class no more than 79% of day and no less than 40% of the day', 'Inside regular class no more than 79% of day and no less than 40% of the day')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Parentally-placed in Private Schools', 'Parentally-placed in Private Schools')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Residential Facility', 'Residential Facility')
GO
INSERT INTO [edfi].[SpecialEducationSettingType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Separate School', 'Separate School')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Assistant Principal', 'Assistant Principal')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Assistant Superintendent', 'Assistant Superintendent')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Counselor', 'Counselor')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Instructional Aide', 'Instructional Aide')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Instructional Coordinator', 'Instructional Coordinator')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LEA Administrator', 'LEA Administrator')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LEA Specialist', 'LEA Specialist')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Librarians/Media Specialists', 'Librarians/Media Specialists')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Operational Support', 'Operational Support')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Principal', 'Principal')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School Administrator', 'School Administrator')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School Leader', 'School Leader')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School Specialist', 'School Specialist')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State Administrator', 'State Administrator')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Substitute Teacher', 'Substitute Teacher')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Superintendent', 'Superintendent')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Support Services Staff', 'Support Services Staff')
GO
INSERT INTO [edfi].[StaffClassificationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Teacher', 'Teacher')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Canadian SIN', 'Canadian SIN')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'District', 'District')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Drivers License', 'Drivers License')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Federal', 'Federal')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Health Record', 'Health Record')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Medicaid', 'Medicaid')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Federal', 'Other Federal')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'PIN', 'PIN')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Professional Certificate', 'Professional Certificate')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Selective Service', 'Selective Service')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SSN', 'SSN')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State', 'State')
GO
INSERT INTO [edfi].[StaffIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'US Visa', 'US Visa')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AA', 'AA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AE', 'AE')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AK', 'AK')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AL', 'AL')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AP', 'AP')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AR', 'AR')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AS', 'AS')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'AZ', 'AZ')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'CA', 'CA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'CO', 'CO')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'CT', 'CT')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'DC', 'DC')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'DE', 'DE')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'FL', 'FL')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'FM', 'FM')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'GA', 'GA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'GU', 'GU')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'HI', 'HI')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'IA', 'IA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'ID', 'ID')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'IL', 'IL')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'IN', 'IN')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'KS', 'KS')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'KY', 'KY')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'LA', 'LA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MA', 'MA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MD', 'MD')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'ME', 'ME')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MH', 'MH')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MI', 'MI')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MN', 'MN')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MO', 'MO')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MP', 'MP')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MS', 'MS')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MT', 'MT')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NC', 'NC')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'ND', 'ND')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NE', 'NE')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NH', 'NH')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NJ', 'NJ')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NM', 'NM')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NV', 'NV')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'NY', 'NY')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'OH', 'OH')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'OK', 'OK')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'OR', 'OR')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'PA', 'PA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'PR', 'PR')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'PW', 'PW')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'RI', 'RI')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SC', 'SC')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SD', 'SD')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'TN', 'TN')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'TX', 'TX')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'UT', 'UT')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'VA', 'VA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'VI', 'VI')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'VT', 'VT')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'WA', 'WA')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'WI', 'WI')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'WV', 'WV')
GO
INSERT INTO [edfi].[StateAbbreviationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'WY', 'WY')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Asylee', 'Asylee')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Displaced Homemaker', 'Displaced Homemaker')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Foster Care', 'Foster Care')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Homeless', 'Homeless')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Immigrant', 'Immigrant')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Migrant', 'Migrant')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Neglected or Delinquent', 'Neglected or Delinquent')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Parent in Military', 'Parent in Military')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Pregnant', 'Pregnant')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Refugee', 'Refugee')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Runaway', 'Runaway')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Section 504 Handicapped', 'Section 504 Handicapped')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Single Parent', 'Single Parent')
GO
INSERT INTO [edfi].[StudentCharacteristicType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unaccompanied Youth', 'Unaccompanied Youth')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Canadian SIN', 'Canadian SIN')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'District', 'District')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Family', 'Family')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Federal', 'Federal')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Local', 'Local')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'National Migrant', 'National Migrant')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'School', 'School')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'SSN', 'SSN')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State', 'State')
GO
INSERT INTO [edfi].[StudentIdentificationSystemType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'State Migrant', 'State Migrant')
GO
INSERT INTO [edfi].[StudentParticipationCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Perpetrator', 'Perpetrator')
GO
INSERT INTO [edfi].[StudentParticipationCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Reporter', 'Reporter')
GO
INSERT INTO [edfi].[StudentParticipationCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Victim', 'Victim')
GO
INSERT INTO [edfi].[StudentParticipationCodeType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Witness', 'Witness')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', '4-year bachelor''s degree', '4-year bachelor''s degree')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', '5-year bachelor''s degree', '5-year bachelor''s degree')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Credentials based on reciprocation with another state', 'Credentials based on reciprocation with another state')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Doctoral degree', 'Doctoral degree')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Master''s degree', 'Master''s degree')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Met state testing requirement', 'Met state testing requirement')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Relevant experience', 'Relevant experience')
GO
INSERT INTO [edfi].[TeachingCredentialBasisType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Special/alternative program completion', 'Special/alternative program completion')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Emergency', 'Emergency')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Intern', 'Intern')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Master', 'Master')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Nonrenewable', 'Nonrenewable')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Paraprofessional', 'Paraprofessional')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Probationary/Initial', 'Probationary/Initial')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Professional', 'Professional')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Provisional', 'Provisional')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Regular/Standard', 'Regular/Standard')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Retired', 'Retired')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Specialist', 'Specialist')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Substitute', 'Substitute')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Teacher Assistant', 'Teacher Assistant')
GO
INSERT INTO [edfi].[TeachingCredentialType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Temporary', 'Temporary')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Emergency 1', 'Emergency 1')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Emergency 2', 'Emergency 2')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Fax', 'Fax')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Home', 'Home')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Mobile', 'Mobile')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unlisted', 'Unlisted')
GO
INSERT INTO [edfi].[TelephoneNumberType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Work', 'Work')
GO
INSERT INTO [edfi].[TermType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'MiniTerm', 'MiniTerm')
GO
INSERT INTO [edfi].[TermType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[TermType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Quarter', 'Quarter')
GO
INSERT INTO [edfi].[TermType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Semester', 'Semester')
GO
INSERT INTO [edfi].[TermType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Trimester', 'Trimester')
GO
INSERT INTO [edfi].[TermType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Year Round', 'Year Round')
GO
INSERT INTO [edfi].[TitleIPartAParticipantType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Local Neglected Program', 'Local Neglected Program')
GO
INSERT INTO [edfi].[TitleIPartAParticipantType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Private school students participating', 'Private school students participating')
GO
INSERT INTO [edfi].[TitleIPartAParticipantType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Public Schoolwide Program', 'Public Schoolwide Program')
GO
INSERT INTO [edfi].[TitleIPartAParticipantType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Public Targeted Assistance Program', 'Public Targeted Assistance Program')
GO
INSERT INTO [edfi].[TitleIPartAParticipantType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Was not served', 'Was not served')
GO
INSERT INTO [edfi].[TitleIPartASchoolDesignationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Not designated as a Title I Part A school', 'Not designated as a Title I Part A school')
GO
INSERT INTO [edfi].[TitleIPartASchoolDesignationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I Part A Schoolwide Assistance Program School', 'Title I Part A Schoolwide Assistance Program School')
GO
INSERT INTO [edfi].[TitleIPartASchoolDesignationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I Part A Targeted Assistance School', 'Title I Part A Targeted Assistance School')
GO
INSERT INTO [edfi].[TitleIPartASchoolDesignationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I school wide eligible - Title I targeted program', 'Title I school wide eligible - Title I targeted program')
GO
INSERT INTO [edfi].[TitleIPartASchoolDesignationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I school wide eligible school - no program', 'Title I school wide eligible school - no program')
GO
INSERT INTO [edfi].[TitleIPartASchoolDesignationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I targeted eligible school - no program', 'Title I targeted eligible school - no program')
GO
INSERT INTO [edfi].[TitleIPartASchoolDesignationType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Title I targeted school', 'Title I targeted school')
GO
INSERT INTO [edfi].[VisaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'B1 - Business Visa', 'B1 - Business Visa')
GO
INSERT INTO [edfi].[VisaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'B2 - Tourist Visa', 'B2 - Tourist Visa')
GO
INSERT INTO [edfi].[VisaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'F1 - Foreign Student Visa', 'F1 - Foreign Student Visa')
GO
INSERT INTO [edfi].[VisaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'H1 - Employment Visa', 'H1 - Employment Visa')
GO
INSERT INTO [edfi].[VisaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'J1 - Exchange Scholar Visa', 'J1 - Exchange Scholar Visa')
GO
INSERT INTO [edfi].[VisaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'M1 - Foreign Student pursuing vocational or non-academic studies Visa', 'M1 - Foreign Student pursuing vocational or non-academic studies Visa')
GO
INSERT INTO [edfi].[VisaType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Visa', 'Other Visa')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Club', 'Club')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Handgun', 'Handgun')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Knife', 'Knife')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other', 'Other')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Firearm', 'Other Firearm')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Object', 'Other Object')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Other Sharp Objects', 'Other Sharp Objects')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Rifle/Shotgun', 'Rifle/Shotgun')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Substance Used as Weapon', 'Substance Used as Weapon')
GO
INSERT INTO [edfi].[WeaponType] ([CodeValue], [Description], [ShortDescription]) VALUES ('', 'Unknown', 'Unknown')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1990', '1990-1991', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1991', '1991-1992', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1992', '1992-1993', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1993', '1993-1994', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1994', '1994-1995', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1995', '1995-1996', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1996', '1996-1997', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1997', '1997-1998', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1998', '1998-1999', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('1999', '1999-2000', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2000', '2000-2001', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2001', '2001-2002', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2002', '2002-2003', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2003', '2003-2004', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2004', '2004-2005', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2005', '2005-2006', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2006', '2006-2007', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2007', '2007-2008', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2008', '2008-2009', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2009', '2009-2010', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2010', '2010-2011', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2011', '2011-2012', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2012', '2012-2013', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2013', '2013-2014', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2014', '2014-2015', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2015', '2015-2016', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2016', '2016-2017', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2017', '2017-2018', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2018', '2018-2019', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2019', '2019-2020', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2020', '2020-2021', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2021', '2021-2022', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2022', '2022-2023', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2023', '2023-2024', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2024', '2024-2025', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2025', '2025-2026', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2026', '2026-2027', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2027', '2027-2028', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2028', '2028-2029', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2029', '2029-2030', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2030', '2030-2031', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2031', '2031-2032', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2032', '2032-2033', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2033', '2033-2034', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2034', '2034-2035', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2035', '2035-2036', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2036', '2036-2037', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2037', '2037-2038', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2038', '2038-2039', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2039', '2039-2040', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2040', '2040-2041', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2041', '2041-2042', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2042', '2042-2043', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2043', '2043-2044', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2044', '2044-2045', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2045', '2045-2046', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2046', '2046-2047', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2047', '2047-2048', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2048', '2048-2049', 'false')
GO
INSERT INTO [edfi].[SchoolYearType] ([SchoolYear], [SchoolYearDescription], [CurrentSchoolYear]) VALUES ('2049', '2049-2050', 'false')
GO
